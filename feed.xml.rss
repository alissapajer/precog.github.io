<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>   
    <title>Precog</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Precog Big Data Analytics</description>
    <pubDate>Wed, 12 Jun 2013 00:00:00 -0400</pubDate>
    <generator>The mighty Wintersmith</generator>
    <language>en</language>
    <item>
      <title>Scribe Analytics &mdash; Open Source Web Analytics Reimagined</title>
      <link>http://localhost:8080/blog/Scribe-Analytics-Released/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Scribe-Analytics-Released/</guid>
      <author></author>
      <description>&lt;p&gt;There are dozens of commercial web analytics solutions available today, from Google Analytics to Clicky to Mixpanel. 

&lt;/p&gt;
&lt;p&gt;However, there are a number of drawbacks to most of these analytics offerings:

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They force you to use a certain backend, such as Google Analytics. This means it&apos;s very hard to combine the web analytics data with other kinds of data at your company.&lt;/li&gt;
&lt;li&gt;They are from another era, when it was much more expensive to capture and store data. As a result, they generally only capture simple behaviors like clicks and page views. Real user behavior is far richer and more nuanced.&lt;/li&gt;
&lt;li&gt;They require programmers to write code in JavaScript to capture custom behaviors, such as &quot;downloading an app&quot; or &quot;playing a video&quot;. This requires costly integration and you have to know what you&apos;re looking for to measure it (which is seldom the case).&lt;/li&gt;
&lt;li&gt;Many offerings are focused on pages, not people (although a few newer products like KissMetrics get this right). Many companies use both marketing automation software and web analytics software to try to get a holistic sense of user behavior, which results in even more data silos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What&apos;s the solution to these problems? 

&lt;/p&gt;
&lt;p&gt;Of course, people have different opinions. In my opinion, the reason that web analytics products exist is because BI software (or, more generally and more precisely, analytics infrastructure) failed to meet the needs of companies trying to learn more about their online audiences.

&lt;/p&gt;
&lt;p&gt;The volume of data is too great, much of it is too sloppy, and existing relational technology (RDBMS) is poorly suited to analyze large quantities of event-oriented data.

&lt;/p&gt;
&lt;p&gt;Wherever there&apos;s a need, the market finds a way. And so today, we have literally dozens of web analytics companies, many of which are doing quite well, filling an important gap in the marketplace.

&lt;/p&gt;
&lt;p&gt;But technology doesn&apos;t stand still. &quot;Big data&quot; technology is growing more sophisticated. Data stores are more forgiving of heterogeneous and denormalized data. It&apos;s cheaper than ever to store terabytes or even petabytes of data. And analytics tools for big data continue to improve (albeit, they are still many years away from being truly accessible).

&lt;/p&gt;
&lt;p&gt;It&apos;s in this context that I would like to introduce you to &lt;a href=&quot;https://github.com/scribe-analytics/scribe-analytics&quot;&gt;Scribe Analytics&lt;/a&gt;, an &lt;a href=&quot;https://github.com/scribe-analytics/scribe-analytics&quot;&gt;open source library&lt;/a&gt; that specifically addresses many of the pain points above, and takes advantage of some of the technological progress being made in the big data ecosystem.

&lt;/p&gt;
&lt;p&gt;Scribe Analytics is a pure front-end analytics solution. It&apos;s a couple of static files that you can host anywhere (including on a CDN). There&apos;s no server-side code.

&lt;/p&gt;
&lt;p&gt;Not only does this approach offload a lot of work to clients (where CPU and memory are plentiful and free!), but client-side analytics solutions are capable of capturing an enormous amount of detail that is not visible to server-side approaches.

&lt;/p&gt;
&lt;p&gt;Indeed, Scribe Analytics attempts to capture numerous aspects of user behavior, relying on cheap network and storage to create extremely detailed profiles of user behavior.

&lt;/p&gt;
&lt;p&gt;In particular, all of the following behaviors are captured at the level of every single visitor:

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Page views &mdash; Every page view event is captured, together with information on the browser, referrer, platform, and much more.&lt;/li&gt;
&lt;li&gt;Clicks &mdash; Every click event will be captured, including information on the element that is clicked (id, title, data attributes, unique css selector). If a link is clicked, then then information on the link target will be captured, as well.&lt;/li&gt;
&lt;li&gt;Engagements &mdash; Every engagement with any HTML element in a document is captured, including information on the element (id, title, data attributes, unique css selector). Engagement is defined as a mouseover inside a certain time window (e.g. 1 and 20 seconds). Mouseovers outside the time window are not counted as engagements.&lt;/li&gt;
&lt;li&gt;Jumps &mdash; Every jump (defined as navigation inside a page which results in a change to the URL hash) is captured, including information on the element that was jumped to (id, title, data attributes, unique css selector).&lt;/li&gt;
&lt;li&gt;Forms &mdash; All form interaction, including form abandonment and form submission, is captured, including details on all form fields that are not marked as passwords and which have not turned off auto-complete (via the autocomplete property). Forms interaction inside iframes will not be captured.&lt;/li&gt;
&lt;li&gt;Redirects &mdash; Scribe will attempt to capture JavaScript redirects, but if the user is redirected to another site, and never returns, the redirect may not be captured.&lt;/li&gt;
&lt;li&gt;Reloads &mdash; All page reloads are captured. A reload occurs whenever the page is refreshed, either by the user or programmatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is just a start. As Scribe Analytics matures, it will capture even more detailed information (such as how much time your page spends in the background and in the foreground, how many tabs are open to your site at a time, and so forth), and even as I write this, cross-domain visitor tracking is in development (enabling you to see a complete picture of your users as they cross different online properties).

&lt;/p&gt;
&lt;p&gt;Scribe Analytics is capable of tracking all this data either anonymously, using persistent visitor ids, or tied to a specific identified user, if you supply information on the identity of the user by invoking a JavaScript function.

&lt;/p&gt;
&lt;p&gt;Scribe Analytics requires no coding or configuration. By default, it will aggressively track everything that users do down to the smallest detail, even saving form details so you can later tie user behaviors to specific (identified) users.

&lt;/p&gt;
&lt;p&gt;Of course, Scribe Analytics is just a front-end, which means you need a backend to store this data, to perform analysis, and to create charts and reports. So Scribe Analytics is really only half the solution to the web analytics problem.

&lt;/p&gt;
&lt;p&gt;But as pure open source software, you can plug Scribe Analytics into any backend that has the capability to handle large volumes of potentially heterogeneous, denormalized, event-oriented data.

&lt;/p&gt;
&lt;p&gt;Over time, I expect communities to contribute many different back-ends for Scribe Analytics (if you want to contribute one, just let me know!).

&lt;/p&gt;
&lt;p&gt;Of course, Scribe Analytics ships with a Precog-integration out of the box, so if you&apos;re a Precog user, you can drop Scribe into your web pages, and analyze and visualize data (or build dashboards) using Labcoat. It&apos;s as easy as that.

&lt;/p&gt;
&lt;p&gt;The flexibility to use your own back-end means that it&apos;s easier than ever to tie web analytics data to sales data, customer support data, CRM data, and other kinds of data inside your company. 

&lt;/p&gt;
&lt;p&gt;Since Scribe Analytics was designed for modern infrastructure, it captures all user behavior, and lets you decide later what might be important, without needing to write any custom JavaScript code (zero integration and configuration!).

&lt;/p&gt;
&lt;p&gt;Finally, Scribe Analytics makes it easy to identify users, but you may not even have to do that since Scribe tracks enough data that if users fill out any forms on your website, you can tie the anonymous data back to specific users.

&lt;/p&gt;
&lt;p&gt;Scribe Analytics is hosted on &lt;a href=&quot;https://github.com/scribe-analytics/scribe-analytics&quot;&gt;Github&lt;/a&gt;, and is released under the New BSD License, which makes it free to use and modify even for commercial projects.

&lt;/p&gt;
&lt;p&gt;Please &lt;a href=&quot;https://github.com/scribe-analytics/scribe-analytics&quot;&gt;check it out&lt;/a&gt; and let me know what you think!
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Precog Launches from Beta</title>
      <link>http://localhost:8080/blog/Precog-Launches-from-Beta/</link>
      <pubDate>Wed, 01 May 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Launches-from-Beta/</guid>
      <author></author>
      <description>&lt;p&gt;Today&apos;s an extraordinarily special day for Precog and I&apos;ve got some incredibly exciting news to share. News that comes around at most once in a product&apos;s lifetime. 

&lt;/p&gt;
&lt;p&gt;After 6 months in public beta, Precog is announcing that we are exiting beta and entering into general availability. We are officially opening our doors and accepting unlimited numbers of production accounts!

&lt;/p&gt;
&lt;p&gt;A huge thanks to the more than 1300 companies who have taken us for a spin. You&apos;ve given us a tremendous amount of valuable feedback, you&apos;ve put up with rough edges and warts, and you&apos;ve inspired us to make our technology faster, better, and easier to use.

&lt;/p&gt;
&lt;p&gt;I also owe an equally large debt of gratitude to the Precog team members who have worked so hard in getting to where we are today.

&lt;/p&gt;
&lt;p&gt;You guys and gals have worked tirelessly in making our product better with each passing today. You&apos;ve put your love and your passion and your expertise into Precog, and you have made raving fans out of a growing number of customers. I&apos;m extremely proud of all of you!

&lt;/p&gt;
&lt;p&gt;As part of the launch, you&apos;ll notice a bunch of improvements on the frontend:

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brand new website, easier to understand and to navigate.&lt;/li&gt;
&lt;li&gt;Completely redesigned account signup, login, and management, which make it easier than ever to get started with Precog.&lt;/li&gt;
&lt;li&gt;Brand new and completely overhauled client libraries for our REST API.&lt;/li&gt;
&lt;li&gt;Simple and transparent pricing across our whole stack.&lt;/li&gt;
&lt;li&gt;Cleaner and better documentation than ever before.&lt;/li&gt;
&lt;li&gt;Immediate availability of our on-premises solution, in both a hardware appliance and a virtual appliance (thanks to popular demand!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&apos;ll also notice we&apos;ve forked the home page into two different tracks: one for businesses, and one for developers. Each group has different needs. 

&lt;/p&gt;
&lt;p&gt;One wants to think in terms of business value and solving business problems, and the other wants to think in terms of how Precog works and what Precog can do at a technical level. By forking the home page, we can direct each group to content they want to see, rather than trying to aim for a middle-ground that confuses business stakeholders and doesn&apos;t contain the juicy technical details that developers need.

&lt;/p&gt;
&lt;p&gt;Please give our &lt;a href=&quot;http://www.precog.com/&quot;&gt;new site&lt;/a&gt; a whirl, and consider &lt;a href=&quot;http://www.precog.com/account/login/&quot;&gt;signing&lt;/a&gt; up for a free account in our managed cloud. If you have any feedback, please send it on to me directly at &lt;a href=&quot;mailto:john@precog.com&quot;&gt;john@precog.com&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Thanks again to everyone who made this day possible!
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Precog Copointed: Predictive Analytics and Machine Learning in Quirrel</title>
      <link>http://localhost:8080/blog/Precog-Copointed-Predictive-Analytics-Machine-Learning/</link>
      <pubDate>Thu, 25 Apr 2013 01:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-Predictive-Analytics-Machine-Learning/</guid>
      <author></author>
      <description>&lt;p&gt;One feature that sets Precog apart from many embedded reporting solutions is the possibility to perform advanced analytics.  This includes the ability to perform predictive analytics.  Among other things, predictions can be used to create personalizations, recommendations or other sales optimizations.

&lt;/p&gt;
&lt;p&gt;In this blog post, we will cover simple introductory examples of clustering, linear regression, logistic regression and applying evaluation metrics.  The code snippets included will use data included in the demo version of &lt;a href=&quot;http://labcoat.precog.com/&quot;&gt;Labcoat&lt;/a&gt; so that you can run the queries and modify if desired.

&lt;/p&gt;
&lt;h2&gt;Clustering&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cluster_analysis&quot;&gt;Cluster analysis&lt;/a&gt; is the process of finding groups in a set of data that are similar to each other.  The notion of similarity can vary depending on the specific clustering algorithm used, but the general idea is to find points in the data that minimize the distance between those points and the rest of the points in the data.  For more details, see an overview or the details on the &lt;a href=&quot;http://valis.cs.uiuc.edu/~sariel/papers/03/kcoreset/kcoreset.pdf&quot;&gt;specific algorithm we use&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Suppose we had some demographic data and wanted to do customer segmentation.  A query like the this would automatically find natural segments in the data and allow us to examine if there is any meaningful difference in customer behavior.

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import std::stats::*
conversions := &lt;span class=&quot;comment&quot;&gt;//conversions&lt;/span&gt;

input := { age : conversions.customer.age }
model := kMedians( input, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; )

conversions&lt;span class=&quot;string&quot;&gt;' := conversions with {cluster : assignClusters(input, model) }

solve '&lt;/span&gt;cluster
  {
  cluster: &lt;span class=&quot;string&quot;&gt;'cluster,
  mean : mean(conversions'&lt;/span&gt;.product.price where 
           conversions&lt;span class=&quot;string&quot;&gt;'.cluster.model1.clusterId = '&lt;/span&gt;cluster)
  }  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://labcoat.precog.com/?q=import+std%3A%3Astats%3A%3A*%0Aconversions+%3A%3D+%2F%2Fconversions%0A%0Ainput+%3A%3D+{+age+%3A+conversions.customer.age+}%0Amodel+%3A%3D+kMedians%28+input%2C+7+%29%0A%0Aconversions%27+%3A%3D+conversions+with+{cluster+%3A+assignClusters%28input%2C+model%29+}%0A%0Asolve+%27cluster%0A++{%0A++cluster%3A+%27cluster%2C%0A++mean+%3A+mean%28conversions%27.product.price+where+conversions%27.cluster.model1.clusterId+%3D+%27cluster%29%0A++}&amp;apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;analyticsService=https%3A%2F%2Flabcoat.precog.com%2F&quot;&gt;Check out this query in Labcoat.&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Creating clusters is as easy as passing data to cluster on to the kMedians function and deciding how many clusters to create.  The resulting model will contain centroids that minimize the distance between each datapoint and its closest centroid. This model can then be used to assign existing data to a particular cluster for historical analysis or assign incoming data to a cluster for near real-time usage.

&lt;/p&gt;
&lt;p&gt;While many of the clusters have similar mean sales in this example there is still a significant discrepancy between the cluster with the highest mean sales being over 22% higher than the cluster with the lowest mean sales. Depending upon the demographics and cost of acquiring customers in the various clusters, this could be a meaningful insight that boosts average sales and revenue.

&lt;/p&gt;
&lt;h2&gt;Linear Regression&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Linear_regression&quot;&gt;Linear regression&lt;/a&gt; is a statistical technique for modeling the best fit line through a set of data points.  Given its name of linear, it should be clear that linear regression can have difficulty predicting relationships that are non-linear, but linear regression is the best linear unbiased estimator of non-linear relationships.

&lt;/p&gt;
&lt;p&gt;A regression equation is of the form:

&lt;/p&gt;
&lt;p&gt;y = x0 + ẞ&lt;sub&gt;1&lt;/sub&gt;x1 + ẞ&lt;sub&gt;2&lt;/sub&gt;x&lt;sub&gt;2&lt;/sub&gt; + ... 

&lt;/p&gt;
&lt;p&gt;where y is the dependent variable being predicted, x&lt;sub&gt;0&lt;/sub&gt; is a constant y-intercept, x&lt;sub&gt;1&lt;/sub&gt; through x&lt;sub&gt;n&lt;/sub&gt; are dependent variables and ẞ&lt;sub&gt;1&lt;/sub&gt; through ẞ&lt;sub&gt;n&lt;/sub&gt; are the coefficients.  The interpretation of a regression is that for each 1 unit increase in x&lt;sub&gt;1&lt;/sub&gt; there will on average be associated a ẞ&lt;sub&gt;1&lt;/sub&gt; change in y.  

&lt;/p&gt;
&lt;p&gt;A common example from economics is to look at the relationship between years of education and annual income.  In this example, years of education will be an independent variable and we are attempting to determine its relationship to annual income which will be the dependent variable :

&lt;/p&gt;
&lt;p&gt;annual income in dollars = some constant + ẞ&lt;sub&gt;1&lt;/sub&gt; * years of education + .... 

&lt;/p&gt;
&lt;p&gt;The ... is important here.  These represent control variables that attempt to narrow the comparison as much as possible.  In this example, they might be things like race, gender, region and industry.  This helps isolate specifically the relationship that years of education has with annual income. Suppose that ẞ&lt;sub&gt;1&lt;/sub&gt; is 3,000.  Then, on average, a 1 year increase in years of education is associated with a $3,000 increase in annual earnings.

&lt;/p&gt;
&lt;p&gt;Part of what is so nice about linear regression is that it has such a clean and useful explanatory capability.  For raw predictive power, random forest will typically outperform linear regression, but linear regression still has a place in understanding specific relationships and their magnitude.  

&lt;/p&gt;
&lt;p&gt;In this example, we examine the relationship between an athlete’s weight and their height, age and medals won at the summer games in london.

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;medals := &lt;span class=&quot;comment&quot;&gt;//summer_games/london_medals&lt;/span&gt;

indVars :=
{
HeightIncm : medals.HeightIncm,
Age : medals.Age,
Total : medals.Total
}

std::stats::linearRegression(medals.Weight, indVars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href&quot;https://labcoat.precog.com/?q=medals+%3A%3D+%2F%2Fsummer_games%2Flondon_medals%0A%0AindVars+%3A%3D%0A{%0AHeightIncm+%3A+medals.HeightIncm%2C%0AAge+%3A+medals.Age%2C%0ATotal+%3A+medals.Total%0A}%0A%0Astd%3A%3Astats%3A%3AlinearRegression%28medals.Weight%2C+indVars%29&amp;apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;analyticsService=https%3A%2F%2Flabcoat.precog.com%2F&quot;&gt;Run this query in Labcoat.&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;And a look at a subset of the output:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot;model2&quot;: {
     &quot;coefficients&quot;: [
       {
         &quot;HeightIncm&quot;: {
           &quot;estimate&quot;: 1.0997392523919332,
           &quot;standardError&quot;: 0.031407749767906355
         },
         &quot;Total&quot;: {
           &quot;standardError&quot;: 0.7136294756726215,
           &quot;estimate&quot;: 1.5812939398407877
         },
         &quot;Age&quot;: {
           &quot;estimate&quot;: 0.11920578883597059,
           &quot;standardError&quot;: 0.06478117116040236
         }
       },
       {
         &quot;estimate&quot;: -125.49027015629706,
         &quot;standardError&quot;: 5.802076482230592
       }
     ],
     &quot;residualStandardError&quot;: {
       &quot;estimate&quot;: 10.505454174431426,
       &quot;degreesOfFreedom&quot;: 905
     },
     &quot;RSquared&quot;: 0.5814684929851268
   }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some things to notice above, starting from the bottom.  The RSquared value is a measure of percentage of variance explained by the regression.  Evaluating a RSquared value is typically quite domain dependent but gives some initial indication as to the explanatory power of the model.  Next, looking at the dependent variables of height, age and medals we notice the estimate which is the coefficient and a standard error.  The ratio of the estimate to the standard error helps indicate what is statistically significant (a ratio of 2 or higher is generally meaningful). Both age and total are borderline, while height (unsurprisingly) is quite significant.  Each additional centimeter of height is on average associated with an additional kilogram of weight.  Notice also the high negative value of the y-intercept that this has to overcome.

&lt;/p&gt;
&lt;h2&gt;Logistic Regression&lt;/h2&gt;
&lt;p&gt;Logistic regression is regression designed for classification as opposed to predicting a continuous value.  It is appropriate when the dependent variable is categorical. An example of a  categorical variable would be a set of colors.  If &quot;green&quot; is coded as 4 in our data and &quot;blue&quot; is coded as &quot;2&quot; it does not mean that we would expect to see twice the effect from a &quot;green&quot; than from a &quot;blue&quot;.  Our current implementation of logistic regression is limited to the binary case of predicting 1s and 0s.  To classify a multinomial categorical variable, you can use random forest.

&lt;/p&gt;
&lt;p&gt;We might also be interested in attempting to predict demographic data from other data we have access to.  These predictions might be fuzzy in their accuracy, but imputed values may still provide additional opportunities to make custom recommendations or sales optimizations.  For example, there may be recommendations that can be made based on gender.  So we can create a model that will predict gender based on the price of the product purchased and the age of the customer.

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import std::stats::*

conversions := &lt;span class=&quot;comment&quot;&gt;//conversions&lt;/span&gt;
conversions&lt;span class=&quot;string&quot;&gt;' := conversions with {female : 
                if conversions.customer.gender = &quot;female&quot; then 1 else 0 }

indVars :=
 {
 price : conversions'&lt;/span&gt;.product.price,
 age : conversions&lt;span class=&quot;string&quot;&gt;'.customer.age
 }

logisticRegression( conversions'&lt;/span&gt;.female, indVars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://labcoat.precog.com/?q=import+std%3A%3Astats%3A%3A*%0Aconversions+%3A%3D+%2F%2Fconversions%0Aconversions%27+%3A%3D+conversions+with+{female+%3A+if+conversions.customer.gender+%3D+%22female%22+then+1+else+0+}%0A%0AindVars+%3A%3D%0A+{%0A+price+%3A+conversions%27.product.price%2C%0A+age+%3A+conversions%27.customer.age%0A+}%0A%0AlogisticRegression%28+conversions%27.female%2C+indVars%29&amp;apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;analyticsService=https%3A%2F%2Flabcoat.precog.com%2F&quot;&gt;View in Labcoat.&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;The resulting model will give us a probability  estimate based on the price of the product being considered and the age of the customer that the customer is female. This can then be used to impute missing values in historical data or as a real-time prediction to generate dynamic content in an application.  

&lt;/p&gt;
&lt;h2&gt;Evaluation Metrics&lt;/h2&gt;
&lt;p&gt;It is often helpful to have some means of evaluating the quality of a prediction.  There are a multitude of such evaluation metrics and deciding on the correct one is an important part of the process (which is beyond the scope of this post).  For a list of a number of metrics and their implementations in number of languages, see &lt;a href=&quot;https://github.com/benhamner/Metrics&quot;&gt;Ben Hamner’s repository&lt;/a&gt; of metrics used in &lt;a href=&quot;http://www.kaggle.com/&quot;&gt;Kaggle competitions&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Let’s focus on creating and deploying a single evaluation metric in Quirrel.  We’ll use root mean squared error (RMSE) because its relatively common.

&lt;/p&gt;
&lt;p&gt;RMSE = sqrt(mean(observed - predicted)^2)

&lt;/p&gt;
&lt;p&gt;In Quirrel, we can create a user-defined function that will calcluate the RMSE:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rmse(observed, predicted) :=

 diff := observed - predicted

 std::math::sqrt((mean(diff^2)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we just need some observed and predicted values to feed into our function. Let’s return the olympics data, split it into a training and test set and use our model to predict the weight of athletes in the test set.

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;medals := &lt;span class=&quot;comment&quot;&gt;//summer_games/london_medals&lt;/span&gt;

filter := observe(medals, std::random::uniform(&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;))
train := medals where filter &lt;= &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;
test := medals where filter &gt; &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;

indVars :=
{
HeightIncm : train.HeightIncm,
Age : train.Age,
Total : train.Total
}

model := std::stats::linearRegression(train.Weight, indVars)
prediction := std::stats::predictLinear(test, model)

results := test with {prediction : prediction}

rmse(predicted, observed) :=
 diff := observed - predicted
 std::math::sqrt((mean(diff^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)))

{
model1rmse : rmse(results.prediction.model1.fit, results.Weight),
model2rmse : rmse(results.prediction.model2.fit, results.Weight)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://labcoat.precog.com/?q=medals+%3A%3D+%2F%2Fsummer_games%2Flondon_medals%0A%0Afilter+%3A%3D+observe%28medals%2C+std%3A%3Arandom%3A%3Auniform%2838%29%29%0Atrain+%3A%3D+medals+where+filter+%3C%3D+0.8%0Atest+%3A%3D+medals+where+filter+%3E+0.8%0A%0AindVars+%3A%3D%0A{%0AHeightIncm+%3A+train.HeightIncm%2C%0AAge+%3A+train.Age%2C%0ATotal+%3A+train.Total%0A}%0A%0Amodel+%3A%3D+std%3A%3Astats%3A%3AlinearRegression%28train.Weight%2C+indVars%29%0Aprediction+%3A%3D+std%3A%3Astats%3A%3ApredictLinear%28test%2C+model%29%0Aresults+%3A%3D+test+with+{prediction+%3A+prediction}%0A%0Armse%28predicted%2C+observed%29+%3A%3D%0A+diff+%3A%3D+observed+-+predicted%0A+std%3A%3Amath%3A%3Asqrt%28%28mean%28diff^2%29%29%29%0A%0A{%0Amodel1rmse+%3A+rmse%28results.prediction.model1.fit%2C+results.Weight%29%2C%0Amodel2rmse+%3A+rmse%28results.prediction.model2.fit%2C+results.Weight%29%0A}&amp;apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;analyticsService=https%3A%2F%2Flabcoat.precog.com%2F&quot;&gt;See the results in Labcoat&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Note that the results include rmse for two different models.  This is because Precog supports heterogeneous data.  So linear regression will create a model for each schema in the data.  Some observations are missing data for height, which dramatically reduces the quality of the prediction.  Notice that the RMSE for the model with height is almost twice as good as the model without.  This can help you understand your data better and the value that each component provides.

&lt;/p&gt;
&lt;p&gt;These examples just scratch the surface of the ability to use Precog to leverage your data to create meaningful, revenue enhancing predictions in your application.  But they show how Precog is different from many traditional BI platforms and is focused on data science for deep, useful analysis.  &lt;/p&gt;
</description>
    </item>
    <item>
      <title>2013 Data Science Fair Winners &amp; Photos</title>
      <link>http://localhost:8080/blog/2013-Data-Science-Fair-Winners-and-Photos/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/2013-Data-Science-Fair-Winners-and-Photos/</guid>
      <author></author>
      <description>&lt;p&gt;On Monday night, the Precog team attended the &lt;a href=&quot;http://bigdataweek.com/2013/03/17/big-data-science-fair/&quot;&gt;Data Science Fair&lt;/a&gt; as part of &lt;a href=&quot;http://bigdataweek.com/colorado/&quot;&gt;Big Data Week&lt;/a&gt; here in Colorado. The room was packed with Data Scientists, Graduate Students, &amp; Data Nerds and tables were covered with data visualizations and interesting projects showing how big data is solving problems in the world.&lt;/p&gt;
&lt;img height=&quot;293&quot; src=&quot;images/image01.jpg&quot; width=&quot;520&quot;&gt;
&lt;p&gt;Attendees walked around (after filling up on pizza and beer) the room talking to each presenter and then voted via text message. Franco and Nathan from the Precog team were the judges for the Judges Choice award. &lt;a href=&quot;http://www.precog.com&quot;&gt;Precog&lt;/a&gt; and &lt;a href=&quot;http://www.gnip.com&quot;&gt;GNIP&lt;/a&gt; sponsored the event and the new &lt;a href=&quot;http://boulderriverside.com&quot;&gt;Boulder Riverside&lt;/a&gt; donated the space. Watch the &lt;a href=&quot;http://www.youtube.com/watch?v=0v5JfmZFsCc&quot;&gt;timelapse video&lt;/a&gt; below to see how the custom-made trophies were built!&lt;/p&gt;
&lt;p&gt;Here are the presentations from the &lt;a href=&quot;http://fur.ly/0/BigDataStudents&quot;&gt;students&lt;/a&gt; and from the &lt;a href=&quot;http://fur.ly/0/BigDataTechCompanies&quot;&gt;tech companies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulations to the winners of the Big Data Science Fair!&lt;/p&gt;
&lt;ol&gt;
   &lt;li&gt;Judges Choice: &ldquo;Aggregated Entertainment&rdquo; Greg Guyles&lt;/li&gt;
   &lt;li&gt;The Mad Scientist: &ldquo;What Hockey Fans are Saying&rdquo; Jeffrey Gunderson&lt;/li&gt;
   &lt;li&gt;Most Impactful Insight: &ldquo;Aggregated Entertainment&rdquo; Greg Guyles&lt;/li&gt;
   &lt;li&gt;The Creative Champion: &ldquo;Feed For iPhone: Deals Culled from Social Media Worldwide&rdquo; Tagwhat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img height=&quot;337&quot; src=&quot;images/image00.jpg&quot; width=&quot;595&quot;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Join us for Big Data &amp; Coffee @ TechStars</title>
      <link>http://localhost:8080/blog/Join-us-for-Big-Data-and-Coffee-at-TechStars/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Join-us-for-Big-Data-and-Coffee-at-TechStars/</guid>
      <author></author>
      <description>&lt;p&gt;As part of &lt;a href=&quot;http://bigdataweek.com/colorado/&quot;&gt;Big Data Week&lt;/a&gt;, we will be on the panel at &lt;a href=&quot;http://bigdataweek.com/2013/03/17/big-data-coffee-at-techstars/&quot;&gt;Big Data &amp; Coffee at TechStars&lt;/a&gt; next Tuesday, April 23 from 8-10am. Come over for free bagels &amp; coffee at TechStars!&lt;/p&gt;
&lt;p&gt;Get your day started by listening to an exciting panel of big movers and business owners involved in Big Data in the Denver/Boulder Metro region as well as from San Francisco. These Big Data leaders will not only share what they are doing individually within their own businesses and organizations to leverage &#8220;lessons learned&#8221; from past IT business cycles but also speak to how Big Data can be used as a catalyst to build a strong, profitable, and sustainable Information Technology and R&amp;D ecosystem here in the Rockies that contributes globally. &lt;a href=&quot;http://bigdatacoffee.eventbrite.com/&quot;&gt;Register here! &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PANEL MEMBERS:&lt;/strong&gt;&lt;br /&gt;
John De Goes, CEO &amp; CTO &#8211; &lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt;&lt;br /&gt;
Jim Franklin, CEO &#8211; &lt;a href=&quot;http://www.sendgrid.com/&quot;&gt;SendGrid&lt;/a&gt;&lt;br /&gt;
Narenedra Patil, SVP Marketing &#8211; &lt;a href=&quot;http://www.ngdata.com/&quot;&gt;NGData&lt;/a&gt;&lt;br /&gt;
Ken Anderson, Ph.D., Associate Chair of Computer Science &#8211; &lt;a href=&quot;http://www.cs.colorado.edu/~kena/&quot;&gt;CU Boulder&lt;/a&gt;&lt;br /&gt;
Christian Macy, Owner and Entrepreneur &#8211; &lt;a href=&quot;http://boulderfuse.com/&quot;&gt;Boulder Fuse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We hope to see next Tuesday morning at TechStars. Don&#8217;t forget to save your spot and &lt;a href=&quot;http://bigdatacoffee.eventbrite.com/&quot;&gt;register here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&nbsp;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data Science Fair, Sponsored by Precog</title>
      <link>http://localhost:8080/blog/Big-Data-Science-Fair-Sponsored-by-Precog/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Big-Data-Science-Fair-Sponsored-by-Precog/</guid>
      <author></author>
      <description>&lt;p&gt;Can you open peoples eyes with data? Whether you&#8217;re mapping the ocean floor, looking for a cure for a disease, or trying to recommend products to customers, big data is changing how we solve problems in the world!&lt;/p&gt;
&lt;p&gt;Join us next Monday, &lt;strong&gt;April 22 from 5-7pm&lt;/strong&gt; for the &lt;a href=&quot;http://bigdataweek.com/2013/03/17/big-data-science-fair/&quot;&gt;Big Data Science Fair&lt;/a&gt; to see dozens of big data visualizations and projects at the new Riverside Fuse co-working space in Boulder, Colorado. There will be a mix of University of Colorado graduate students and technology companies showing how they are using big data to uncover the answers to questions and solve problems. We are sponsoring this event along with our friends over at GNIP.&lt;/p&gt;
&lt;p&gt;You&#8217;ll be able to walk around and vote on your mobile phone via text message to nominate presentations for awards such as &lt;em&gt;Impactful Insight&lt;/em&gt;, &lt;em&gt;Creative Champion&lt;/em&gt; and &lt;em&gt;Judges Choice&lt;/em&gt;. The trophies are handmade (see photo below) and additional prizes were donated by our friends at Quick Left.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presenters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Over 15 University of Colorado graduate students from Professor Tom Yeh�s Big Data class will present their semester projects.&lt;/li&gt;
    &lt;li&gt;Local Companies: Precog, Gnip, Trueffect, Tagwhat, Geosales, RoseBT and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; Details:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Free Pizza, Beer, and Drinks!&lt;/li&gt;
    &lt;li&gt;Bring your cell phone so that you can text to vote and nominate your favorite presentations for prizes!&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Register for this FREE event at &lt;/span&gt;&lt;a href=&quot;http://bigdataweek.com/2013/03/17/big-data-science-fair/&quot;&gt;&lt;a href=&quot;http://bigdatasciencefair.eventbrite.com/&lt;/a&gt;&lt;/li&gt;&quot;&gt;http://bigdatasciencefair.eventbrite.com/&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://bigdataweek.com/2013/03/17/big-data-science-fair/&quot;&gt;&lt;img alt=&quot;bigdatasciencefairtrophies&quot; src=&quot;/blog/images/bigdatasciencefairtrophies-1024x645.jpg&quot; width=&quot;625&quot; height=&quot;393&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We hope to see you next Monday night! Don&#8217;t forget to sign up &lt;a href=&quot;http://bigdatasciencefair.eventbrite.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quirrel and How it Compares to R</title>
      <link>http://localhost:8080/blog/Quirrel-and-How-it-Compares-to-R/</link>
      <pubDate>Thu, 11 Apr 2013 09:26:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Quirrel-and-How-it-Compares-to-R/</guid>
      <author></author>
      <description>&lt;p&gt;Next Tuesday our team will be speaking to the &lt;a href=&quot;http://www.meetup.com/DenverRUG/&quot;&gt;R User Group&lt;/a&gt; in Denver. If you&apos;re in the area, please come and hear our Developer Evangelist, Nathan Lubchenco, talk on &quot;&lt;a href=&quot;http://www.meetup.com/DenverRUG/events/106221902/&quot;&gt;Quirrel and How it Relates to R&lt;/a&gt;&quot; in this Meetup at UC Denver on April 16th at 7pm.&lt;/p&gt;
&lt;p&gt;Nathan will talk about talk about a statistically-oriented query language called &quot;Quirrel&quot; and its similarities and differences with R. While &lt;a href=&quot;http://quirrel-lang.org/&quot;&gt;Quirrel&lt;/a&gt; is neither as mature as R nor situated in such a robust ecosystem, it is easier to learn and simple to deploy results. In addition to some basic functionality, a predictive model will be created and discussed. Quirrel, sometimes referred to as the &quot;R for big data&quot; query language, is a new language designed specifically around modern needs for analyzing large amounts of semi-structured data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/DenverRUG/events/106221902/&quot;&gt;RSVP on Meetup&lt;/a&gt; and we hope to see you next week!&lt;/p&gt;</description>
    </item>
    <item>
      <title>You're invited to a Precog Webinar!</title>
      <link>http://localhost:8080/blog/You-are-invited-to-a-Precog-Webinar!/</link>
      <pubDate>Mon, 08 Apr 2013 18:07:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/You-are-invited-to-a-Precog-Webinar!/</guid>
      <author></author>
      <description>&lt;p&gt;Our Developer Evangelist, Nathan Lubchenco, will be hosting a &lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;series of webinars&lt;/a&gt; this month, which go into more detail on the &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog platform&lt;/a&gt;. Each webinar is 30 minutes and you&apos;ll have a chance to ask him any questions. Take your pick of the series or attend all three! You can learn how to perform analytics in our data science application, create interactive charts, and embed a reporting dashboard in your application!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;Sign up&lt;/a&gt; today to save your spot - the first one is this Wednesday!&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Wednesday, April 10 - 11am MDT&lt;/strong&gt; &lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;How to Clean Up and Analyze Clickstream Data with Labcoat&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Wednesday, April 17 - 12pm MDT&lt;/strong&gt; &lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;How to Build Interactive Data Visualizations&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Tuesday, April 23 - 11am MDT&lt;/strong&gt; &lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;How to Embed a Reporting Dashboard in your Application&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&apos;re looking to learn about something that is not included above, we&apos;re still happy to give you a custom demo. Request one &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;here&lt;/a&gt;. I hope to see you at one of our &lt;a href=&quot;http://www.precog.com/webinars/march&quot;&gt;webinars&lt;/a&gt; this month!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog is Speaking at Big Data TechCon</title>
      <link>http://localhost:8080/blog/Precog-is-Speaking-at-Big-Data-TechCon/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-is-Speaking-at-Big-Data-TechCon/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img class=&quot;body-image-right&quot; align=&quot;right&quot; alt=&quot;BigDataLogo_medium&quot; src=&quot;/images/BigDataLogo_medium1.jpg&quot; width=&quot;200&quot; height=&quot;77&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;Next week, the Precog team will be traveling to Boston for &lt;a href=&quot;http://www.bigdatatechcon.com/boston2013/&quot;&gt;Big Data TechCon&lt;/a&gt;. Our CEO/Founder &lt;a href=&quot;http://www.bigdatatechcon.com/boston2013/speakers.html&quot;&gt;John De Goes&lt;/a&gt; was asked to speak in &lt;a href=&quot;http://www.bigdatatechcon.com/boston2013/classes.html&quot;&gt;two sessions&lt;/a&gt; on April 9. If you&#8217;re already planning to attend, we hope to see you in these technical sessions. Otherwise, go &lt;a href=&quot;http://www.bigdatatechcon.com/boston2013/conferencepricing.html&quot;&gt;here&lt;/a&gt; to register for a Conference Pass. Follow the conference on Twitter: &lt;a href=&quot;https://twitter.com/search?q=%23BigDataTechCon&amp;src=hash&quot;&gt;#bigdatatechcon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In-Database Predictive Analytics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Predictive analytics have long lived in the domain of statistical tools like R. Increasingly, however, as companies struggle to deal with exploding volumes of data not easily analyzed by small data tools, they are looking at ways of doing predictive analytics directly inside the primary data store. This approach, called in-database predictive analytics, eliminates the need to sample data and perform a separate ETL process into a statistical tool, which can decrease total cost, improve the quality of predictive models, and dramatically shorten development time. In this class, you will learn the pros and cons of doing in-database predictive analytics, highlights of its limitations, and survey the tools and technologies necessary to head down the path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analytics Maturity Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every company is at a different stage in leveraging analytics to improve their operational efficiency and product offerings. In this class, you will learn an eight-stage analytics maturity model that companies can use to determine how far they are from the most analytical companies.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.bigdatatechcon.com/boston2013/&quot;&gt; Big Data TechCon&lt;/a&gt; is the HOW-TO conference for IT professionals working to implement Big Data systems within their companies or for their clients. Attend Big Data TechCon and choose from dozens of technical classes and tutorials and learn from real-world experts. Be inspired by top keynotes, meet with the leading vendors in the Expo Hall, and improve your skills in this fast-growing field. Big Data TechCon is the most important conference you&#8217;ll attend in 2013.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Big Data TechCon&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt; April 8-10, 2013&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog Acquires Typesafe to Dramatically Expand Scala Expertise</title>
      <link>http://localhost:8080/blog/Precog-Acquires-Typesafe-to-Dramatically-Expand-Scala-Expertise/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Acquires-Typesafe-to-Dramatically-Expand-Scala-Expertise/</guid>
      <author></author>
      <description>&lt;h3&gt;&lt;strong&gt;FOR IMMEDIATE RELEASE:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Precog Acquires Typesafe to Dramatically Expand Scala Expertise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boulder, CO &#8211; April 1, 2013 &#8211; In a surprising turn of events that only a true &#8220;precog&#8221; could foresee, &lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt;, a major vendor of advanced analytics technology for multi-structured data, today announced the acquisition of &lt;a href=&quot;http://typesafe.com/&quot;&gt;Typesafe&lt;/a&gt;, the commercial company devoted to support, training, and services for the open source Scala programming language. Terms of the acquisition were not disclosed.&lt;/p&gt;
&lt;p&gt;This acquisition marks a remarkably early exit for the fast-growing company Typesafe, which raised its first round in 2011. Funded by Greylock Partners, Shasta Ventures, and Juniper Networks, Typesafe has raised approximately $17M in the past two years, and employs dozens of individuals, many of whom are well-known and respected in the Scala programming community.&lt;/p&gt;
&lt;p&gt;Precog&#8217;s entire technology stack was developed using the &lt;a href=&quot;http://typesafe.com/technology/scala&quot;&gt;Scala programming language&lt;/a&gt;, and Precog&#8217;s engineering team is well-known in the Scala community. The engineers frequently speak at Scala conferences, such as the recent Northeast Scala Symposium.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&#8220;Typesafe has done a tremendous job of making Scala ready for Enterprise. The language, libraries, community, support, and training now available make Scala the hands-down winner of the JVM language wars,&#8221;&lt;/em&gt; says John A. De Goes, CEO of Precog.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&#8220;This acquisition will allow Precog to continue to grow its team from among the finest the Scala industry has to offer,&#8221;&lt;/em&gt; says Mr. De Goes.&lt;/p&gt;
&lt;p&gt;Members of the Precog engineering team are committed to typelevel.scala, the trio of advanced type-level Scala libraries, including Scalaz, shapeless, and Spire. Precog&#8217;s acquisition of Typesafe raises the possibility that these libraries may be included in a future Scala distribution, a highly controversial possibility that is frequently discussed on Twitter by members of the Scala programming community.&lt;/p&gt;
&lt;p&gt;Contact:&lt;/p&gt;
&lt;p&gt;Tasha Kelly &lt;em&gt;tasha@precog.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1007 Pearl Street #200&lt;/p&gt;
&lt;p&gt;Boulder, CO 80302&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;*Obviously, this is an April Fool&#8217;s joke, and our way of praising all that Typesafe has accomplished in the past two years. Well done, crew, and see you at the next Scala Conference!&lt;/em&gt;&lt;/h3&gt;</description>
    </item>
    <item>
      <title>Community Spotlight- Translating MongoDB Queries into Quirrel</title>
      <link>http://localhost:8080/blog/Community-Spotlight-Translating%20MongoDB-Queries-into-Quirrel/</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Community-Spotlight-Translating%20MongoDB-Queries-into-Quirrel/</guid>
      <author></author>
      <description>&lt;p&gt;We recently came across a blog post from one of our users: &lt;a href=&quot;http://www.bobbriody.com/blog/2013/03/27/example-analytics-with-precog-labcoat-mongodb/&quot;&gt;Example analytics with Precog Labcoat &amp; MongoDB&lt;/a&gt; that provides some examples of how to translate some MongoDB queries into Quirrel using Precog for MongoDB.  MongoDB hosts a version of the &lt;a href=&quot;http://media.mongodb.org/zips.json&quot;&gt;sample data&lt;/a&gt; and here are the MongoDB versions of the queries:  &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/aggregation-examples/#states-with-populations-over-10-million&quot;&gt;states with populations over 10 million&lt;/a&gt; and &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/aggregation-examples/#average-city-population-by-state&quot;&gt;average population by state&lt;/a&gt;. For the details, make sure to check out the &lt;a href=&quot;http://www.bobbriody.com/blog/2013/03/27/example-analytics-with-precog-labcoat-mongodb/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;a href=&quot;http://www.bobbriody.com/blog/2013/03/27/example-analytics-with-precog-labcoat-mongodb/&quot;&gt;&lt;img alt=&quot;Screen Shot 2013-03-28 at 4.14.01 PM&quot; src=&quot;/blog/images/Screen-Shot-2013-03-28-at-4.14.01-PM-285x300.png&quot; width=&quot;285&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;
&lt;p&gt;It&apos;s great to see community members using Precog for MongoDB and sharing their knowledge with the rest of the community.  You can also get started with Precog for MongoDB by getting the &lt;a href=&quot;http://www.precog.com/editions/precog-for-mongodb&quot;&gt;free download&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog-Copointed Insights into Church-Rosser</title>
      <link>http://localhost:8080/blog/Precog-Copointed-Insights-into-Church-Rosser/</link>
      <pubDate>Tue, 26 Mar 2013 18:07:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-Insights-into-Church-Rosser/</guid>
      <author></author>
      <description>&lt;p&gt;Untyped lambda calculus is powerful. In fact, every computable function can be encoded into lambda calculus, and thus so can every bit of Scala code you&#8217;ve ever written. Though, anything more complicated than your basic combinator would be almost indecipherable in its lambda calculus form. As an example, here&#8217;s what the addition combinator for the Church numerals (c&lt;sub&gt;n&lt;/sub&gt; = &#923;fx.f&lt;sup&gt;n&lt;/sup&gt;(x)) looks like in lambda calculus:&lt;/p&gt;
&lt;pre&gt;A+ = &#923;xypq.xp(ypq)&lt;/pre&gt;
&lt;p&gt;At first glance it&#8217;s by no means obvious that you&#8217;re looking at a way to add natural numbers.&lt;/p&gt;
&lt;h2&gt;Introductory Definitions&lt;h2&gt;
&lt;p&gt;Before we jump into some more examples, let&#8217;s step back a minute so I can provide a quick and basic introduction to untyped lambda calculus. The rules are easily accessible, and given that lambda calculus is Turing complete, their simplicity astounds me. (As a side note, because cellular automata are really cool, Conway&#8217;s Game of Life is another easily definable Turing complete system.)&lt;/p&gt;
&lt;p&gt;Now, as promised, the introduction: We define the set &#923; inductively as follows. Let V be a set of variables v&#8217;, v&#8221;, etc.&lt;/p&gt;
&lt;pre&gt;(i) If x &#8712; V, then x &#8712; &#923;.
(ii) If M,N &#8712; &#923;, then MN &#8712; &#923;.
(iii) If x &#8712; V and M &#8712; &#923;, then &#923;x.M &#8712; &#923;.&lt;/pre&gt;
&lt;p&gt;In (ii), MN denotes application, and you should think of M as a method applied to N. In (iii), the syntax &#923;x.M denotes an abstraction, i.e. a function x -&gt; M, where M is not required to depend on x. The most interesting terms in lambda calculus will include an abstraction followed by an application, like so: &lt;/p&gt;
&lt;pre&gt;(&#923;x.M)N = M[x := N]&lt;/pre&gt;
&lt;p&gt;where N is substituted for every free instance of x in M. This is known formally as &#946;-reduction. In psuedo lambda calculus, (psuedo because integers are not terms in V), we can consider the example&lt;/p&gt;
&lt;pre&gt;(&#923;x.(2&lt;em&gt;x + 3))4 = 2&lt;/em&gt;4 + 3 = 11&lt;/pre&gt;
&lt;h2&gt;Some Intuitions&lt;/h2&gt;
&lt;p&gt;So what&#8217;s the benefit of thinking about lambda calculus? For me, lambda calculus provides the structure to represent the core of what a function really is: a rule that gets us from one bit of knowledge to another. And if we want to prove something about functions (functions in a generic sense), lambda calculus is the perfect place to come. So what should we prove? Well, intuitively we&#8217;d hope that, no matter the strategy (e.g. call by name, call by value, etc.) we use to evaluate our function, we obtain the same result. But wait! Can this always be true? What if our function is an ill-thought-out recursion that loops until we overflow the stack? Can we really guarantee that every call to a function will return a unique result, no matter what strategy we use to evaluate it? The answer is yes, with an added assumption.&lt;/p&gt;
&lt;p&gt;To understand what this assumption should be, consider the famous &#937;-combinator:&lt;/p&gt;
&lt;pre&gt;&#937; = (&#923;x.xx)(&#923;x.xx)&lt;/pre&gt;
&lt;p&gt;Furthermore consider the lambda term (&#923;x.z)&#937;. If we evaluate this term using a call-by-name strategy, then it&#8217;s simply equal to the constant z, since &#923;x.z is a constant function. But if we use a call-by-value strategy, then we&#8217;ll never be able to further reduce it, since when we apply &#923;x.xx to itself we again obtain &#937;. So what we really want to prove is this: If we &#946;-reduce a lambda term until we cannot reduce it any further, then that final reduced term is unique. Said more formally: If a lambda term has a normal form, then that normal form is unique.&lt;/p&gt;
&lt;h2&gt;Introduction to Church-Rosser&lt;/h2&gt;
&lt;p&gt;In summary, we cannot just pick an evaluation strategy and expect to it to yield the same results as all other evaluation strategies, because, as the &#937;-combinator example showed us, a given evaluation strategy may never terminate. But, there is something we can prove for certain: a lambda term has at most one normal form. In order to prove this, we&#8217;ll outline the proof of a more general theorem, known as the Church-Rosser Theorem. In picture form, it looks like this, where solid arrows are assumptions and dotted arrows are to be proven.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Diagram1&quot; src=&quot;/blog/images/Diagram1-261x300.jpg&quot; width=&quot;261&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In word form it states: If a term M &#946;-reduces to two terms N&lt;sub&gt;1&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt;, then there exists some N&lt;sub&gt;3&lt;/sub&gt;  such that N&lt;sub&gt;1&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt; each &#946;-reduce to it.&lt;/p&gt;
&lt;p&gt;Given Church-Rosser, our desired statement follows directly. If we let N&lt;sub&gt;1&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt; in the diagram above be distinct normal forms of M, then by Church-Rosser there exists some N&lt;sub&gt;3&lt;/sub&gt; such that N&lt;sub&gt;1&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt; each &#946;-reduce to it. But a normal form term can only &#946;-reduce to itself, and thus N&lt;sub&gt;1&lt;/sub&gt;=N&lt;sub&gt;3&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt;=N&lt;sub&gt;3&lt;/sub&gt;. Thus M has at most one normal form, since N&lt;sub&gt;1&lt;/sub&gt; = N&lt;sub&gt;2&lt;/sub&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly, we can also use Church-Rosser to prove the consistency of lambda calculus, that is, that true does not equal false. We define:&lt;/p&gt;
&lt;pre&gt;T = &#923;xy.x
F = &#923;xy.y&lt;/pre&gt;
&lt;p&gt;Note that T and F are written as an iterated abstraction, meaning that the abstraction is one of multiple variables (in this case x and y). Iterated abstraction is right associative; for example &#923;xyz.xyz is shorthand for &#923;x.(&#923;y.(&#923;z.xyz)). Now to understand these definitions, if K is a lambda term that equals either T or F, the lambda term KPQ is a way to represent �if K then P else Q�. If T = F, then we�d be able to perform a series of reductions connecting T and F. But since T and F are both normal forms, we cannot perform such reductions. Thus T does not equal F.&lt;/p&gt;
&lt;h2&gt;Strip Lemma Basics&lt;/h2&gt;
&lt;p&gt;Now in order to prove Church-Rosser, we&#8217;ll prove a lemma first, namely the Strip Lemma. This lemma states that, if M &#946;-reduces to N&lt;sub&gt;1&lt;/sub&gt; in a single step, and M &#946;-reduces to N&lt;sub&gt;2&lt;/sub&gt; in any finite number of steps, there exists an N&lt;sub&gt;3&lt;/sub&gt; such that N&lt;sub&gt;1&lt;/sub&gt; and N&lt;sub&gt;2&lt;/sub&gt; each &#946;-reduce to it. In diagram form, we have the following, where a single arrow represents a single &#946;-reduction, and a double arrow represent any finite number of &#946;-reductions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Diagram2&quot; src=&quot;/blog/images/Diagram2-300x253.jpg&quot; width=&quot;300&quot; height=&quot;253&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that once we&#8217;ve proven the Strip Lemma, Church-Rosser follows immediately by induction on the natural numbers (First prove the statement for n=1. Then prove that if the statement holds for an arbitrary n, it holds for n+1.) To see this visually, imagine filling in the Church-Rosser diagram with these strips.&lt;/p&gt;
&lt;p&gt;Proceeding with the proof of the Strip Lemma, the correct question to ask is, how do we obtain a candidate N&lt;sub&gt;3&lt;/sub&gt;? Well, we know that M &#946;-reduces to N&lt;sub&gt;1&lt;/sub&gt; in a single step, so we&#8217;ll consider this redex and mark it in M. Now as we perform the multiple reductions on M that ultimately reduce to N&lt;sub&gt;2&lt;/sub&gt;, we track this marked lambda term until we reach N&lt;sub&gt;2&lt;/sub&gt;. We now perform the &#946;-reduction on this marked term in N&lt;sub&gt;2&lt;/sub&gt;, and that produces our candidate N&lt;sub&gt;3&lt;/sub&gt;.&lt;/p&gt;
&lt;p&gt;Let&#8217;s make this idea of marking more formal with some notation. Specifically, to keep track of a certain redex, we&#8217;ll underline it like this: (&#923;x.M)N, and we&#8217;ll keep that lambda underlined until we &#946;-reduce it. With this new notation, here�s an example of the Strip Lemma with actual lambda terms. (We�ll introduce &#934; in a couple paragraphs; for now just think of it as a &#946;-reduction.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/blog/images/Diagram31.jpg&quot;&gt;&lt;img alt=&quot;Diagram3&quot; src=&quot;/blog/images/Diagram31-1024x730.jpg&quot; width=&quot;563&quot; height=&quot;401&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Details of the Proof&lt;/h2&gt;
&lt;p&gt;Given that we now allow underlined lambdas in our set of allowed terms, what does this new set look like formally? Let&#8217;s call it &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;. We&#8217;ll define it inductively, as we defined &#923; earlier. The first three parts of the definition will be analogous to before, defining variables, application, and abstraction. In the fourth part we will include underlined lambdas only in the case when we have an abstraction followed by an application. This is because the only lambda-terms we need to trace are ones we know will be &#946;-reduced.&lt;/p&gt;
&lt;pre&gt;(i) If x &#8712; V, then x &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;.
(ii) If M,N &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;, then MN &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;.
(iii) If x &#8712; V and M &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;, then &#923;x.M &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;.
(iv) If x &#8712; V and M, N &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;, then (&lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;x.M)N &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;.&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;&lt;b&gt; &lt;/b&gt;&lt;/b&gt;Consider the following diagram. Note that the front rectangle is the same as the diagram in the statement of the Strip Lemma. The other terms, namely M&#8217; and N&lt;sub&gt;2&lt;/sub&gt;&#8216;, we construct for purposes of the proof.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;b&gt;&lt;img class=&quot;alignnone size-medium wp-image-494&quot; alt=&quot;Diagram4&quot; src=&quot;/blog/images/Diagram4-300x241.jpg&quot; width=&quot;300&quot; height=&quot;241&quot; /&gt; &lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;We construct M&#8217; to be equivalent to M, except that in it we underlined the &#923; that was reduced to obtain N&lt;sub&gt;1&lt;/sub&gt;. The function &#968;: &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt; -&gt; &#923; simply erases all underlines, so that&lt;/p&gt;
&lt;pre&gt;&#968;((&#923;x.M)N) = (&#923;x.&#968;(M))&#968;(N)&lt;/pre&gt;
&lt;p&gt;We can now apply beta-reductions to M&#8217;, analogous to those applied to M, in order to obtain N&lt;sub&gt;2&lt;/sub&gt;&#8216;. And now to formally obtain N&lt;sub&gt;3&lt;/sub&gt;, we apply the function &#934;: &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt; -&gt; &#923; to N&lt;sub&gt;2&lt;/sub&gt;&#8216;. And what is &#934;? &#934; is exactly what you&#8217;d expect: a function that &#946;-reduces all underlined terms and keeps all others the same, meaning that&lt;/p&gt;
&lt;pre&gt;&#934;((&#923;x.M)N) = &#934;(M)[x := &#934;(N)]&lt;/pre&gt;
&lt;p&gt;Now that we have our candidate N&lt;sub&gt;3&lt;/sub&gt;, we only need to prove that we can draw solid lines in place of the dotted ones. I will outline a proof showing that N&lt;sub&gt;2&lt;/sub&gt; &#946;-reduces to N&lt;sub&gt;3&lt;/sub&gt; and will leave the other part of the proof as an exercise for the reader. In diagram form, we will outline a proof of the following (the front triangle in the above diagram):&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;b&gt; &lt;img class=&quot;alignnone size-medium wp-image-495&quot; alt=&quot;Diagram5&quot; src=&quot;/blog/images/Diagram5-296x300.jpg&quot; width=&quot;296&quot; height=&quot;300&quot; /&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In order to prove this, we will use the method of structural induction. Recall that initially we constructed &#923; inductively. Thus in order to prove something general about all elements of &#923;, we can use an induction technique that mimics the way in which we define &#923;. This is called induction on the structure of &#923;. Though note that in our case, A &#8712; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;, so we&#8217;ll use induction on the structure of &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;First, the base case:&lt;br /&gt;
(i) Let A = x for some x &#8712; V. Then &#968;(x) = x and &#934;(x) = x. And thus since x &#946;-reduces to x, we&#8217;re done.&lt;/p&gt;
&lt;p&gt;For the next three case, we assume the statement holds for the individual terms in &lt;span style=&quot;text-decoration: underline;&quot;&gt;&#923;&lt;/span&gt;, and prove that it holds for their application (or abstraction).&lt;/p&gt;
&lt;p&gt;(ii) Let A = PQ for P, Q &#8712; V. Assume that &#968;(P) &#946;-reduces to &#934;(P) and that &#968;(Q) &#946;-reduces to &#934;(Q). By the definitions of &#968; and &#934;, show that &#968;(PQ) &#946;-reduces to &#934;(PQ).&lt;/p&gt;
&lt;p&gt;(iii) Let A = &#923;x.P for P &#8712; V. Assume that &#968;(P) &#946;-reduces to &#934;(P). Using the definitions, show that &#968;(&#923;x.P) &#946;-reduces to &#934;(&#923;x.P)&lt;/p&gt;
&lt;p&gt;(iv) Let A = (&#923;x.P)Q for P, Q &#8712; V. Assume the statement holds for P and Q. Show that &#968;(A) &#946;-reduces to &#934;(A).&lt;/p&gt;
&lt;p&gt;And that&#8217;s the outline of the proof of the Strip Lemma!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br /&gt;
In summary, we gave the definition for a lambda-term, considered the &#937;-combinator as an example of a lambda-term without a normal form, and outlined a proof of the Church-Rosser Theorem. So what does Church-Rosser tell us? If a term has a normal form, then that normal form is unique. This means that if we evaluate a function using two different strategies, the results will be equal. Of course, this doesn&#8217;t guarantee that every evaluation strategy will terminate. But one thing we know for certain: if we do obtain a result, then that result is unique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Webinar Series by Precog's Developer Evangelist</title>
      <link>http://localhost:8080/blog/New-Webinar-Series-by-Precogs-Developer-Evangelist%20copy/</link>
      <pubDate>Tue, 19 Mar 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/New-Webinar-Series-by-Precogs-Developer-Evangelist%20copy/</guid>
      <author></author>
      <description>&lt;p dir=&quot;ltr&quot;&gt;In the past, we&apos;ve hosted webinars on the Precog platform but it&apos;s always been a challenge to find enough time to present our deck, demo our tools &amp; answer questions. This month, I&apos;m hosting a &lt;a href=&quot;http://precog.com/webinars/march&quot;&gt;series of webinars&lt;/a&gt; focused on a variety of topics so we can go into more detail and focus on a particular area of the platform.&lt;/p&gt;
&lt;p&gt;Take your pick of the series or attend all three! You can learn how to perform analytics in our data science application, create interactive charts, and embed a reporting dashboard in your application!&lt;/p&gt;
&lt;p&gt;&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://precog.com/webinars/march&quot;&gt;Sign up&lt;/a&gt; today to save your spot &#8211; the first one is this Friday!&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Friday, March 22 &#8211; 12pm MST&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://precog.com/webinars/march/&quot;&gt;How to Clean Up and Analyze Clickstream Data with Labcoat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Tuesday, March 26 &#8211; 11am MST&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://precog.com/webinars/march/&quot;&gt;How to Build Interactive Data Visualizations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Thursday, March 28 &#8211; 2pm MST&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://precog.com/webinars/march/&quot;&gt;How to Embed a Reporting Dashboard in your Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&apos;re looking to learn about something that is not included above, we&apos;re still happy to give you a custom demo. Request one &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.precog.com/products/precog&quot;&gt;here&lt;/a&gt;. I hope to see you at one of our &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://precog.com/webinars/march/&quot;&gt;webinars&lt;/a&gt; this month!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog heads to PAW</title>
      <link>http://localhost:8080/blog/Precog-heads-to-PAW!/</link>
      <pubDate>Mon, 18 Mar 2013 18:07:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-heads-to-PAW!/</guid>
      <author></author>
      <description>&lt;p&gt;Our Developer Evan&lt;p&gt;&lt;a href=&quot;http://www.predictiveanalyticsworld.com/toronto/2013/?utm_medium=referral&amp;utm_campaign=TOR2013&amp;utm_source=comarketing&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://www.predictiveanalyticsworld.com/toronto/2013/images/pawtor13_200x200.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today kicks off &lt;a href=&quot;http://www.predictiveanalyticsworld.com/toronto/2013/&quot;&gt;Predictive Analytics World&lt;/a&gt; in Toronto, Canada. Our CEO/Founder, &lt;a href=&quot;http://www.predictiveanalyticsworld.com/toronto/2013/speakers.php#1462&quot;&gt;John De Goes&lt;/a&gt;, was asked to speak in the Big Data Analytics Track and his session, &#8220;&lt;a href=&quot;http://www.predictiveanalyticsworld.com/toronto/2013/agenda.php#day2-1140a&quot;&gt;The Productization of Predictive Analytics&lt;/a&gt;&#8221; will be on Thursday March 21st at 11:40am EST. If you&#8217;re not going to be at the conference, then you can follow the news on Twitter with &lt;a href=&quot;https://twitter.com/search?q=%23pawcon&amp;src=typd&quot;&gt;#pawcon&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data Science on your Desktop</title>
      <link>http://localhost:8080/blog/Data-Science-on-your-Desktop/</link>
      <pubDate>Tue, 12 Mar 2013 18:07:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Data-Science-on-your-Desktop/</guid>
      <author></author>
      <description>&lt;p&gt;Now you can access &lt;a href=&quot;http://www.precog.com/products/labcoat&quot;&gt;Labcoat&lt;/a&gt;, Precog&apos;s data science application, from anywhere! We just unveiled a &lt;strong&gt;desktop edition&lt;/strong&gt; of Labcoat so anyone who works offline or works with local data sets, can quickly and easily perform statistical analysis from their computer. It&apos;s simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li dir=&quot;ltr&quot;&gt;Drag and drop your data into Labcoat,&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Analyze your data immediately, then&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Deploy analytics as code with a click of a button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.precog.com/editions/labcoat-desktop&quot;&gt;Labcoat Desktop&lt;/a&gt; delivers all the power of Labcoat in a package you can download, install, and run on your own computer. And, don&apos;t worry we&apos;ve got all of the operating systems covered (Windows, Mac, Linux). &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.precog.com/editions/labcoat-desktop#pricing&quot;&gt;Buy a license&lt;/a&gt; today for &lt;strong&gt;$99&lt;/strong&gt; (special price), and discover just how easy it is to fall in love with data science!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/products/labcoat&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-451&quot; alt=&quot;Screen Shot 2013-03-12 at 12.22.43 PM&quot; src=&quot;/blog/images/Screen-Shot-2013-03-12-at-12.22.43-PM-300x173.png&quot; width=&quot;300&quot; height=&quot;173&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you frequently work on a plane without Internet? Do you work with local data? Then, Labcoat Desktop is for you. If you tend to analyze large, remote data sets, and usually have Internet access, then Labcoat Cloud may be a better fit. &lt;a href=&quot;http://www.precog.com/editions/labcoat-cloud&quot;&gt;Labcoat Cloud&lt;/a&gt; is powered by &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog Cloud&lt;/a&gt;, and runs directly from your browser. Learn about both of our Labcoat editions &lt;a href=&quot;http://www.precog.com/products/labcoat&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NoSQL Technology &amp; Analytics- Big Data Meetup</title>
      <link>http://localhost:8080/blog/NoSQL-Technology-&amp;-Analytics-Big-Data-Meetup/</link>
      <pubDate>Mon, 04 Mar 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/NoSQL-Technology-&amp;-Analytics-Big-Data-Meetup/</guid>
      <author></author>
      <description>&lt;p&gt;We&#8217;ve noticed that NoSQL has been a popular topic for discussion lately and creating a buzz in the big data space. That&#8217;s why we&#8217;re excited about presenting at the &lt;a href=&quot;http://www.meetup.com/Boulder-Denver-Big-Data/events/105180822/&quot;&gt;March Big Data Meetup&lt;/a&gt; next &lt;strong&gt;Wednesday, March 13th&lt;/strong&gt;. You&#8217;re We teamed up with the 10gen/MongoDB folks to speak about &lt;strong&gt;NoSQL Technology &amp; Analytics&lt;/strong&gt;. Learn about NoSQL databases and how to perform &lt;a href=&quot;http://www.precog.com/solutions/nosql-analytics&quot;&gt;analytics on your NoSQL data&lt;/a&gt;. Join us for a fun evening of engaging presentations, beer, pizza and prizes!&lt;/p&gt;
&lt;p&gt;The Google Boulder Office has kindly offered to host our meetup and it will be from 6-9pm. Please &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.meetup.com/Boulder-Denver-Big-Data/events/105180822/&quot;&gt;RSVP&lt;/a&gt; by March 12 to save your spot! Here&#8217;s the agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6:00 &#8211; 6:30 &#8211; Socialize over food and drink&lt;/li&gt;
&lt;li&gt;6:30 &#8211; 6:45 &#8211; Announcements, Upcoming Events&lt;/li&gt;
&lt;li&gt;6:45 &#8211; 7:30 -
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Overview of 10gen&lt;/strong&gt; - Mike Hayes, Sr. Account Executive, 10gen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overview of NoSQL Technology and MongoDB&lt;/strong&gt; - Antoine Girbal, Principal Engineer, 10gen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7:30 &#8211; 8:30
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Analytics on your NoSQL Data&lt;/strong&gt; - John A. De Goes, CEO/Found, Precog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overview of Precog for MongoDB&lt;/strong&gt; - Derek Chek-Becker, Lead Infrastructure Engineer, Precog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;8:30 &#8211; 9:00 &#8211; Door Prizes, Q&amp;A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to see you next week!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog-Copointed Where TDD Fails</title>
      <link>http://localhost:8080/blog/Precog-Copointed-Where-TDD-Fails/</link>
      <pubDate>Fri, 01 Mar 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-Where-TDD-Fails/</guid>
      <author></author>
      <description>&lt;p&gt;I&#8217;ve just gotten back from the awesome &lt;a href=&quot;http://mloc-js.com/&quot;&gt;mloc.js&lt;/a&gt; conference. There was a talk about compiling C# to JavaScript and one of the benefits explained was static types. Someone from the audience asked, &lt;strong&gt;who needs types when you do Test Driven Development?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I tried to address the question in &lt;a href=&quot;http://brianmckenna.org/files/presentations/mloc-roy/&quot;&gt;my talk on Roy&lt;/a&gt; but I talked to some developers afterwards and they thought that TDD is the only tool necessary for writing code that satisfied their specifications!&lt;/p&gt;
&lt;p&gt;So here&#8217;s a blog post where I&#8217;ll try to show two cases where TDD doesn&#8217;t solve my specifications. In the first case, we get a free proof (i.e. TDD is unnecessary). In the second case, we aren�t able to encode some of our constraints in tests or types, so we need to use mathematical reasoning to derive a satisfactory implementation (i.e. TDD isn&#8217;t enough).&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Free Proofs&lt;/h2&gt;
&lt;p&gt;Imagine that we know that we need a function that returns its argument. The input is polymorphic &#8211; it can be any value. In a typed language the function would look like:&lt;/p&gt;
&lt;pre&gt;&#945; &#8594; &#945;&lt;/pre&gt;
&lt;p&gt;This means, for any value input, the output value must have the same type. For example. if we supplied the empty string, &#945; would be instantiated as the String type and the function would become:&lt;/p&gt;
&lt;pre&gt;String &#8594; String&lt;/pre&gt;
&lt;p&gt;Easy. Now let&#8217;s try to implement this function:&lt;/p&gt;
&lt;pre&gt;id :: &#945; &#8594; &#945;
id a = ???&lt;/pre&gt;
&lt;p&gt;So the problem is that we don&#8217;t know what the input type is inside the function. All we know is that it&#8217;s the polymorphic type &#945; &#8211; the same type as the value we have to return.&lt;/p&gt;
&lt;p&gt;In a total language, the only possible &#945; we can return is the input. In a partial language, there are some ways to lie to the type-system and say we have an &#945;; we rely on programmers to not do that (just like we rely on programmers to write working tests).&lt;/p&gt;
&lt;p&gt;This means there is only a &lt;em&gt;single possible implementation&lt;/em&gt; for this function:&lt;/p&gt;
&lt;pre&gt;id :: &#945; &#8594; &#945;
id a = a&lt;/pre&gt;
&lt;p&gt;If this satisfies a type-checker, we&#8217;re done. No need to write a test &#8211; the compiler proved it correct! This is a concept called &lt;a href=&quot;http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf&quot;&gt;parametricity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Types can give you assurance that your code is correct. Tests only give you confidence that your code is correct. But the identity function is the most trivial of all functions, you could definitely TDD that in a few minutes and have high confidence of correctness.&lt;/p&gt;
&lt;p&gt;Let&#8217;s do something more complicated but also something used everyday in functional programming: the map function.&lt;/p&gt;
&lt;p&gt;The map function works for anything that is a Functor. Lists and arrays are immediate examples. The interesting thing is that for any Functor, there&#8217;s only a single possible implementation of map. In fact, Haskell can automatically write a proven implementation with the -XDeriveFunctor flag:&lt;/p&gt;
&lt;pre&gt;{-# LANGUAGE DeriveFunctor #-}
data TestResult a = Success a | Failure String | Skipped deriving Functor&lt;/pre&gt;
&lt;p&gt;The above defines a type called TestResult which has three separate states. The Success state has a polymorphic value which can be mapped over. Haskell finds the polymorphic value and writes the map function for us!&lt;/p&gt;
&lt;p&gt;Getting the compiler to automatically derive a proven implementation: better than TDD.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Non-testable Constraints&lt;/h2&gt;
&lt;p&gt;You can&#8217;t encode runtime guarantees as tests. Daniel Spiewak gave me an awesome example: asymptotic complexity.&lt;/p&gt;
&lt;p&gt;We need a sort function. Given a list/array of integers, we want to get a sorted list back. Here&#8217;s some test-driven tests for the function:&lt;/p&gt;
&lt;pre&gt;prop_head_is_minimum xs = not (null xs) ==&gt; head (sort xs) == minimum xs

prop_last_is_maximum xs = not (null xs) ==&gt; last (sort xs) == maxmimum xs

prop_is_sorted xs = isSorted $ sort xs
    where isSorted []  = True
          isSorted [x] = True
          isSorted (x:y:xs) = x &lt; y &amp;&amp; isSorted (y:xs)&lt;/pre&gt;
&lt;p&gt;The above uses property-based testing (via &lt;a href=&quot;http://en.wikipedia.org/wiki/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt;). The xs is a value that is automatically generated by the test framework by looking at the type signature &#8211; we don&#8217;t have to worry about boundary conditions or interesting cases; they will be generated. &lt;a href=&quot;http://book.realworldhaskell.org/&quot;&gt;Real World Haskell&lt;/a&gt; has a &lt;a href=&quot;http://book.realworldhaskell.org/read/testing-and-quality-assurance.html&quot;&gt;great Chapter about property-based testing&lt;/a&gt; for anyone new to the concept.&lt;/p&gt;
&lt;p&gt;Anyway, let&#8217;s use the tests to write an implementation for sort:&lt;/p&gt;
&lt;pre&gt;sort :: [Int] -&gt; [Int]
sort [] = []
sort xs = select xs []
    where select []  ys  = ys
          select xs&apos; ys  = select (delete (maximum xs&apos;) xs&apos;) $ maximum xs&apos;:ys&lt;/pre&gt;
&lt;p&gt;Awesome! TDD gave us code that works. We&#8217;re done, right?&lt;/p&gt;
&lt;p&gt;Well, hopefully we almost always want the asymptotically optimal algorithm to solve our problem. You might have noticed that the above code is selection sort &#8211; an algorithm with best/worst/average time complexity of O(n^2).&lt;/p&gt;
&lt;p&gt;Sadly, we can&#8217;t write a test or a type to satisfy our specification. We need to actually perform some (asymptotic) analysis to derive our code, instead of relying on test-driving an implementation!&lt;/p&gt;
&lt;p&gt;TDD isn&#8217;t enough. We still need analysis.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post isn&#8217;t saying that TDD shouldn&#8217;t be used &#8211; it&#8217;s absolutely fine to do TDD. This post is just to point out that TDD doesn&#8217;t completely replace types nor analysis of code.&lt;/p&gt;
&lt;p&gt;When you work in a typed language, you don&#8217;t have to write tests for some functions. They&#8217;re proven to be correct by the type checker. But you can&#8217;t rely exclusively on types or tests. You have to use analysis to ensure runtime guarantees are satisfied.&lt;/p&gt;
&lt;p&gt;Analysis is &lt;em&gt;the&lt;/em&gt; method for writing code that satisfies our constraints. Neither TDD nor types are the single answer.&lt;/p&gt;
&lt;p&gt;TDD can be useful. Types can be useful. Analysis is necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog at O'Reilly Strata Conference</title>
      <link>http://localhost:8080/blog/Precog-at-O-Reilly-Strata-Conference/</link>
      <pubDate>Mon, 25 Feb 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-at-O-Reilly-Strata-Conference/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://strataconf.com/strata2013/?cmp=ba-strata-stsc13-exhibitor-banner-728-90&quot;&gt;&lt;br /&gt;
&lt;img alt=&quot;Strata Conference 2013&quot; src=&quot;http://cdn.oreillystatic.com/conferences/strata/2013/exhibiting/728x90.gif&quot; width=&quot;728&quot; height=&quot;90&quot; border=&quot;0&quot; /&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you hadn&#8217;t heard, this week is Strata in Santa Clara! The Precog team will be out there participating in a number of different events and we&#8217;re excited to be a part of this conference. If you&#8217;re attending the &lt;a href=&quot;http://strataconf.com/strata2013/&quot;&gt;Strata Conference&lt;/a&gt; Feb 26-28 in Santa Clara CA, be sure to visit &lt;strong&gt;our booth P1 in the Innovator&#8217;s Pavilion&lt;/strong&gt; to see how Precog is the Leading Data Science Platform for Developers, and enter to &lt;strong&gt;WIN an iPad Mini&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;We&#8217;re not kidding. We&#8217;re seriously giving away an iPad Mini (worth $329) to one winner (randomly chosen) who creates a &lt;a href=&quot;http://www.precog.com/registration&quot;&gt;FREE account&lt;/a&gt; with Precog! All entries must be made at Strata and if you&#8217;re not able to attend, please tell your friends and colleagues to stop by our booth. Everyone who stops by can pick up a free shirt and if they enter the contest, they&#8217;ll receive a Werewolf Game.&lt;/p&gt;
&lt;p&gt;Our Founder/CEO, &lt;a href=&quot;http://strataconf.com/strata2013/public/schedule/speaker/147577&quot;&gt;John De Goes&lt;/a&gt;, will also be speaking on Thursday. Catch him in these sessions:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://strataconf.com/strata2013/public/schedule/detail/27341&quot;&gt;The Rise of the Scientific Databases&lt;/a&gt;&lt;br /&gt;
Thursday  1:30pm &#8211;  2:10pm PST&lt;br /&gt;
Room: Great America Ballroom J&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://strataconf.com/strata2013/public/schedule/detail/28769&quot;&gt;Office Hour with John De Goes&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/a&gt;Thursday  2:20pm &#8211;  3:00pm PST&lt;br /&gt;
Room: Expo Hall (Table C)&lt;/p&gt;
&lt;p&gt;Hope to see you in Santa Clara!&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeveloperWeek Scholarship Winner- Food Finding with Precog</title>
      <link>http://localhost:8080/blog/DeveloperWeek-Scholarship-Winner-Food-Finding-with-Precog/</link>
      <pubDate>Thu, 21 Feb 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/DeveloperWeek-Scholarship-Winner-Food-Finding-with-Precog/</guid>
      <author></author>
      <description>&lt;p&gt;Precog recently sponsored a &lt;a href=&quot;http://www.developerweek.com/index/scholarships&quot;&gt;DeveloperWeek Scholarship&lt;/a&gt; to give an opportunity to a developer to work on an app during the week and present at the conference. After reviewing the applications we chose &lt;strong&gt;Henry Canivel&lt;/strong&gt;, an eager-to-learn and friendly developer from the Bay Area. His winning app is called �Foodvent� and please continue reading to learn how he built the webapp with our technology. Congratulations to Henry for winning the scholarship!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foodvent.herokuapp.com/&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-416&quot; alt=&quot;Screen Shot 2013-02-21 at 2.52.05 PM&quot; src=&quot;/blog/images/Screen-Shot-2013-02-21-at-2.52.05-PM-1024x719.png&quot; width=&quot;625&quot; height=&quot;438&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Hi! My name is Henry Canivel. I build this webapp, Foodvent, targeting event organizers to help plan their events by creating a dynamic dashboard to find the best restaurants in the area to cater to their event. As the Precog scholarship winner for the inaugural Developer Week, organized by Data 2.0, I recognized the opportunity to use &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog&#8217;s pretty awesome analytics platform&lt;/a&gt;! How cool would it be to use their analytics to help fuel a recommendation engine!?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This was my first real JS project utilizing public APIs; the last thing I really want to do is figure out my own analytics engine to do some pretty heavy but potent data crunching. Using Precog&#8217;s &lt;a href=&quot;http://www.precog.com/products/labcoat&quot;&gt;Labcoat&lt;/a&gt;, I was able to upload some open source database of basic info of restaurants around San Francisco including name, address, geographic coordinates and a few other basic fields. Precog&#8217;s Labcoat service is pretty clean and simple to use as there&#8217;s multiple useful interfaces within the dashboard, including the &lt;a href=&quot;http://quirrel-lang.org/reference.html&quot;&gt;Quirrel reference guide&lt;/a&gt;, an IRC port window, and ridiculously useful features to download your queries in various languages like python, javascript, and even Java! No need to install any client side libraries, just import their standard public JS with your credentials, and BOOM! make Precog API calls instantly!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The focus of my app is to dynamically browse for events and restaurants based on a movable marker on a map. Where Precog&#8217;s analytical services particularly kick ass is where I can just feed it new coordinates and voila! Fresh and new query results based on my dynamic input!! &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You should check it out over here: &lt;a href=&quot;http://foodvent.herokuapp.com/&quot;&gt;Foodvent&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Move the map marker or circle radius to kick off my call to Precog&#8217;s analytics service to tell you how many restaurants are within radius! Even coding this, I think it&#8217;s pretty addictive playing with the map and seeing what Precog will find. Don&#8217;t you think?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like Henry mentions above, he used the &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog Analytics Platform&lt;/a&gt; to determine the number of restaurants in a dynamically resizable radius. Below is an example query developed in Precog�s &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;https://labcoat.precog.com/&quot;&gt;Labcoat&lt;/a&gt; that makes use of some Quirrel standard math library functions:&lt;/p&gt;
&lt;pre&gt;import std::math::&lt;em&gt;

all := //first_upload/foodvent
radius := 1110.9770658801172
R := 6371000

lat_me := 37.787123
lon_me := neg 122.40113100000002

dlat := toRadians(all.latitude) - toRadians(lat_me)
dlon := toRadians(all.longitude) - toRadians(lon_me)
lat1 := toRadians(all.latitude)
lat2 := toRadians(all.longitude)

a :=     sin(dlat/2) &lt;/em&gt; sin(dlat/2) + 
sin(dlon/2) &lt;em&gt; sin(dlon/2) &lt;/em&gt;
cos(lat1) &lt;em&gt; cos(lat2)
c := 2 &lt;/em&gt; atan2(sqrt(a), sqrt(1-a))

d := (R * c)
d&apos; := d where d &lt;= radius

count(d&apos;)&lt;/pre&gt;
&lt;p&gt;Congratulations to Henry for winning the DeveloperWeek scholarship and thank you for building &lt;a href=&quot;http://foodvent.herokuapp.com/&quot;&gt;a web app&lt;/a&gt; on Precog technology!&lt;/p&gt;</description>
    </item>
    <item>
      <title>And the award for Best Oscar Predictions goes to...</title>
      <link>http://localhost:8080/blog/And-the-award-for-Best-Oscar-Predictions-goes-to/</link>
      <pubDate>Wed, 20 Feb 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/And-the-award-for-Best-Oscar-Predictions-goes-to/</guid>
      <author></author>
      <description>&lt;p&gt;The red carpet is rolling out this Sunday night at the &lt;a href=&quot;http://oscar.go.com/&quot;&gt;85th Academy Awards&lt;/a&gt;. If you&apos;re like me, you&apos;ve been watching the &lt;a href=&quot;http://oscar.go.com/nominees&quot;&gt;nominated movies&lt;/a&gt; to make predictions on who will win.  Well, just sit back and enjoy the films and let us do the heavy work on analyzing the data to predict who will be going home with awards!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;&lt;img class=&quot;alignnone  wp-image-404&quot; alt=&quot;oscar_banner&quot; src=&quot;/blog/images/oscar_banner-1024x196.png&quot; width=&quot;625&quot; height=&quot;119&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&apos;ve put together &lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;Oscars Predictions&lt;/a&gt; using our &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog technology&lt;/a&gt; to run the analysis and create interactive graphs and charts. In these predictions we&apos;re analyzing thousands of Twitter mentions with &lt;a href=&quot;https://twitter.com/search?q=%23oscars&quot;&gt;#Oscars&lt;/a&gt; (the official hashtag). &lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;Visit our page&lt;/a&gt; to see the dynamic charts! Here are the predictions we&apos;re making:&lt;b&gt;&lt;b&gt;&lt;br /&gt;
&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Best Picture:&lt;/strong&gt; Using the &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid Bar Graph&lt;/a&gt; you&apos;ll see which films we predict will win based on positive mentions and reviews. &lt;em&gt;Argo&lt;/em&gt; is in the lead right now with &lt;em&gt;Lincoln&lt;/em&gt; in a close second!&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Most Popular Actors/Actresses:&lt;/strong&gt; This chart shows who is most popular and talked about on Twitter, using our &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid Leaderboard&lt;/a&gt;. Jennifer Lawrence from &lt;em&gt;Silver Linings Playbook&lt;/em&gt; seems to be the most popular at the moment.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Most Social State:&lt;/strong&gt; Which US state is tweeting about the Oscars? Find out in the &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid Geo Chart.&lt;/a&gt; We&apos;re not surprised that California has the most buzz!&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Most Positive Time to Tweet:&lt;/strong&gt; This &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid Line Graph&lt;/a&gt; shows the average sentiment score (using Sentiment Analysis API) by time of day that people are mentioning #Oscars on Twitter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-405&quot; alt=&quot;Screen Shot 2013-02-20 at 9.53.52 AM&quot; src=&quot;/blog/images/Screen-Shot-2013-02-20-at-9.53.52-AM-1024x568.png&quot; width=&quot;625&quot; height=&quot;346&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We teamed up with our friends at &lt;a href=&quot;http://www.alchemyapi.com/&quot;&gt;AlchemyAPI&lt;/a&gt; to use their &lt;a href=&quot;http://www.alchemyapi.com/api/sentiment/&quot;&gt;Sentiment Analysis API&lt;/a&gt; to look at positive and negative tweets to predict which movie will win Best Picture. We also used their API to pull all sentiment scores and show when people are tweeting throughout the day.&lt;/p&gt;
&lt;p&gt;These charts are in real-time and please check back on the &lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;Oscar Predictions page&lt;/a&gt; to see how the movies and data is changing! Good luck with your ballots and hope your picks win. Anyone can easily create charts like these! Simply &lt;a href=&quot;http://www.precog.com/registration&quot;&gt;sign up for a free Precog account&lt;/a&gt; to get started with your data analysis and visualization.&lt;/p&gt;
&lt;p&gt;Enjoy watching the Oscars this Sunday night and don&apos;t forget to see how &lt;a href=&quot;http://www2.precog.com/2013-oscars&quot;&gt;our predictions&lt;/a&gt; line up with the actual results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fuel your spaceship and play Level 2 of the Quirrel Game</title>
      <link>http://localhost:8080/blog/Fuel-your-spaceship-and-play-Level-2-of-the-Quirrel-Game/</link>
      <pubDate>Fri, 15 Feb 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Fuel-your-spaceship-and-play-Level-2-of-the-Quirrel-Game/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?p=376&quot;&gt;Last month&lt;/a&gt;, we launched the &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;Quirrel Game&lt;/a&gt; so anyone can learn Precog&#8217;s data analysis language in a fun and interactive way! Up until today, we&#8217;ve only had Level 1: Data &amp; Basic Operations in the game. Today we&#8217;re releasing a new level for you to play!&lt;/p&gt;
&lt;p&gt;Dodge the meteorites and fuel your spaceship in &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-2&quot;&gt;Level 2: Loading &amp; Manipulating Data&lt;/a&gt;. In this level you&#8217;ll learn about loading data sets and manipulating them in various ways.  Have fun conquering Level 2 and we&#8217;ll keep launching more levels!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-2&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-398&quot; alt=&quot;Screen Shot 2013-02-14 at 9.24.59 AM&quot; src=&quot;/blog/images/Screen-Shot-2013-02-14-at-9.24.59-AM-300x224.png&quot; width=&quot;300&quot; height=&quot;224&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog lands in Philadelphia for NE Scala</title>
      <link>http://localhost:8080/blog/Precog-lands-in-Philadelphia-for-NE-Scala/</link>
      <pubDate>Thu, 07 Feb 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-lands-in-Philadelphia-for-NE-Scala/</guid>
      <author></author>
      <description>&lt;p&gt;Exactly half of the &lt;a href=&quot;http://www.precog.com/about/team&quot;&gt;Precog team&lt;/a&gt; will be arriving today in Philadelphia for the &lt;a href=&quot;http://nescala.org/&quot;&gt;North East Scala Symposium&lt;/a&gt;. The engineering team is very excited about not only attending the conference but also speaking in some of the sessions. If you&apos;re in the area and planning to attend, check out the talks below. If you have to live vicariously through them, follow the hashtag &lt;a href=&quot;https://twitter.com/search?q=%23nescala&amp;src=typd&quot;&gt;#nescala&lt;/a&gt; for Twitter updates.&lt;b&gt;&lt;b&gt;&lt;br /&gt;
&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/blog/images/nescala_team.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-388&quot; alt=&quot;nescala_team&quot; src=&quot;/blog/images/nescala_team-300x148.jpg&quot; width=&quot;300&quot; height=&quot;148&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://nescala.org/#keynote&quot;&gt;The Bakery from the Black Lagoon&lt;/a&gt;&lt;/strong&gt; (Keynote)&lt;br /&gt;
Daniel Spiewak&lt;br /&gt;
&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://twitter.com/djspiewak&quot;&gt;@djspiewak&lt;br /&gt;
&lt;/a&gt;The Cake Pattern is often explained as a way of doing dependency injection in Scala in a statically typed framework. This is analogous to describing functional programming as a tool for manipulating List-like data structures. The pattern is capable of so much more. This talk will explore the Cake Pattern, from the very basics to its deepest recesses. We will look at the theoretical foundations of this pattern in type theory, the numerous and flaming pitfalls it imposes, as well as some best practices and day-to-day useful tips.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nescala.org/#t-32686092&quot;&gt;Life After Monoids&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Tom Switzer&lt;br /&gt;
&lt;a href=&quot;http://twitter.com/tixxit&quot;&gt;@tixxit&lt;/a&gt;&lt;br /&gt;
As functional programmers, many of us have made use of monoids and semigroups. However, abstract algebra is a rich field that provides many more useful abstractions. This talk will introduce some of these algebraic structures, starting with monoids, but also discussing groups, rings, fields, vector spaces and commutativity. This talk will show why these abstractions are important, how we can model these in Scala, and how they can be of benefit in everyday programming.&lt;b&gt;&lt;b&gt;&lt;br /&gt;
&lt;/b&gt;&lt;/b&gt;&lt;br /&gt;
&lt;strong&gt;&lt;a href=&quot;http://nescala.org/#t-3025132&quot;&gt;Building a Data Science Platform in Scala&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
John A. De Goes&lt;br /&gt;
&lt;a href=&quot;http://twitter.com/jdegoes&quot;&gt;@jdegoes&lt;/a&gt;&lt;br /&gt;
In this talk, John A. De Goes, CTO of Precog, presents the high-level architecture of PrecogDB, a data science platform written in 100% Scala that provides a robust implementation of the data analysis language Quirrel on top of a proprietary data store. John discusses the challenges the team has had building systems-level code in the presence of megamorphic functions, monadic recursion, boxing, and monad transformers, while also highlighting some of the strengths of Scala and the bright hope of inlining, TCO, specialization, and macros.&lt;br /&gt;
&lt;b&gt;&lt;b&gt;&lt;br /&gt;
&lt;/b&gt;&lt;/b&gt;&lt;a href=&quot;http://nescala.org/#t-14447186&quot;&gt;&lt;strong&gt;Premature Optimization&lt;/strong&gt;&lt;br /&gt;
&lt;/a&gt;Erik Osheim&lt;br /&gt;
&lt;a href=&quot;http://twitter.com/d6&quot;&gt;@d6&lt;/a&gt;&lt;br /&gt;
As Scala developers we all know that the major performance wins come from choosing appropriate algorithms, taking advantage of parallelism, and using laziness to avoid doing more work than necessary. But sometimes it takes a bit more than that. This talk deals with the dark side of optimizing Scala code. Arrays. Specialization successes (and failures). Boxing and GC pressure. Hotspot voodoo. Inlining limitations. Reading Java Bytecode. Profiling and benchmarking.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nescala.org/#t-4414303&quot;&gt;shapeless meets implicit macros&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Miles Sabin&lt;br /&gt;
&lt;a href=&quot;http://twitter.com/milessabin&quot;&gt;@milessabin&lt;/a&gt;&lt;br /&gt;
shapeless makes extensive use of Scala&#8217;s implicit resolution mechanisms to compute types at compile time which guide runtime behaviour and statically witness properties of values and types. This works out very well for the most part, but it sometimes results in explosions in compile times: it&#8217;s a marvel that implicit resolution can be repurposed as a form of theorem proving, and hardly surprising if it doesn&#8217;t do it particularly efficiently. In this talk I will show how implicit macros can short-circuit type-level computation and make the techniques used by shapeless even more attractive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Escape from Zombies and Learn Quirrel at the same time!</title>
      <link>http://localhost:8080/blog/Escape-from-Zombies-and-Learn-Quirrel-at-the-same-time/</link>
      <pubDate>Wed, 30 Jan 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Escape-from-Zombies-and-Learn-Quirrel-at-the-same-time/</guid>
      <author></author>
      <description>&lt;p&gt;Today, we&apos;re adding a &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;fun, interactive game&lt;/a&gt; to our supply of training resources called the Quirrel Tutorial Game.  While our existing resources (&lt;a href=&quot;http://www.precog.com/products/labcoat/learn&quot;&gt;tutorial videos&lt;/a&gt;,&lt;a href=&quot;http://www.precog.com/how-tos/common-queries&quot;&gt; how to guides&lt;/a&gt; and&lt;a href=&quot;http://quirrel-lang.org/tutorial.html&quot;&gt; documentation&lt;/a&gt;) are helpful, an interactive exercise allows you to experiment and learn at your own speed. Plus, since we&apos;ve designed it as a &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;game,&lt;/a&gt; so you can have fun along the way!&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;Level 1: Data and Operators&lt;/a&gt;, you&apos;ll learn about the Quirrel data model and a bunch of useful operators that can be used to manipulate data.  You will also need to fuel up your ship before the hordes of zombies arrive. Subsequent levels will dive into more advanced functionality and will be forthcoming soon. After you complete the&lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt; first level&lt;/a&gt; in the Beginner Game, you can Tweet your final score and sign up to be notified of future releases.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;Quirrel Tutorial Game&lt;/a&gt; is a fun and easy way to get started with &lt;a href=&quot;http://www.precog.com/products/labcoat/quirrel&quot;&gt;Quirrel&lt;/a&gt; or to brush up on your query skills and learn some new features. Brag about your score with your friends on Twitter and Facebook and invite them to play too! Check it out today and &lt;a href=&quot;mailto:support@precog.com&quot;&gt;let us know&lt;/a&gt; what you think.&lt;/p&gt;
&lt;p&gt;&nbsp;&lt;br /&gt;
&lt;a href=&quot;http://www2.precog.com/learn-quirrel-level-1&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/B3yvbRCbmCSBIn3QZMQBsudTQEcPy_i6NHLHszfhYvzbULLRoFFjc1LpPhJx54szi1iE9hQPg4nuKfJ6v_gcLDg0zKNZGkX2AnWLJ7p-yO3TzGEs5p9aYztz1g&quot; width=&quot;522px;&quot; height=&quot;335px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog-Copointed Monad Transformers</title>
      <link>http://localhost:8080/blog/Precog-Copointed-Monad-Transformers/</link>
      <pubDate>Tue, 29 Jan 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-Monad-Transformers/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;h2&gt;Monad Transformers: Wrapping an Astronaut in a Burrito&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;In this post, we&#8217;ll be looking at monad transformers &#8212; a topic that sounds far more complicated than it is. First, we&#8217;ll briefly discuss what a monad transformer is, then talk about 2 concrete instances of monad transformers that we use at Precog (&lt;code&gt;EitherT&lt;/code&gt; and &lt;code&gt;StreamT&lt;/code&gt;), and then we&#8217;ll discuss the composability of monads in general.&lt;/p&gt;
&lt;p&gt;A monad transformer is just a way to mix in the behaviour of some monad into another. Perhaps we want a &lt;code&gt;Future&lt;/code&gt; with the ability to report errors like we can with &lt;code&gt;Either&lt;/code&gt;. Or a &lt;code&gt;Stream&lt;/code&gt;, whose elements are produced in a future. With the &lt;code&gt;EitherT&lt;/code&gt; and &lt;code&gt;StreamT&lt;/code&gt; monad transformers we can create monads that&lt;br /&gt;
do precisely this. Other monad transformers can mix in the behaviour of &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, and more. To illustrate our motivation for using these monad transformers, we&#8217;ll use 2 examples; one where we implement a simple service that delegates to a web service and another where we stream data off disk to be processed efficiently and in a single pass.&lt;/p&gt;
&lt;h2&gt;Evolving a Simple Service to Use Monad Transformers&lt;/h2&gt;
&lt;p&gt;To start us off, we&#8217;ll build on our previous article, &lt;a href=&quot;http://precog.com/blog-precog-2/entry/the-abstract-future&quot;&gt;&#8220;The Abstract Future,&#8221;&lt;/a&gt; as monad transformers and abstracting over your monad compliment each other so nicely. Let&#8217;s say we have a simple service for managing users.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Don&apos;t worry -- we wouldn&apos;t actually store a plain text password
case class User(userId: String, email: String, password: String)

trait UserService[M[+&lt;em&gt;]] {
  implicit def M: Monad[M]

  def createUser(email: String, pass: String): M[User]
  def retrieveUser(email: String): M[Option[User]]
  def updateUser(id: String, user: User): M[User]
  def deleteUser(userId: String): M[Option[User]]
  def authenticate(email: String, pass: String): M[Validation[String,User]]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see we&#8217;ve taken our own advice and have decided to abstract over our monad &lt;code&gt;M[+&lt;/em&gt;]&lt;/code&gt;, which wraps the return values of all methods in the service. Now, this service may have multiple implementations. For example, when testing other code that depends on &lt;code&gt;UserService&lt;/code&gt; we&#8217;ll develop a version that stores users in memory. We&#8217;ll also need a version that interacts with a user database directly, perhaps LDAP or MongoDB. Lastly, since we are our own users of our products, we will implement a version that wraps the &lt;em&gt;users&lt;/em&gt; RESTful web service.&lt;/p&gt;
&lt;p&gt;So, first, for testing, we&#8217;d likely create a simple version that uses a &lt;code&gt;Map&lt;/code&gt; to store users in, keyed by user ID.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class TestUserService[M[+&lt;em&gt;]](implicit val M: Monad[M]) extends UserService[M] {
  val idGen = new java.util.concurrent.AtomicInteger()
  val users: mutable.Map[String, User] = SyncMap.empty

  def createUser(email: String, pass: String): Id[User] = M.point {
    val userId = idGen.getAndIncrement().toString
    val user = User(userId, email, pass)
    users(userId) = user
    user
  }

  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case above, it is very easy to implement the API. We are working in memory, so we don&#8217;t have to worry about failure of the underlying data store &#8212; if our memory is &lt;em&gt;down&lt;/em&gt;, then we have bigger problems! Because of this, the actual monad we use doesn&#8217;t really matter &#8212; it could be &lt;code&gt;Id&lt;/code&gt; for all we care.&lt;/p&gt;
&lt;p&gt;Well time passes and now we&#8217;ve turned this service into a web service. And now we want to implement a version of &lt;code&gt;UserService&lt;/code&gt; that delegates all its work to this web service. At first glance, we&#8217;d want our &lt;code&gt;M&lt;/code&gt; to be &lt;code&gt;Future&lt;/code&gt;, as the HTTP calls will be asynchronous. Seems simple enough,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;final class WebUserService(config: Config) extends UserService[Future] {
  def M = FutureMonad

  def createUser(email: String, pass: String): M[User] = {
    http.post(&quot;/users/&quot;, Map(&quot;email&quot; -&gt; email, &quot;pass&quot; -&gt; pass)) map { r =&gt;
      parseUser(r)&lt;br&gt;    }
  }

  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks fine and dandy &#8212; but wait! What if our HTTP request fails? What happens? More than likely an exception will be thrown by the &lt;code&gt;post&lt;/code&gt; method. This is may be OK, but if you are the type of person who prefers &lt;code&gt;Either&lt;/code&gt; (or &lt;code&gt;Validation&lt;/code&gt;) to throwing/catching exceptions, then you probably want to make the &#8220;spotty&#8221; nature of web services explicit, so you know errors will be dealt with. What would be nice, is if we could return a &lt;code&gt;Future&lt;/code&gt; with an extra side-channel whose sole purpose is to report HTTP errors. What we really want is a monad that works like both &lt;code&gt;Future&lt;/code&gt;, because HTTP calls are asynchronous, and &lt;code&gt;Either&lt;/code&gt;, because those HTTP calls may fail. What we want is &lt;code&gt;EitherT&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; href=&quot;#eithert&quot; name=&quot;eithert&quot;&gt;&lt;/a&gt;EitherT&lt;/h3&gt;
&lt;p&gt;The main bit of &lt;code&gt;EitherT&lt;/code&gt; we&#8217;re concerned with is reporduced here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sealed trait EitherT[M[+&lt;/em&gt;], +A, +B] {
  val run: M[A \/ B]
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;\/[A, B]&lt;/code&gt; is just Scalaz 7&#8242;s version of Scala&#8217;s &lt;code&gt;Either[A, B]&lt;/code&gt; and &lt;code&gt;A \/ B&lt;/code&gt; is some syntatic sugar Scala provides that is equivalent to &lt;code&gt;\/[A, B]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can see that &lt;code&gt;EitherT&lt;/code&gt; is just a wrapper around &lt;code&gt;M[A \/ B]&lt;/code&gt;. Nonetheless, if we fix &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;EitherT[M[&lt;em&gt;], A, &lt;/em&gt;]&lt;/code&gt;, then we have a monad! So, let&#8217;s rewrite our &lt;code&gt;WebUserService&lt;/code&gt; class above, fixing &lt;code&gt;M&lt;/code&gt; to &lt;code&gt;Future&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; to some error class, &lt;code&gt;HttpError&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;case class HttpError(msg: String)

// Our Monad! There is an implicit instance available from Scalaz.
type HttpResponse[+A] = EitherT[Future, HttpError, A]

class WebUserService(config: Config) extends UserService[HttpResponse] {
  def createUser(email: String, pass: String): HttpResponse[User] = {
    // EitherT.eitherT needs a Future[HttpError \/ User] here.
    EitherT.eitherT({
      http.post(&quot;/users/&quot;, Map(&quot;email&quot; -&gt; email, &quot;pass&quot; -&gt; pass)) map { r =&gt;

        \/.right(parseUser(r))

      } recover { case (e: HttpException) =&gt;

        // recover is a method on &lt;code&gt;Future&lt;/code&gt; that let&apos;s us recover from
        // thrown exceptions.
        \/.left(HttpError(e.getMessage())

      }
    })
  }

  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our &lt;code&gt;WebUserService&lt;/code&gt; has a nice way of reporting HTTP errors. This is completely distinct from the &#8220;normal&#8221; Future failure channel (which will catch exceptions) and reflects the nature of HTTP much better. Notice that we get this for free &#8212; we didn&#8217;t need to change the API of &lt;code&gt;UserService&lt;/code&gt; at all! One API seamlessly handles a &lt;code&gt;UserService&lt;/code&gt; that is synchronous, asynchronous, and asyncronous with possible failure.&lt;/p&gt;
&lt;h2&gt;Transforming Data with Monad Transformers&lt;/h2&gt;
&lt;p&gt;With our &lt;code&gt;UserService&lt;/code&gt; in place, now we can start providing services to our users. One of the core functions of our data analytics platform at Precog is transforming streams of data. Streams are nice because they are &lt;em&gt;lazy&lt;/em&gt; and &lt;em&gt;restartable&lt;/em&gt;. The laziness means that we can compose multiple transformations together, but only apply them when we finally need to stream the data off disk; perhaps to reduce the data to a single value or output it to a user. Restartability means that we can hold onto the head of a stream at any point and always traverse the stream again. If, for example, we&#8217;re joining 2 streams of data and both sides have long runs of data that share a single key, we will need to restart one of those streams multiple times. With a stream, we can just hold onto the stream at start of our run and then simply re-traverse the stream from that point whenever we need to.&lt;/p&gt;
&lt;p&gt;Unfortunately, Scala&#8217;s &lt;code&gt;Stream&lt;/code&gt; is on-demand. If you ask for the next element, it&#8217;ll block while it retrieves it. In our system, our data can come from any number of sources, including &lt;a href=&quot;http://precog.com/precog-on-mongodb&quot;&gt;MongoDB&lt;/a&gt;, &lt;a href=&quot;http://blog.precog.com/?p=356&quot;&gt;Postgres&lt;/a&gt;, or &lt;a href=&quot;http://precog.com/products/precog&quot;&gt;our own fast propietary data store&lt;/a&gt;. In all of these cases, we want to access the data asynchronously and that means it&#8217;s coming in a &lt;code&gt;Future&lt;/code&gt;. So, what we want to do is mix together &lt;code&gt;Stream&lt;/code&gt; with &lt;code&gt;Future&lt;/code&gt; and for this we use Scalaz&#8217;s &lt;code&gt;StreamT&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;StreamT&lt;/h3&gt;
&lt;p&gt;The easiest way to construct a &lt;code&gt;StreamT&lt;/code&gt; is using &lt;code&gt;StreamT.unfoldM&lt;/code&gt; which uses &lt;code&gt;Option&lt;/code&gt; to determine the end of a stream. Here is a simple example of how we might load some data from a datastore. The &lt;code&gt;loadDataFrom&lt;/code&gt; method will load up some chunk of data starting at &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def loadDataFrom(key: Key): Future[(Key, Block)]

def load(from: Key, to: Key): StreamT[Future, Block] = {
  StreamT.unfoldM(from) { key =&gt;
    if (key &lt; to) {
      loadDataFrom(key) map { case (lastKey, block) =&gt;
        Some((block, lastKey))
      }
    } else {
      Future(None)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#8217;ll notice that we actually return a &lt;code&gt;Future&lt;/code&gt; when we load a block of data. The &lt;code&gt;StreamT&lt;/code&gt; let&#8217;s us mix in this behaviour with the stream. Now we can just treat the stream as we would any other stream.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val data = load(from, to)
  .map(transform1(&lt;em&gt;))
  .map(transform2(&lt;/em&gt;))
  .map(transform3(&lt;em&gt;))
  .foldLeft(reduction.zero)(&lt;/em&gt; |+| &lt;em&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we get out of this is a &lt;code&gt;Future&lt;/code&gt; with the value of our reduction that requires just a single pass over our data, which is pulled out of a DB in a &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Composing Monads&lt;/h2&gt;
&lt;p&gt;What&#8217;s important to realise is that a monad transformer is just a way to compose 2 monads. And now that you&#8217;ve seen &lt;code&gt;EitherT&lt;/code&gt; and &lt;code&gt;StreamT&lt;/code&gt; in action, you may realize you have your own monad you use that you&#8217;d like to compose with another. A natural question we can ask is if given any 2 monad &lt;code&gt;M[&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;N[&lt;em&gt;]&lt;/code&gt;, can we always compose them and get a monad? Put another way, is &lt;code&gt;({ type &#923;[&#945;] = M[N[&#945;]] })#&#923;&lt;/code&gt; a monad?&lt;/p&gt;
&lt;p&gt;It may come as a surprise to some readers that the answer is &lt;em&gt;no&lt;/em&gt;. Monads are not, in general, composable. It is easiest to see this as a code example. Take the lowly &lt;code&gt;Functor&lt;/code&gt; (a la [Scalaz][]).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait Functor[M[&lt;/em&gt;]] {
  def map[A, B](m: M[A])(f: A =&gt; B): M[B]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a warm up, let&#8217;s think about how would we compose a &lt;code&gt;Functor&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait ComposedFunctor[M[&lt;em&gt;], N[&lt;/em&gt;]]
    extends Functor[({ type &#923;[&#945;] = M[N[&#945;]] })#&#923;] {
  def M: Functor[M]
  def N: Functor[N]

  def map[A, B](mna: M[N[A]])(f: A =&gt; B): M[N[B]] = ???
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out, &lt;code&gt;map&lt;/code&gt; is fairly easy to implement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
def map[A, B](mna: M[N[A]])(f: A =&gt; B): M[N[B]] =
  M.map(mna)(na =&gt; N.map(na)(f))
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#8217;s get a little more specialized; what about &lt;code&gt;Applicative&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait ComposedApplicative[M[&lt;em&gt;], N[&lt;/em&gt;]] extends ComposedFunctor[M, N]
    with Applicative[({ type &#923;[&#945;] = M[N[&#945;]] })#&#923;] {
  def M: Applicative[M]
  def N: Applicative[N]

  def point[A](a: =&gt; A): F[A] = M.point(N.point(a))
  def ap[A, B](mna: =&gt; M[N[A]])(mnf: =&gt; M[N[A =&gt; B]]): M[N[B]] = {
    M.ap(mna, f map { (nf: N[A =&gt; B]) =&gt;
      { (na: N[A]) =&gt; N.ap(na)(nf) }
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so we can compose functors and applicatives, now what about monads? The main method we need to implement here is &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait ComposedMonad[M[&lt;em&gt;], N[&lt;/em&gt;]] extends ComposedApplicative[M, N]
    with Monad[({ type &#923;[&#945;] = M[N[&#945;]] })#&#923;] {
  def M: Monad[M]
  def N: Monad[N]

  def bind[A, B](fa: M[N[A]])(f: A =&gt; M[N[B]]): M[N[B]] = ???
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not left as an exercise for the reader, though you are welcome to try. It turns out that &lt;code&gt;bind&lt;/code&gt; cannot be implemented purely in terms of 2 monads. It is somewhat ironic that one of the heros of functional programming isn&#8217;t composable.&lt;/p&gt;
&lt;p&gt;Well, clearly we aren&#8217;t doomed to never compose our monads, as we&#8217;ve already seen that a few examples of composable monads (&lt;code&gt;Either&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt;, etc.). Even more, there is a large class of monads that are composable. A &lt;a href=&quot;http://web.cecs.pdx.edu/%7Empj/pubs/composing.html&quot;&gt;great paper by Mark Jones&lt;/a&gt; discusses 3 general constructions for creating monad transformers. One I will highlight is the &lt;em&gt;swap&lt;/em&gt; construction. Generally, it means that if you can implement the following for some monad &lt;code&gt;N&lt;/code&gt;, then you can implement &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait Swappable[N[+&lt;em&gt;]] {
  def swap[M[+&lt;/em&gt;], A](ma: N[M[A]]): M[N[A]] = ???
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kris Nuttycombe pointed me to Scalaz&#8217;s &lt;code&gt;Traversable&lt;/code&gt;, which happens to have a very similar definition for &lt;code&gt;traverseImpl&lt;/code&gt;. In fact &lt;code&gt;swap&lt;/code&gt; and &lt;code&gt;traverseImpl&lt;/code&gt; can both be implemented in terms of each other). So, without loss of generality, we can just work with the existing &lt;code&gt;Traverse&lt;/code&gt; interface.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait Traverse[N[&lt;em&gt;]] extends Functor[N] with Foldable[N] { self =&gt;
  def traverseImpl[M[&lt;/em&gt;]: Applicative, A, B](fa: N[A])(f: A =&gt; M[B]): M[N[B]]
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, can we implement &lt;code&gt;bind&lt;/code&gt; with a &lt;code&gt;Traversable&lt;/code&gt;? Yes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trait ComposedMonad[M[&lt;em&gt;], N[&lt;/em&gt;]] extends ComposedApplicative[M, N]
    with Monad[({ type &#923;[&#945;] = M[N[&#945;]] })#&#923;] {
  def M: Monad[M]
  def N: Monad[N] with Traversable[N]

  def bind[A, B](fa: M[N[A]])(f: A =&gt; M[N[B]]): M[N[B]] = {
    M.join(fa map { na =&gt; N.traverseImpl(na)(f) map N.join })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Immediately you can see that we can use this to implement many of our favourite monad transformers, including &lt;code&gt;OptionT&lt;/code&gt;, &lt;code&gt;ListT&lt;/code&gt;, &lt;code&gt;EitherT&lt;/code&gt;, etc. However, while this construction is simple, it also doesn&#8217;t necessarily produce &lt;em&gt;useful&lt;/em&gt; monad transformers. For instance, Scala&#8217;s &lt;code&gt;Stream&lt;/code&gt; is traversable, but &lt;code&gt;M[Stream]&lt;/code&gt; does not have the properties we want for our data stream discussed above; it would require we complete all futures &#8212; load all the data into memory &#8212; before we could even access the stream. Not good. &lt;code&gt;StreamT&lt;/code&gt; goes further and provides an implementation that mixes both behaviours in a way that is very powerful. The point being that simple composition isn&#8217;t necessarily exactly what we want.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;At Precog, we also make great use of &lt;code&gt;StateT&lt;/code&gt;. If you would like to learn more about &lt;code&gt;StateT&lt;/code&gt;, I&#8217;d suggest watching &lt;a href=&quot;http://www.youtube.com/watch?v=Jg3Uv_YWJqI&quot;&gt;Michael Pilquist&#8217;s fantastic &#8220;State Monad&#8221; talk.&lt;/a&gt; There are of course others, such as &lt;code&gt;ReaderT&lt;/code&gt;, &lt;code&gt;WriterT&lt;/code&gt;, &lt;code&gt;ReaderWriterStateT&lt;/code&gt;, and lots more.&lt;/p&gt;
&lt;p&gt;Monad transformers let us mix behaviours of different monads together, without having to write custom monads. We saw how we can use &lt;code&gt;EitherT&lt;/code&gt; to add a more explicit failure mode to &lt;code&gt;Future&lt;/code&gt;. We also showed how we can use &lt;code&gt;StreamT&lt;/code&gt; to elegantly solve the problem of lazily streaming data from some remote data source.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Just released- Precog for PostgreSQL</title>
      <link>http://localhost:8080/blog/Just-released-Precog-for-PostgreSQL/</link>
      <pubDate>Mon, 28 Jan 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Just-released-Precog-for-PostgreSQL/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/blog/images/Screen-Shot-2013-01-28-at-12.35.03-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-357&quot; alt=&quot;Screen Shot 2013-01-28 at 12.35.03 PM&quot; src=&quot;/blog/images/Screen-Shot-2013-01-28-at-12.35.03-PM-300x38.png&quot; width=&quot;300&quot; height=&quot;38&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today, the Precog team has released a free implementation of &lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;Precog for PostgreSQL&lt;/a&gt;. Precog for PostgreSQL empowers users to easily perform data science on PostgreSQL.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;This release&lt;/a&gt; bundles the core Precog analysis technology into a completely free package that anyone can download and deploy on their existing &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL database&lt;/a&gt;. Precog for PostgreSQL gives you the ability to analyze all the data in your PostgreSQL database, without forcing you to export data into another tool or write any custom code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;Precog for PostgreSQL&lt;/a&gt; comes bundled with &lt;a href=&quot;http://precog.com/products/labcoat&quot;&gt;Labcoat&lt;/a&gt;, a high-level analysis tool that lets users analyze data using &lt;a href=&quot;http://quirrel-lang.org/&quot;&gt;Quirrel&lt;/a&gt;, the statistically-oriented query language. To get started, &lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;visit this page&lt;/a&gt; to download the zipped file (includes JAR, scripts and config file).&lt;/p&gt;
&lt;p&gt;To get started&#8230;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Download the zip file&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Configure Precog&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Launch Precog&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Try the API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Try Labcoat&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Analyze your data!&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See the &lt;a href=&quot;http://www.precog.com/external/editions/precog-for-postgresql-readme.htm&quot;&gt;read me&lt;/a&gt; for the complete installation and configuration instructions. We provide full support for this release so if you run into any trouble, please contact the Precog team at &lt;a href=&quot;mailto:support@precog.com&quot;&gt;support@precog.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun &lt;a href=&quot;http://www.precog.com/editions/precog-for-postgresql&quot;&gt;analyzing your data&lt;/a&gt; on your PostgreSQL database and &lt;a href=&quot;http://www.precog.com/contact/sales&quot;&gt;let us know&lt;/a&gt; what you think!&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To- Compute Common Analytics On Precog</title>
      <link>http://localhost:8080/blog/How-To-Compute-Common-Analytics-On-Precog/</link>
      <pubDate>Thu, 24 Jan 2013 18:07:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/How-To-Compute-Common-Analytics-On-Precog/</guid>
      <author></author>
      <description>&lt;p&gt;To help make it easy to get started analyzing data and deploying a data-driven application, we�ve added a new How To article in the &lt;a href=&quot;http://precog.com/developers&quot;&gt;Developer Center&lt;/a&gt;. This &lt;a href=&quot;http://precog.com/developers/how-tos/common-queries&quot;&gt;How To Compute Common Analytics on Precog&lt;/a&gt; provides examples of common types of queries.  All of the examples are written so they work in the demo version of &lt;a href=&quot;http://labcoat.precog.com/&quot;&gt;Labcoat&lt;/a&gt;, but they should be easily modifiable to work with your data.&lt;/p&gt;
&lt;p&gt;The guide covers basic operations like counts, sums and averages.  It also includes examples of more advanced operations like computing an hour-by-hour histogram or a time windowed query.  Each code snippet includes a &quot;Labcoat&quot; button that will launch the query and allow you to play with the example.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh5.googleusercontent.com/EPeJ2rc3_xyY9drKwtNMFStkH5AgE6WBoU1Lde8ga2Zzt39UaD5H2AXqj6vyZmUo-Ok8ROkRQfYyq_llYFTJa8uQbRjpXKGUv_tXkbEHGEPIcoE-2H4Z&quot; width=&quot;650px;&quot; height=&quot;304px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Please &lt;a href=&quot;mailto:support@precog.com&quot;&gt;let us know&lt;/a&gt; if there are any other common examples you&apos;d like to see included in &lt;a href=&quot;http://precog.com/developers/how-tos/common-queries&quot;&gt;this guide.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Precog Wizard- in 3 Steps!</title>
      <link>http://localhost:8080/blog/New-Precog-Wizard-in-3-Steps/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/New-Precog-Wizard-in-3-Steps/</guid>
      <author></author>
      <description>&lt;p&gt;We make it easy to create a &lt;strong&gt;Precog account&lt;/strong&gt; (by the way, it&apos;s free!). It&apos;s just &lt;a href=&quot;http://www.precog.com/account/login/&quot;&gt;one simple form&lt;/a&gt; to complete and then you&apos;ll need to confirm it by clicking on a link in your email. Now, it&apos;s even easier to add your data and start analyzing with our new &lt;a href=&quot;https://www.precog.com/getting-started-wizard&quot;&gt;Getting Started Wizard&lt;/a&gt;! Watch the 60 second video below to see how it works:&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&quot;YouTube video player&quot; src=&quot;http://www.youtube.com/embed/gw47wy6XSCc?wmode=transparent&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;It&apos;s incredibly simple. The &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;https://www.precog.com/getting-started-wizard&quot;&gt;3 steps&lt;/a&gt; in the wizard are &lt;strong style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;Upload Data, Analyze Data, and Visualize Data&lt;/strong&gt;. Just have your data ready to upload (CSV, JSON, Client Libraries, Relational Data) and by the end of the Wizard you&apos;ll see visualizations. Create a &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.precog.com/account/login/&quot;&gt;new account&lt;/a&gt; or &lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://precog.com/account-login&quot;&gt;login&lt;/a&gt; now to use our fun, new Wizard!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/blog/images/Screen-Shot-2013-01-22-at-11.44.52-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-338&quot; alt=&quot;Screen Shot 2013-01-22 at 11.44.52 AM&quot; src=&quot;/blog/images/Screen-Shot-2013-01-22-at-11.44.52-AM-300x187.png&quot; width=&quot;300&quot; height=&quot;187&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is Precog...in 90 Seconds</title>
      <link>http://localhost:8080/blog/What-is-Precog-in-90-Seconds/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/What-is-Precog-in-90-Seconds/</guid>
      <author></author>
      <description>&lt;p&gt;We&apos;ve been thinking about how to tell our &lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt; story so that anyone (even granny who is baffled by technology) understands what we do, how we do it, and how it can help developers with their analytics and reporting. I think we&apos;ve got the answer and luckily, it&apos;s jam-packed into a 90-second &lt;a href=&quot;http://www.youtube.com/watch?v=AzBsLNlF0Bk&quot;&gt;animated video&lt;/a&gt;. See for yourself below:&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&quot;YouTube video player&quot; src=&quot;http://www.youtube.com/embed/AzBsLNlF0Bk?wmode=transparent&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Sit back, grab a shot of espresso (it&apos;s that fast!) and enjoy our &lt;a href=&quot;http://www.youtube.com/watch?v=AzBsLNlF0Bk&quot;&gt;fun video&lt;/a&gt; about Precog! If you&apos;d like to learn more, &lt;a href=&quot;http://www.precog.com/about/contact-us/&quot;&gt;contact us&lt;/a&gt; for more info. We&apos;d love to chat with you and tell you how we can help with your analytics and reporting.&lt;b id=&quot;internal-source-marker_0.7315458515658975&quot;&gt; &lt;/b&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>See the Precog Platform in Action with SocialSauce</title>
      <link>http://localhost:8080/blog/See-the-Precog-Platform-in-Action-with-SocialSauce/</link>
      <pubDate>Fri, 18 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/See-the-Precog-Platform-in-Action-with-SocialSauce/</guid>
      <author></author>
      <description>&lt;p&gt;Concrete examples provide a powerful way to understand abstract concepts (such as Analytics and Data Science Platform). In order to better understand how &lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt; is a &lt;a href=&quot;http://www.precog.com/solutions/data-science&quot;&gt;Data Science Platform&lt;/a&gt; that allows you to perform analytics, we created a demo company and reporting dashboard.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www2.precog.com/socialsauce&quot;&gt;SocialSauce&lt;/a&gt; is a fictitious company built using different aspects of the Precog platform. SocialSauce is a social media analytics company that monitors a Twitter feed, analyzes the content of mentions and outgoing tweets and shows the sentiment scores. The &lt;a href=&quot;http://www2.precog.com/socialsaucedashboard&quot;&gt;SocialSauce dashboard&lt;/a&gt; gives the customer real-time access to &lt;a href=&quot;http://www.precog.com/solutions/embeddable-reporting&quot;&gt;embedded reporting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The customer in this demo is &lt;a href=&quot;http://www.fullcontact.com/&quot;&gt;FullContact,&lt;/a&gt; our friends at a local Denver startup. They offer a contact management API and also have a lively Twitter channel over at &lt;a href=&quot;https://twitter.com/fullcontactapi&quot;&gt;@FullContactAPI&lt;/a&gt;. Below is a screenshot of the dashboard, but you�re better off going to the &lt;a href=&quot;http://www2.precog.com/socialsaucedashboard&quot;&gt;interactive and real-time dashboard&lt;/a&gt; to see for yourself!&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://www2.precog.com/socialsaucedashboard&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/3kQZR6rf3o7t8ZXUpYVa4gnLq7itdnQRAzr7di3BgbStg_3MQtCmTSASF3sjomI3-iDnYjLGzYY6ISwdUkTRKO9THaRhPb6lUv-DtRuXRGhKIzBvPI8&quot; width=&quot;641px;&quot; height=&quot;414px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www2.precog.com/socialsaucedashboard&quot;&gt;SocialSauce&lt;/a&gt; reports Twitter analytics using our ReportGrid charts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What time of day do people tweet about your company? (Bar chart)&lt;/li&gt;
&lt;li&gt;What is the ratio of your outgoing tweets to mentions? (Sankey)&lt;/li&gt;
&lt;li&gt;How many of your tweets get retweeted?  (Sankey)&lt;/li&gt;
&lt;li&gt;How positive is the image of your company on Twitter?&lt;/li&gt;
&lt;li&gt;What categories do your tweets fall into? (Pie chart)&lt;/li&gt;
&lt;li&gt;What are some of the common keywords in tweets? (Leaderboard)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information about these charts, check out the &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid&lt;/a&gt; visualization library.  Also, if you want to dig deeper into the data and explore it with our interactive development environment, just simply click on a chart in the dashboard to see the query in &lt;a href=&quot;http://www.precog.com/products/labcoat&quot;&gt;Labcoat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Precog is an integrated platform that makes all of this possible.  Precog makes it easy to capture and store data which can then be enhanced or augmented.  In this example, the data is enriched by sentiment, category and concept analysis.  This data can then be displayed in an embedded reporting dashboard for easy access by customers.&lt;/p&gt;
&lt;p&gt;Thanks to our friends over at &lt;a href=&quot;http://www.alchemyapi.com/&quot;&gt;AlchemyAPI&lt;/a&gt; for their text analysis services (SentimentAPI, CategoryAPI and ConceptAPI) and once again to &lt;a href=&quot;http://www.fullcontact.com/&quot;&gt;FullContact&lt;/a&gt; for their cooperation.&lt;/p&gt;
&lt;p&gt;Beginning to end, Precog focuses on making an application easier to develop, faster to deploy and less expensive to produce and maintain.  Check out &lt;a href=&quot;http://www2.precog.com/socialsaucedashboard&quot;&gt;SocialSauce&lt;/a&gt; today and &lt;a href=&quot;http://www.precog.com/contact/sales&quot;&gt;please send us any questions&lt;/a&gt; to learn about Precog today!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boulder welcomes MongoDB!</title>
      <link>http://localhost:8080/blog/Boulder-welcomes-MongoDB/</link>
      <pubDate>Wed, 16 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Boulder-welcomes-MongoDB/</guid>
      <author></author>
      <description>&lt;p&gt;Next week, the 10gen team will be in our neck of the woods for the &lt;a href=&quot;http://www.10gen.com/events/mongodb-boulder-2013&quot;&gt;MongoDB Boulder Conference&lt;/a&gt;. We&#8217;re thrilled to have them here and also honored to be speaking at the conference. If you&#8217;re in the area or want to take a trip to the Rocky Mountains, &lt;a href=&quot;http://www.10gen.com/events/mongodb-boulder-2013&quot;&gt;join us&lt;/a&gt; on Thursday, January 24.&lt;/p&gt;
&lt;p&gt;Our Founder, John De Goes, will talk at 12:15 on &lt;strong&gt;Analyzing Big Data with Quirrel on MongoDB&lt;/strong&gt;. This session will cover the basics of Quirrel, the &#8220;R for big data&#8221; language. All participants will be provided with an online learning environment where they can follow along and learn the core syntax and features of the Quirrel analysis language. By the end of the workshop, participants will be able to load, filter, correlate, group, and aggregate data using Quirrel.&lt;/p&gt;
&lt;p&gt;If you haven&#8217;t already download the free &lt;a href=&quot;http://www.precog.com/editions/precog-for-mongodb&quot;&gt;Precog for MongoDB file&lt;/a&gt;, give it a try! Follow the &lt;a href=&quot;https://twitter.com/search/realtime/%23mongodbdays&quot;&gt;#MongoDBDays&lt;/a&gt; hashtag for news around this event. Hope to see you next week and if you see us around (wearing black Precog shirts with zombies) ask us for a free shirt and demo of Precog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>You're invited to the Quick Left + Precog Hackfest in Boulder!</title>
      <link>http://localhost:8080/blog/You-are-invited-to-the-Quick-Left-Precog-Hackfest-in-Boulder/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/You-are-invited-to-the-Quick-Left-Precog-Hackfest-in-Boulder/</guid>
      <author></author>
      <description>&lt;p&gt;We&#8217;ve partnered up with our Pearl Street neighbors, &lt;a href=&quot;http://www.quickleft.com&quot;&gt;Quick Left&lt;/a&gt;, to host a &lt;a href=&quot;http://jan2013quicklefthackfest.eventbrite.com/&quot;&gt;Hackfest&lt;/a&gt; on January 30. Here&#8217;s your chance to show off your mad software development skills, drink cold beer, eat tasty pizza and win some cool prizes. Bonus points awarded to the team who incorporates the  &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid API&lt;/a&gt; into their web collaboration tool. We&#8217;ll be around to help answer any questions and give you some ideas!&lt;/p&gt;
&lt;p&gt;Build web collaboration tools in the language of your choice and don&#8217;t worry about forming a team beforehand (teams can get together night of). Developers, designers, and spectators are welcome. You&#8217;ll have three hours to get busy coding! So come play for a bit. Kicking off at 6:30 sharp. &lt;a href=&quot;http://jan2013quicklefthackfest.eventbrite.com/&quot;&gt;Sign up today!&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=303&quot; rel=&quot;attachment wp-att-303&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-303&quot; alt=&quot;quickleft_office&quot; src=&quot;/blog/images/quickleft_office-300x200.jpg&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;&lt;br /&gt;
&lt;/a&gt;The super snazzy Quick Left office&lt;a href=&quot;http://blog.precog.com/?attachment_id=303&quot; rel=&quot;attachment wp-att-303&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt;: Wednesday, January 30, 6 &#8211; 9:30 pm&lt;br /&gt;
&lt;strong&gt;Where:&lt;/strong&gt; Quick Left Headquarters @ 902 Pearl Street, Boulder CO&lt;br /&gt;
&lt;strong&gt;What:&lt;/strong&gt; Teams of 3 form at the event to do 3 hours of intensive coding + UXD to build web collaboration tools.&lt;br /&gt;
&lt;strong&gt;Who:&lt;/strong&gt; Any and all developers interested in coding, designers in UX/UI, and those who enjoy creating cool shiz under pressure.&lt;/p&gt;
&lt;p&gt;It&#8217;s a free event so &lt;a href=&quot;http://jan2013quicklefthackfest.eventbrite.com/&quot;&gt;get your ticket here&lt;/a&gt;. We hope to see you there and look out for the Precog folks  wearing black zombie shirts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>There's still time to submit your app! -and get $500-</title>
      <link>http://localhost:8080/blog/There-is-still-time-to-submit-your-app-and-get-$500/</link>
      <pubDate>Tue, 08 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/There-is-still-time-to-submit-your-app-and-get-$500/</guid>
      <author></author>
      <description>&lt;p&gt;Precog is partnering with &lt;a href=&quot;http://developerweek.com/&quot; target=&quot;_blank&quot;&gt;DeveloperWeek&lt;/a&gt; to offer a $500 scholarship, DeveloperWeek conference passes, and DeveloperWeek on-stage presentation time for the top developer (or developer team) who &lt;a href=&quot;https://data2.wufoo.com/forms/developerweek-2013-scholarship-application/&quot; target=&quot;_blank&quot;&gt;proposes an app&lt;/a&gt; built on our technology. Submit your app by January 18th (that&#8217;s next Friday). &lt;a href=&quot;http://www.developerweek.com/index/scholarships&quot; target=&quot;_blank&quot;&gt;Get more info on the scholarship here!&nbsp;&lt;/p&gt;&lt;/a&gt;
&lt;p&gt;Here are some app ideas to get you started:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;p&gt;Take advantage of &lt;a href=&quot;http://www.precog.com/products/precog&quot; target=&quot;_blank&quot;&gt;Precog&#8217;s advanced analytics capabilities&lt;/a&gt; to create a recommendation engine&lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;Capture data about someone&#8217;s favorite book/recipe/programming packages and recommend something new&lt;/p&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Use the &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot; target=&quot;_blank&quot;&gt;ReportGrid Visualization Library&lt;/a&gt; to present data in an informative and interesting way&lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;Power a real-time leaderboard for a video game or other competition&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Use a heatgrid to instantly understand concentrations of activity&lt;/p&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://developerweek.com/&quot; target=&quot;_blank&quot;&gt;DeveloperWeek 2013 Conference &amp; Festival&lt;/a&gt; is the first-annual 6-day conference and festival (February 2-7, 2013) in downtown San Francisco where amateur and veteran developers alike can learn about &#8211; and build with &#8211; over 200 developer tools and languages! DeveloperWeek is a convergence of developers, inviting over 100 speakers to educate you about Node.js, Android, design &amp; UI, Hadoop, MongoDB, and everything new in 2012-2013. We&#8217;re honored to be speaking at three sessions and will be exhibiting as well. Hope to see you in San Francisco!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Example Labcoat Query- Cumulative Conversions</title>
      <link>http://localhost:8080/blog/Example-Labcoat-Query-Cumulative-Conversions/</link>
      <pubDate>Wed, 02 Jan 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Example-Labcoat-Query-Cumulative-Conversions/</guid>
      <author></author>
      <description>&lt;p&gt;We want to make the transition to Precog as easy as possible for our customers and so our support team has provided some initial queries to help get started. These queries make it extremely fast to get an application up and running and gives customers example queries that they can modify moving forward. Let&apos;s examine an example query, which includes data from the demo version of Labcoat.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://quirrel-lang.org/&quot;&gt;Quirrel&lt;/a&gt;, it&apos;s easy to do an aggregation by some time period such as day, week or month.  But sometimes we want this aggregation to include not just the results of that week, but the cumulative results of all prior weeks.  Below is a screenshot from Labcoat displaying cumulative conversions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/lvSms2-XzlHTKGlckNnQFg0wxO_6EZH6ZxOCRRIQffYKKUzFUihKNApnYwl6olgXvKUoU7ln5SvafB_7nqSSO1bEHuGvQeU3AfZ0PPOnOKpKD0rkWpc&quot; width=&quot;709&quot; height=&quot;178&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s walk through the Quirrel needed to produce this result.  First, import the standard library time module so that we can use the weekOfYear function. Then, augment the initial data with a variable called week by using the with command.&lt;/p&gt;
&lt;p&gt;Finally, write a solve statement with an explicit constraint.  Explicit constraints for solve statements are declared in the first line of a solve after an &quot;=&quot; equals sign.  This differs from many solve statements that have implicit constraints from where clauses within the body of the solve.  Constraints determine where the values for a tic variable (&apos;week in this case) come from.  So in the example below, the body of the solve statement will be computed for each value of conversions&apos;.week. Explicit constraints are needed for a cumulative query because the inequality needed in the body of the solve statement prevents the where clause from serving as an implicit constraint.&lt;/p&gt;
&lt;pre&gt;import std::time::*

conversions := //conversions
conversions&apos; := conversions with { week: weekOfYear(conversions.timeStamp) }

solve &apos;week = conversions&apos;.week
{
week: &apos;week,
cumulativeConversions: count(conversions&apos;.week where conversions&apos;.week &lt;= &apos;week)
}&lt;/pre&gt;
&lt;p&gt;You can &lt;a href=&quot;https://labcoat.precog.com/?q=import+std%3A%3Atime%3A%3A%0A%0Aconversions+%3A%3D+%2F%2Fconversions%0Aconversions%27+%3A%3D+conversions+with+%7B+week%3A+weekOfYear%28conversions.%0AtimeStamp%29+%7D%0A%0Asolve+%27week+%3D+conversions%27.week%0A+%7B%0A+week%3A+%27week%2C%0A+cumulativeConversions%3A+count%28conversions%27.week+where+conversions%27.week+%3C%3D+%27week%29%0A+%7D&quot;&gt;try this query&lt;/a&gt; in Labcoat for yourself.&lt;/p&gt;
&lt;p&gt;If you need help with a query, just &lt;a href=&quot;http://support.precog.com/&quot;&gt;let us know&lt;/a&gt; and we&apos;ll be happy to help!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Top Precog Moments in 2012</title>
      <link>http://localhost:8080/blog/Top-Precog-Moments-in-2012/</link>
      <pubDate>Mon, 31 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Top-Precog-Moments-in-2012/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;p&gt;Happy (almost) New Year! We&apos;ve put together our most memorable moments from the past year. Thanks for your support and happy holidays from the whole team!&lt;b&gt;&lt;b&gt;&lt;br /&gt;
&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li dir=&quot;ltr&quot;&gt;Precog &lt;a href=&quot;http://techcrunch.com/2012/02/28/reportgrid-launches-precog-to-help-you-turn-big-data-into-smarter-apps/&quot;&gt;debuts&lt;/a&gt; at Strata Conference.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Raised &lt;a href=&quot;http://venturebeat.com/2012/05/22/precog-launches-easy-big-data-service-pulls-in-2m-funding-exclusive/&quot;&gt;funding&lt;/a&gt; from leading big data VC.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Officially launched &lt;a href=&quot;http://blog.precog.com/?p=152&quot;&gt;Labcoat&lt;/a&gt; (previously called IDE).&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;The Precog &lt;a href=&quot;http://precog.com/about/team&quot;&gt;team&lt;/a&gt; doubled in size from 8 to 16.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;For the &lt;a href=&quot;http://blog.precog.com/?p=154&quot;&gt;Summer Olympics&lt;/a&gt;, we added sample data and queries to Labcoat.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Precog in Public Beta &lt;a href=&quot;http://blog.precog.com/?p=171&quot;&gt;released&lt;/a&gt; at DataWeek.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Launched a &lt;a href=&quot;http://blog.precog.com/?p=184&quot;&gt;Real-Time Elections Analysis&lt;/a&gt; and partnered with AlchemyAPI.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Added a new blog section written by our Engineers: &lt;a href=&quot;http://blog.precog.com/?cat=20&quot;&gt;Precog.Copointed&lt;/a&gt;.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Teamed up with 10gen to launch &lt;a href=&quot;http://blog.precog.com/?p=197&quot;&gt;Precog for MongoDB&lt;/a&gt;.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Shared our &lt;a href=&quot;http://blog.precog.com/?p=203&quot;&gt;Precog Engineering Challenge&lt;/a&gt; with our community.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Launched a &lt;a href=&quot;http://www.precog.com/&quot;&gt;new website&lt;/a&gt; with use cases, developer center and more.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Celebrated the &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;12 Days of ReportGrid&lt;/a&gt; by sharing our favorite charts.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Attended 12 &lt;a href=&quot;http://precog.com/about/events&quot;&gt;events&lt;/a&gt; around the country and mentioned in over 20 &lt;a href=&quot;http://precog.com/about/news&quot;&gt;press articles&lt;/a&gt;!&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>An Inside Look at the 12 Days of ReportGrid</title>
      <link>http://localhost:8080/blog/An-Inside-Look-at-the-12-Days-of-ReportGrid/</link>
      <pubDate>Thu, 20 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/An-Inside-Look-at-the-12-Days-of-ReportGrid/</guid>
      <author></author>
      <description>&lt;p&gt;We recently launched &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;The 12 Days of ReportGrid&lt;/a&gt; to provide a fun overview of a sampling of embedded reporting options. In this post, we&apos;ll dig deeper into the technical details behind these beautiful, customizable visualizations. Here&apos;s the Sankey we&apos;ll be reproducing in a few short steps below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data First&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Without data, there is nothing to visualize, so lets start at the source. For the Sankey visualization, we are looking at the flow of clicks to conversions broken apart by gender. You can run this query in the &lt;a href=&quot;https://labcoat.precog.com/?q=clicks+%3A%3D+%2F%2Fclicks+%0Aconversions+%3A%3D+%2F%2Fconversions+%0A%0A%7Bhead%3A+%22male+clicks%22%2C+actions%3A+count%28clicks.timeStamp+where+clicks.customer.gender+%3D+%22male%22%29%2C+tail%3A+%22total+clicks%22%7D+union+%0A%7Bhead%3A+%22female+clicks%22%2C+actions%3A+count%28clicks.timeStamp+where+clicks.customer.gender+%3D+%22female%22%29%2C+tail%3A+%22total+clicks%22%7D+union+%0A%7Bhead%3A+%22male+conversions%22%2C+actions%3A+count%28conversions.timeStamp+where+conversions.customer.gender+%3D+%22male%22%29%2C+tail%3A+%22male+clicks%22%7D+union+%0A%7Bhead%3A+%22female+conversions%22%2C+actions%3A+count%28conversions.timeStamp+where+conversions.customer.gender+%3D+%22female%22%29%2C+tail%3A%22female+clicks%22%7D&quot;&gt;demo version of Labcoat&lt;/a&gt;. The basic idea is to begin by loading some clicks and conversions data. Then we union together the four objects we need for the visualization. Each object needs a label for the head and the tail so that the Sankey can determine how the data is related. The &quot;head&quot; is the where the data is going and the &quot;tail&quot; is where the data came from. So for example, in the first object, the &quot;total clicks&quot; is the tail that breaks into the smaller head of &quot;male clicks&quot;. The size of each node comes from the max of the sum of every tail and the sum of every head, but this default can be overridden to provide flexibility for situations in which you want to set the size of a node to an exact measurement. Note that the second object has the same tail and a different head. In addition to these structural labels, each object also contains an appropriate count.&lt;/p&gt;
&lt;pre&gt;clicks := //clicks
conversions := //conversions

{head: &quot;male clicks&quot;, actions: count(clicks.timeStamp where 
clicks.customer.gender = &quot;male&quot;), tail: &quot;total clicks&quot;} union
{head: &quot;female clicks&quot;, actions: count(clicks.timeStamp where 
clicks.customer.gender = &quot;female&quot;), tail: &quot;total clicks&quot;} union
{head: &quot;male conversions&quot;, actions: count(conversions.timeStamp where 
conversions.customer.gender = &quot;male&quot;), tail: &quot;male clicks&quot;} union
{head: &quot;female conversions&quot;, actions: count(conversions.timeStamp where 
conversions.customer.gender = &quot;female&quot;),  tail:&quot;female clicks&quot;}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Easy Integration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once we have a query that returns results we are interested in displaying, we can export the code and integrate it into HTML The download code option in labcoat (the downward pointing arrow in the query editor) provides numerous options for downloading queries (including an HTML template if desired). Note that the javascript option will automatically insert escape characters as needed. For example,&lt;/p&gt;
&lt;pre&gt;head: &quot;male clicks&quot;&lt;/pre&gt;
&lt;p&gt;becomes transformed into:&lt;/p&gt;
&lt;pre&gt;head: \&quot;male clicks\&quot;&lt;/pre&gt;
&lt;p&gt;This query can then be assigned into a variable and used in a query to power a ReportGrid visualization. Check out this gist to see the code. Lines 5-7 load the ReportGrid visualization library, along with its default styling options and the Precog JavaScript client library with a read-only API key. Lines 11 to 26 call the ReportGrid.sankey() function, with straightforward parameters.&lt;/p&gt;
&lt;p&gt;That&apos;s all you need to have an informative and insightful visualization embedded in your application. At a glance you can tell that male customers click at a significantly higher rate, but the conversion rates are quite similar.&lt;/p&gt;
&lt;p&gt;Check out the other visualizations used in the &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;12 days of ReportGrid&lt;/a&gt; or see examples of the entire &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid Visualization library!&lt;/a&gt; For a more complete explanation of how to use Precog and ReportGrid to create embedded reporting, check out this &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting&quot;&gt;How To guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>We want to give $500 to a Developer!</title>
      <link>http://localhost:8080/blog/We-want-to-give-$500-to-a-Developer/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/We-want-to-give-$500-to-a-Developer/</guid>
      <author></author>
      <description>&lt;p&gt;Precog is attending the &lt;a href=&quot;http://developerweek.com/&quot;&gt;DeveloperWeek Conference&lt;/a&gt; in San Francisco from February 1st through the 7th. As part of this event, we are also participating in the &lt;a href=&quot;http://www.developerweek.com/index/scholarships&quot;&gt;Scholarship Program&lt;/a&gt; and would like to give &lt;strong&gt;$500&lt;/strong&gt; to a developer who develops an app with Precog (a strong application will propose an interesting use of Precog&apos;s API-driven technology).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://data2.wufoo.com/forms/developerweek-2013-scholarship-application/&quot;&gt;Submit an application&lt;/a&gt; as a team of up to four people by January 18th and make sure to mention &quot;Precog&quot; when asked for the sponsored scholarship. The candidate will then work on the app during DeveloperWeek and will also have a chance to present their app on February 6th at DeveloperWeek!&lt;/p&gt;
&lt;p&gt;For an overview of the kinds of solutions Precog offers, check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/solutions/embeddable-reporting&quot;&gt;Embedded Reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/solutions/data-science&quot;&gt;Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/solutions/data-productization&quot;&gt;Productize Your Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For resources about how to accomplish these solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/developers&quot;&gt;Developer Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/products/labcoat/learn&quot;&gt;Tutorial Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.precog.com/developers/how-tos/embed-reporting&quot;&gt;Embedded Reporting How-To Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/account/login/&quot;&gt;Sign-up&lt;/a&gt; for a free Precog account today to get your creative juices flowing!&lt;/p&gt;
&lt;p&gt;We look forward to reviewing some great applications and &lt;a href=&quot;https://data2.wufoo.com/forms/developerweek-2013-scholarship-application/&quot;&gt;don&apos;t forget to apply&lt;/a&gt; for the Precog Scholarship before January 18th.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog-Copointed Analytics with MongoDB</title>
      <link>http://localhost:8080/blog/Precog-Copointed-Analytics-with-MongoDB/</link>
      <pubDate>Tue, 18 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-Analytics-with-MongoDB/</guid>
      <author></author>
      <description>&lt;p&gt;Here at &lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt;, our engineers have a wide variety of experience working with big data, statistical analysis, and database systems. We often get asked questions about our experiences with those systems, particularly relating to tips, tricks, and traps. One system that comes up pretty often is MongoDB, a NoSQL database that&apos;s widely used today for a number of reasons: it&apos;s easy to setup, it&apos;s performant, and it&apos;s a JSON document store that integrates well in the web tier. We like MongoDB a lot here at Precog. So much so that we&apos;ve engineered &lt;a href=&quot;mongodb&quot;&gt;Precog for MongoDB&lt;/a&gt;, a freely available product that allows the end-user to write sophisticated analytical queries in the &lt;a href=&quot;http://quirrel-lang.org/&quot;&gt;Quirrel language&lt;/a&gt; utilizing an existing MongoDB instance as the backing store. Before we discuss Quirrel and Precog for MongoDB, let&apos;s take a look at the built-in support for analytical queries in MongoDB.&lt;/p&gt;
&lt;p&gt;Mongo actually provides several methods for performing analytical queries, so let&apos;s start with the most basic and work our way up. For all of the examples in this query I&apos;ll be using our summer games data sets, downloadable from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/athletes&quot;&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/athletes&lt;/a&gt;&lt;/li&gt;&quot;&gt;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/athletes&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/london_medals&quot;&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/london_medals&lt;/a&gt;&lt;/li&gt;&quot;&gt;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/london_medals&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/historic_medals&quot;&gt;&lt;a href=&quot;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/historic_medals&lt;/a&gt;&lt;/li&gt;&quot;&gt;http://demo.precog.com/analytics/fs/?apiKey=5CDA81E8-9817-438A-A340-F34E578E86F8&amp;q=//summer_games/historic_medals&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Basic Aggregation Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Out of the box, Mongo&apos;s collections (roughly equivalent to a table in an RDBMS) have three methods for analytics. The first two, count and distinct, are fairly self-explanatory.&lt;/p&gt;
&lt;pre&gt;&gt; use summer_games
switched to db summer_games
&gt; db.london_medals.count()
1019
&gt; db.london_medals.count({&quot;Country&quot;:&quot;Croatia&quot;})
7
&gt; db.london_medals.distinct(&quot;Age group&quot;)
[
    &quot;26 to 30&quot;,
    &quot;31 to 40&quot;,
    &quot;21 to 25&quot;,
    &quot;20 and under&quot;,
    &quot;Over 40&quot;,
    &quot;31 to 35&quot;
]&lt;/pre&gt;
&lt;p&gt;The third operator that is exposed as a method on collections is group. Group is a bit more sophisticated in that it takes several JavaScript functions that perform the work of extracting data from input records, transforming that data, then aggregating and performing final transformations. Let&apos;s use the example of counting the number of athletes from each country, both male and female, to demonstrate the usage of group. For this query we&apos;ll use the athletes collection.&lt;/p&gt;
&lt;p&gt;The group method on collections takes several parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key &#8211; a query-style JSON object defining which fields of the input documents will define the group keys&lt;/li&gt;
&lt;li&gt;reduce &#8211; a JavaScript function that takes the current document and current results, aggregating the current document into those results and returning them&lt;/li&gt;
&lt;li&gt;initial &#8211; the initial JSON results document (used once per group key)&lt;/li&gt;
&lt;li&gt;keyf &#8211; a JavaScript function that can be used instead of the key param to calculate the group key&lt;/li&gt;
&lt;li&gt;cond &#8211; a query-style JSON object that filters which documents in the collection should be grouped&lt;/li&gt;
&lt;li&gt;finalize &#8211; a JavaScript function that is executed for each final result document before they&apos;re returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our example, we only need a key, reduce and initial parameter. To begin, we want to group by country, so we&apos;ll use a key that simply extracts the &quot;Countryname&quot; field:&lt;/p&gt;
&lt;pre&gt;{ &quot;Countryname&quot; : 1 }&lt;/pre&gt;
&lt;p&gt;Next, we want to count how many male and female athletes each country has, so our initial document will have zero counts for each:&lt;/p&gt;
&lt;pre&gt;{ &quot;male&quot; : 0, &quot;female&quot; : 0 }&lt;/pre&gt;
&lt;p&gt;Finally, our reduce function will increment the proper count on the result document based on whether the &quot;Sex&quot; field is &quot;M&quot; or not:&lt;/p&gt;
&lt;pre&gt;function(current,total) { 
  if (current.Sex == &quot;M&quot;) { 
    total.male += 1; 
  } else { 
    total.female += 1; 
  } 
}&lt;/pre&gt;
&lt;p&gt;Putting these pieces together, we have:&lt;/p&gt;
&lt;pre&gt;&gt; db.athletes.group({key: {&quot;Countryname&quot;:1}, 
  reduce: function(current,total) { 
    if (current.Sex == &quot;M&quot;) { total.male += 1; } else { total.female += 1; } 
  }, 
  initial: {&quot;male&quot;:0,&quot;female&quot;:0}})&lt;/pre&gt;
&lt;p&gt;giving us:&lt;/p&gt;
&lt;pre&gt;[
   {
   &quot;Countryname&quot; : &quot;India&quot;,
    &quot;male&quot; : 60,
    &quot;female&quot; : 23
    },
    {
   &quot;Countryname&quot; : &quot;Russia&quot;,
    &quot;male&quot; : 212,
    &quot;female&quot; : 229
    },
...&lt;/pre&gt;
&lt;p&gt;As you can see, the results are returned as an array of documents according to our key and reduce parameters. While group can be a very flexible and powerful tool, it&apos;s important to note it has several limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It cannot be used on sharded collections (there are, however, alternatives)&lt;/li&gt;
&lt;li&gt;The JavaScript interpreter in Mongo is currently single-threaded, meaning group will block other JavaScript evaluation while it runs&lt;/li&gt;
&lt;li&gt;The result size is limited by the maximum BSON document size (currently 16MB), and is also limited to 20k entries (10k in versions prior to 2.2)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While these limitations may prevent you from using the collection group method, its basic approach is essentially the same as the alternatives we&apos;ll discuss in the rest of this post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Map/Reduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Map/Reduce framework in MongoDB (MR for short) is similar to the collection group method, but it provides more flexibility in output, as well as the ability to operate on sharded collections (and distribute computation between shards). Let&apos;s take a look at our example of counting athletes again. In our particular example we want the full collection, but it&apos;s possible to utilize a query-style document for both filtering and sorting of the initial input documents.&lt;/p&gt;
&lt;p&gt;The first part of a MR query is the mapping function. The mapping function serves to both select the group key for aggregation as well as the actual values to be aggregated. Whereas in the collection group method we had a separate initial document and then a function that aggregated into that object, with MR each document can produce zero or more intermediate documents that are then aggregated in bulk. The primary work of the mapping function is to call emit() to generate the intermediate documents. For our example query, our mapping function looks like:&lt;/p&gt;
&lt;pre&gt;function() {
if (this.Sex == &quot;M&quot;)
    emit(this.Countryname, { &quot;male&quot; : 1, &quot;female&quot; : 0 });
else
    emit(this.Countryname, { &quot;male&quot; : 0, &quot;female&quot; : 1 });
}&lt;/pre&gt;
&lt;p&gt;In the mapping function the &quot;this&quot; keyword is redefined to be the current document. One interesting thing to note is that emit may be called zero or more times per input document. For example, if we had a document property that was an array, we could iterate over it in the mapping function, emitting a new intermediate document for each element in the array. Similarly, if we wanted to prevent a particular document from contributing to the aggregate, we simply omit the call to emit.&lt;/p&gt;
&lt;p&gt;Like the reduce parameter to collection grouping, the reduce function for MR performs the actual aggregation of data. Unlike the group method, the reduce function operates on chunks (arrays) of intermediate results. Additionally, the reduce function can be called multiple times on successive aggregation results, essentially using divide and conquer to aggregate the full results in multiple passes. Because of this behavior, the result of the reduce function must have the same structure as the intermediate documents. For our example, we need to sum up the totals of male and female counts for all inputs:&lt;/p&gt;
&lt;pre&gt;function(key, values) {
var aggr = { &quot;male&quot; : 0, &quot;female&quot; : 0 };
for (var index in values) {
   aggr.male += values[index].male;
   aggr.female += values[index].female;
} return aggr;}&lt;/pre&gt;
&lt;p&gt;Finally, MR needs to be told where to put the results of the aggregation. In addition to returning the result as an inline document like the group method (with the same size limitations), MR can also output its results to a collection using one of several modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace &#8211; Replace the contents of the collection with the new results&lt;/li&gt;
&lt;li&gt;merge &#8211; merge the results into the existing collection, replacing any documents with the same group key&lt;/li&gt;
&lt;li&gt;reduce &#8211; merge the results into the existing collection, running the reduce function on any new/old documents with the same key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, the reduce mode is very handy because it allows you to do incremental MR jobs on data that may change over time. You just need to utilize the query parameter to selected specific documents and avoid mapping/reducing the same input documents more than once. Our final MR call looks like:&lt;/p&gt;
&lt;pre&gt;var mapF = function() {
if (this.Sex == &quot;M&quot;)
    emit(this.Countryname, { &quot;male&quot; : 1, &quot;female&quot; : 0 });
else
   emit(this.Countryname, { &quot;male&quot; : 0, &quot;female&quot; : 1 });
}
var redF = function(key, values) {
var aggr = { &quot;male&quot; : 0, &quot;female&quot; : 0 };
for (var index in values) {
    aggr.male += values[index].male;
    aggr.female += values[index].female;
}
return aggr;
}
db.athletes.mapReduce(mapF, redF, { out : { inline : 1 }});&lt;/pre&gt;
&lt;p&gt;In addition to the limitations on inline output documents, MR also carries the limitations of JavaScript evaluation; namely, that it&apos;s single-threaded in the current engine. However, in sharded environments, the mongos process will distribute the map/reduce jobs out to each shard so that they can run in parallel, which may significantly improve the runtime of large jobs when you have a sufficient number of shards (and good balancing of the data across those shards).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Aggregation Framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In an attempt to alleviate some of the performance issues related to JavaScript evaluation in Map/Reduce and group, 10Gen has developed a new aggregation framework in MongoDB that operates in a similar manner to Map/Reduce, but is coded entirely in native code. Most significantly, this removes the single-thread global lock for JavaScript evaluation, allowing for significant performance gains. These gains, however, come at the expense of some flexibility.&lt;/p&gt;
&lt;p&gt;The aggregation framework works on &quot;pipelines&quot; of operations. The operations generally correspond to the parameters of a MR call with a few exceptions.&lt;/p&gt;
&lt;p&gt;First, the query/filter functionality is handled by a $match operator. It takes a query-style document that is used to filter the initial input set. There are two query clauses that are expressly disallowed in $match queries:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The $where clause, since this requires JavaScript evaluation&lt;/li&gt;
&lt;li&gt;Geospatial queries, due to implementation details&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Otherwise any valid query clause can be used. It&apos;s important to note that if your $match clause is the first operation in the pipeline, it can utilize indices to improve performance, or in the case of covering indices, to provide the actual input data. If, say, we only wanted to aggregate for athletes from countries with less than 10M citizens, we could use:&lt;/p&gt;
&lt;pre&gt;db.athletes.aggregate({ $match : { &quot;Population&quot; : { $lt : 10000000 } } })&lt;/pre&gt;
&lt;p&gt;The next operation that&apos;s generally used in pipelines is $project. The $project operator fulfils the functionality of the mapping function in MR queries, allowing you to select, compute, or create fields in the intermediate documents. The group key for a given document is determined by the value of the &quot;_id&quot; field. Selection of fields is fairly straightforward, using similar syntax to existence queries by using a 1 or 0 to indicate retaining or discarding a given field:&lt;/p&gt;
&lt;pre&gt;{ $project: { &quot;Countryname&quot; : 1 } }&lt;/pre&gt;
&lt;p&gt;Unlike MR, you don&apos;t have JavaScript available, so instead 10Gen has provided a new set of operators for computation of new fields if desired. Unfortunately, since the document controlling $project has to be a JSON document, the computation operators are a bit clunky and can be difficult to read. For example, if we had a medical record database and wanted to compute the BMI (Body Mass Index, height / (weight * weight)), we would have to do:&lt;/p&gt;
&lt;pre&gt;{ $project: {
 &quot;bmi&quot;: { $divide : [&quot;$weight&quot;, { $multiply : [ &quot;$height&quot;, &quot;$height&quot; ] } ] } }
}&lt;/pre&gt;
&lt;p&gt;Note that for arithmetic operators, the argument needs to be an array of two elements. Needless to say, this is one area that hopefully sees some improvement soon. Related to $project is $unwind, which can be used to flatten an array property into multiple documents (one for each value in the array). This is similar to how MR can call emit multiples times for array properties.&lt;/p&gt;
&lt;p&gt;Another interesting aspect of $project (and $group, which we&apos;ll discuss shortly) is that the aggregation framework provides field references via special string syntax. If a property value is a string beginning with &quot;$&quot;, the remainder of the value is used to reference the input document field of the same name. For example, because we want to group on the country name, we can set the value of &quot;_id&quot; via a reference:&lt;/p&gt;
&lt;pre&gt;{ $project: { &quot;_id&quot; : &quot;$Countryname&quot; } }&lt;/pre&gt;
&lt;p&gt;After matching and projecting our intermediate documents, we can finally aggregate them with the $group operator. The $group operator takes a JSON document that controls how each field in the inputs is computed. As with $project, the &quot;_id&quot; field is used to determine the grouping key. Unlike $project, &quot;_id&quot; is a required part of the grouping specification document. The $group operator has several different aggregations that can be performed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$sum, $min, $max, $avg &#8211; standard arithmetic ops&lt;/li&gt;
&lt;li&gt;$addToSet, $push &#8211; set and array construction&lt;/li&gt;
&lt;li&gt;String, boolean and date/time evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our particular example, we want counts based on the value of the &quot;Sex&quot; field, so we use the $cond, $eq, and $sum operators:&lt;/p&gt;
&lt;pre&gt;{ $group   : { &quot;_id&quot; : &quot;$Countryname&quot;,
           &quot;male&quot;   : { $sum : { $cond : [{ $eq : [&quot;M&quot;, &quot;$Sex&quot;]}, 1, 0] } },
          &quot;female&quot; : { $sum : { $cond : [{ $eq : [&quot;F&quot;, &quot;$Sex&quot;]}, 1, 0] } } }}&lt;/pre&gt;
&lt;p&gt;In addition to $match, $project, and $group, you can $sort intermediate and/or output results, and use $skip and $limit to provide pagination. For our example, our final aggregation pipeline looks like:&lt;/p&gt;
&lt;pre&gt;db.athletes.aggregate(
{ $project : { &quot;Countryname&quot; : 1, &quot;Sex&quot; : 1 }},
{ $group   : { &quot;_id&quot; : &quot;$Countryname&quot;,
           &quot;male&quot;   : { $sum : { $cond : [{ $eq : [&quot;M&quot;, &quot;$Sex&quot;]}, 1, 0] } },
           &quot;female&quot; : { $sum : { $cond : [{ $eq : [&quot;F&quot;, &quot;$Sex&quot;]}, 1, 0] } } }}
)&lt;/pre&gt;
&lt;p&gt;While the aggregation framework is powerful in its own right, there are some limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Currently, the only output option for aggregation is inline documents. This means that&lt;/li&gt;
&lt;li&gt;There is a 16MB limit on results&lt;/li&gt;
&lt;li&gt;You cannot perform incremental aggregation&lt;/li&gt;
&lt;li&gt;The computation operators for $project and $group, while covering many uses, don&apos;t have the full flexibility that JavaScript brings to MR&lt;/li&gt;
&lt;li&gt;$group and $sort have to operate entirely in memory. There are no provisions for spilling to disk, so if you have large datasets you may not be able to process them with the aggregation framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Precog for MongoDB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we&apos;ve shown so far in this post, MongoDB&apos;s current analytics support is flexible and powerful. However, formulating queries using that support is not always easy. That&apos;s where Precog for MongoDB comes in. Precog for MongoDB is free version of the Precog analytics engine, designed to utilize an existing Mongo store for its data. With Precog for MongoDB you can perform sophisticated analytics using the Quirrel query language, a language custom designed for statistical analysis. Precog for MongoDB bundles both the analytics engine as well as a self-contained, self-hosted version of our Labcoat IDE so that you can jump right into developing queries within a user-friendly interface.&lt;/p&gt;
&lt;p&gt;Before we get into the details of setup and running Precog for MongoDB, a disclaimer. Precog for MongoDB does not include the full Precog stack. Most significantly, while the Precog platform provides a flexible, capabilities-based authentication and authorization framework, Precog for MongoDB is restricted to using a single configurable API key that you provide. Similarly, Precog for MongoDB doesn&apos;t provide an ingest service, since data can be stored directly into Mongo. Lastly, due to technical limitations, we only recommend the product for exploratory data analysis. For developers interested in high-performance analytics on their MongoDB data, we recommend our cloud-based analytics solution and the MongoDB data importer, which can nicely complement existing MongoDB installations for analytic-intensive workloads.&lt;/p&gt;
&lt;p&gt;We assume in these instructions that you already have a running Mongo instance with data. The first step is to download the Precog for MongoDB distribution, found at &lt;a href=&quot;http://www.precog.com/mongodb&quot;&gt;http://www.precog.com/mongodb&lt;/a&gt;. Once you have the zipped file, simply unzip it to a folder of your choice. Inside the folder is a configuration file called config.cfg. If your mongo instance is not at localhost:27017, you&apos;ll need to edit the configuration to point to the instance&apos;s host and port. Similarly, you can configure mongo authentication (see the README.md file for details), and change your apiKey from the default.&lt;/p&gt;
&lt;p&gt;Once you&apos;ve prepped everything, simply run the precog.sh (unix) or precog.bat (Windows) script and the analytics engine and embedded Labcoat will start. The default location for Labcoat is &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;. Once you have Labcoat up and running you can start working on queries for your data!&lt;/p&gt;
&lt;p&gt;As a final example, the Quirrel query for our male/female participant count would be:&lt;/p&gt;
&lt;pre&gt;data := //summer_games/athletes
solve &apos;country
  countryData := data where data.Countryname = &apos;country
 { country: &apos;country,
   male: count(countryData where countryData.Sex = �M&apos;),
   female: count(countryData where countryData.Sex = �F&apos;) }&lt;/pre&gt;
&lt;p&gt;For tutorials and other information on Quirrel, please visit &lt;a href=&quot;https://www.precog.com/quirrel/introduction&quot;&gt;&lt;a href=&quot;https://www.precog.com/quirrel/introduction&lt;/a&gt;&lt;/p&gt;&quot;&gt;https://www.precog.com/quirrel/introduction&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;</description>
    </item>
    <item>
      <title>The 12 Days of ReportGrid</title>
      <link>http://localhost:8080/blog/The-12-Days-of-ReportGrid/</link>
      <pubDate>Fri, 14 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/The-12-Days-of-ReportGrid/</guid>
      <author></author>
      <description>&lt;p&gt;We&apos;ve gotten into the holiday spirit lately and decided to share our favorite ReportGrid charts in a fun campaign, &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;The 12 Days of ReportGrid&lt;/a&gt;. In a few hours, we created custom charts using the ReportGrid API and the Precog analysis platform. &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;Click on a present&lt;/a&gt; to reveal a new chart for each day.&lt;br /&gt;
&lt;img alt=&quot;&quot; src=&quot;https://lh4.googleusercontent.com/fm2DVS0CHcunsUn4fexMRO4zje3LvWer9Zuy6T5vjlEuZYPMn6OCvcghkf5MVvYQJGq0ToLASVmaZGtYodGK7v8jOzf5nVNxeDHN27gCapa-rXYdN-Q&quot; width=&quot;511px;&quot; height=&quot;444px;&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;ReportGrid&lt;/a&gt; visualization library is built in HTML5 and has a plethora of customizable options:&lt;/p&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;Hundreds of &lt;a href=&quot;http://api.reportgrid.com/css/colors/&quot;&gt;pre-made color palettes&lt;/a&gt; (if thats not enough, make your own)&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Labels, axes, rules and titles easy to change and format&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Customizable tooltips to display additional information about your data&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Style with CSS&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Many, many options to create unique visualizations&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;p&gt;To see how easy it is to get started, check out a variety of &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;code snippet examples&lt;/a&gt; that can be embedded directly into an HTML page. Just make sure to sign up on &lt;a href=&quot;http://www2.precog.com/12daysofreportgrid&quot;&gt;The 12 Days of ReportGrid&lt;/a&gt; page to get access to the free API.&lt;/p&gt;
&lt;p&gt;One way to make use of ReportGrid visualizations is to use Precog for your backend data analysis. &lt;a href=&quot;http://www.precog.com/products/precog&quot;&gt;Precog&lt;/a&gt; provides a unified solution to embedded reporting by hosting the data, providing an &lt;a href=&quot;https://labcoat.precog.com/&quot;&gt;interactive development environment&lt;/a&gt; to write queries in and making it easy to export query results into &lt;a href=&quot;http://www.precog.com/products/reportgrid&quot;&gt;beautiful visualizations&lt;/a&gt;.  For a step-by-step guide to quickly get embedded reporting in your application, see this &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting&quot;&gt;How To&lt;/a&gt; in our Developer Center.  If you need help at any point, just &lt;a href=&quot;http://support.precog.com/&quot;&gt;contact us&lt;/a&gt; and we&apos;ll assist with anything from the integration process to developing queries. Have fun charting!&lt;/p&gt;
&lt;p&gt;Posted by Franco Ponticelli&lt;/p&gt;</description>
    </item>
    <item>
      <title>Our Holiday Gift for You- Improved Developer Center</title>
      <link>http://localhost:8080/blog/Our-Holiday-Gift-for-You-Improved-Developer-Center/</link>
      <pubDate>Thu, 13 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Our-Holiday-Gift-for-You-Improved-Developer-Center/</guid>
      <author></author>
      <description>&lt;p&gt;If you&apos;ve been to our &lt;a href=&quot;http://www.precog.com/&quot;&gt;website&lt;/a&gt; this week, you might have noticed we launched a re-design and added more useful content. In addition to this launch, we also updated our &lt;a href=&quot;http://www.precog.com/developers&quot;&gt;Developer Center.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh3.googleusercontent.com/ppE5j8IzBIbihc9FLLsoRlc4FIzl5w06WVaaWlOcmiqBYCQ5VjreOe3DkeH4ST96_JOOGihFef3CF-cwcZStGLMbRJy_kgrgUCF2tAKek0txtE6s_wU&quot; width=&quot;609px;&quot; height=&quot;393px;&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To start, we added a search bar in the upper right-hand corner so you can immediately find what you&apos;re looking for! Type in a keyword such as &lt;a href=&quot;http://www2.precog.com/s/17892/e1369a4926353556f972788c89f928c2?q=security&amp;noRecord=true&quot;&gt;&quot;security&quot;&lt;/a&gt;and see how easy it is to find the articles that cover your topic.&lt;/p&gt;
&lt;p&gt;In addition to easier navigation, we&apos;ve also added some great additional content.  The first &lt;a href=&quot;http://www.precog.com/developers/how-tos/embed-reporting&quot;&gt;How To&lt;/a&gt; is a step-by-step guide about how to get started with Precog and quickly get a dashboard embedded in your application.  Documentation for the &lt;a href=&quot;http://www.precog.com/client-libraries/ruby&quot;&gt;ruby&lt;/a&gt;, &lt;a href=&quot;http://www.precog.com/client-libraries/python&quot;&gt;python &lt;/a&gt;and &lt;a href=&quot;http://www.precog.com/client-libraries/java&quot;&gt;java&lt;/a&gt; client libraries have also been added.  You can also check out how to try &lt;a href=&quot;http://www.precog.com/precog-on-mongodb&quot;&gt;Precog for MongoDB&lt;/a&gt;, our open source offering that uses MongoDB as a backend instead of our cloud-based solution.&lt;/p&gt;
&lt;p&gt;Check out the updated &lt;a href=&quot;http://precog.com/developers&quot;&gt;Developer Center&lt;/a&gt; today!&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Relate Operator</title>
      <link>http://localhost:8080/blog/The-Relate-Operator/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/The-Relate-Operator/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a id=&quot;internal-source-marker_0.8613732042407144&quot; href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt; supports &lt;a href=&quot;http://quirrel-lang.org/&quot;&gt;Quirrel&lt;/a&gt; a statistically-oriented query language to analyze data.  Quirrel is well suited for ad-hoc analysis.  Check out this &lt;a href=&quot;http://www.precog.com/quirrel/resources&quot;&gt;reference guide&lt;/a&gt;for the current library of built in functions.  The &lt;a href=&quot;http://www.precog.com/products/labcoat/learn&quot;&gt;tutorial video&lt;/a&gt; below provides some background on Quirrel&apos;s set-based nature and illustrates how to use therelate operator in this context.&lt;/p&gt;
&lt;p&gt;Data in Precog is stored in different paths for a variety of reasons.  One reason is to capture and store different kinds of events in different places.  For example, you may have a path that ends in /clicks and another that ends in /impressions.  When you want to do mathematical operations on both of these paths, you&apos;ll often need to use the relate operator.&lt;/p&gt;
&lt;p&gt;Mathematical operations in Quirrel cannot be performed on unrelated sets.  Mathematical operations in Quirrel are done with pair-wise matching and if the sets aren&apos;t related, Quirrel cannot match them up appropriately.  The relate operator allows you to relate sets and perform operations on unrelated sets.  For more information on this powerful operator, check out the tutorial video below:&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&quot;YouTube video player&quot; src=&quot;http://www.youtube.com/embed/7Yyh3mwA2tY?wmode=transparent&quot; height=&quot;300&quot; width=&quot;400&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How-To Embed Reporting in your App</title>
      <link>http://localhost:8080/blog/How-To-Embed-Reporting-in-your-App/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/How-To-Embed-Reporting-in-your-App/</guid>
      <author></author>
      <description>&lt;p&gt;One common use-case for Precog customers is to provide reporting functionality to their customers.  Precog focuses on making this process simple and inexpensive.  This &lt;a href=&quot;http://precog.com/how-tos/embed-reporting&quot;&gt;How-To Article in our Developer Center&lt;/a&gt; provides a step-by-step guide to embed analytics and charts into an online dashboard. Each step comes with examples and code snippets to make it easy to get started building dashboards with Precog today!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://precog.com/how-tos/embed-reporting&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh6.googleusercontent.com/XM1fp43NTxpnbxqfWWKaEQrpOqWDxFvPjV7B7ZEr8-Xaxv_z1rwuOGxz9yjfx7W--CM23avBSuNXbchHToTiyfTED2udOBJt9cZ9_uAmw2Oq94o_QQ0&quot; width=&quot;362px;&quot; height=&quot;271px;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Step 1: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step1:CreateaPrecogAccount&quot;&gt;Create a Precog Account&lt;/a&gt;&lt;br /&gt;
Step 2: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step2:OrganizeYourData&quot;&gt;Organize Your Data&lt;/a&gt;&lt;br /&gt;
Step 3: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step3:CreateNewAPIKeysforYourCustomers&quot;&gt;Create New API Keys for Your Customers&lt;/a&gt;&lt;br /&gt;
Step 4: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step4:InstrumentingYourApplication&quot;&gt;Instrument Your Application&lt;/a&gt;&lt;br /&gt;
Step 5: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step5:BackImportHistoricalData&quot;&gt;Back Import Historical Data&lt;/a&gt;&lt;br /&gt;
Step 6:&lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step6:UseLabcoattoAnalyzeData&quot;&gt; Use Labcoat to Analyze Data&lt;/a&gt;&lt;br /&gt;
Step 7: &lt;a href=&quot;http://www.precog.com/how-tos/embed-reporting#Step7:CreateandEmbedaReportingDashboard&quot;&gt;Create and Embed a Reporting Dashboard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch this &lt;a href=&quot;http://www.youtube.com/watch?v=mb4qtwbWmwo&amp;feature=youtu.be&quot;&gt;overview video&lt;/a&gt; to get started:&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&quot;YouTube video player&quot; src=&quot;http://www.youtube.com/embed/mb4qtwbWmwo?wmode=transparent&quot; height=&quot;300&quot; width=&quot;400&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vote for Precog in the DeveloperWeek Awards</title>
      <link>http://localhost:8080/blog/Vote-for-Precog-in-the-DeveloperWeek-Awards/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Vote-for-Precog-in-the-DeveloperWeek-Awards/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=86&quot; rel=&quot;attachment wp-att-86&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-86&quot; alt=&quot;34&quot; src=&quot;/blog/images/34.png&quot; width=&quot;378&quot; height=&quot;79&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.developerweek.com/&quot;&gt;DeveloperWeek Conference&lt;/a&gt; (same folks who put on DataWeek) is on the calendar for next February 2-7, 2013. We were proud to be nominated for three categories in their Top Innovator Awards: &lt;strong&gt;Analytics-as-a-Service&lt;/strong&gt;, &lt;strong&gt;App Analytics Tools&lt;/strong&gt;, and &lt;strong&gt;Big Data Technologies&lt;/strong&gt;. The public voting is now open and &lt;a href=&quot;http://www.developerweek.com/index/companydetails/companyid/34&quot;&gt;here&#8217;s your chance&lt;/a&gt; to help Precog win an award. &lt;a href=&quot;http://www.developerweek.com/index/companydetails/companyid/34&quot;&gt;Please go to this page&lt;/a&gt; to cast your vote today! Crowd voting is open until January 7, 2013.&lt;/p&gt;
&lt;p&gt;In addition to the Top Innovator Awards, we are also speaking in the Big Data Track at the conference. &lt;a href=&quot;http://www.developerweek.com/index/profile/userid/118&quot;&gt;John A. De Goes&lt;/a&gt;, our CEO/Founder will talk on Wednesday, February 6th about &lt;a href=&quot;http://www.developerweek.com/index/allschedule/dateid/1360130400/weekday/1&quot;&gt;Quirrel and R for Dummies&lt;/a&gt; and on a panel called &lt;a href=&quot;http://www.developerweek.com/index/conferenceschedule/event/13&quot;&gt;Developing with Big Analytics and Visualization Tools&lt;/a&gt;. They are planning a lot of events and excellent sessions for Developers so be sure to &lt;a href=&quot;http://www.developerweek.com/index/registration&quot;&gt;register for a pass&lt;/a&gt;! We hope to see you in San Francisco in February.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog-Copointed The Abstract Future</title>
      <link>http://localhost:8080/blog/Precog-Copointed-The-Abstract-Future/</link>
      <pubDate>Tue, 27 Nov 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Copointed-The-Abstract-Future/</guid>
      <author></author>
      <description>&lt;p class=&quot;c2&quot;&gt;As you might know, we have a talented team of engineers here at Precog who are active on Twitter but sometimes 140 characters just isn&#8217;t enough to express their opinions. So, we&#8217;ve added a monthly blog post dedicated to our Engineers called &lt;strong&gt;Precog.Copointed&lt;/strong&gt;. Every month you can read a post authored from one of our engineers that covers topics from software architecture to low-level optimization on the JVM, algorithms, open source software, and maybe even systems administration. Enjoy!&lt;/p&gt;
&lt;hr /&gt;
&lt;p class=&quot;c2&quot;&gt;In our &lt;a href=&quot;blog-precog-2/entry/existential-types-ftw&quot;&gt;last blog post&lt;/a&gt; on Precog development, Daniel wrote about how we use the Cake Pattern to structure our codebase and to leave the implementation types abstract as long as possible. As he showed in that post, this is an extremely powerful concept; by keeping a type existential, values of that type remain opaque to any modules that aren&apos;t &quot;aware&quot; of the eventual type chosen, and so are prevented by the compiler from breaking encapsulation boundaries.&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;In today&apos;s post, we&apos;re going to extend this notion beyond types to handle type &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;constructors&lt;/span&gt;&lt;span&gt;, and in so doing will show a mechanism that allows us to switch out entire models of comput&lt;/span&gt;&lt;span&gt;ation.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;If you&apos;ve been working with Scala for any length of time, you&apos;ve undoubtedly heard the word &quot;monad&quot; floating around in one context or another, perhaps in a discussion about the syntactic sugar provided by Scala&apos;s �for&apos; keyword or a blog post discussing how the Option type can be used to &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://www.codecommit.com/blog/scala/the-option-pattern&quot;&gt;avoid the pitfalls&lt;/a&gt;&lt;/span&gt;&lt;span&gt; of null references. While a significant amount of discussion of monads in Scala focuses on the &quot;container&quot; types, a few types common in the Scala ecosystem display a more interesting facet of monadic composition � &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;delimited computation&lt;/span&gt;&lt;span&gt;. While all monadic types exhibit this in composition, perhaps &lt;/span&gt;&lt;span&gt;the most commonly used &lt;/span&gt;&lt;span&gt;monadic type in Scala that exemplifies this sort of use directly is &lt;/span&gt;&lt;span&gt;akka.dispatch.Future&lt;/span&gt;&lt;span&gt;, (which is scheduled to replace Scala&apos;s current Future interface in the standard library in Scala 2.10) which encodes asynchronous computation.  It embodies the aspect of monadic composition that we&apos;re most concerned with here by providing a flexible way to order the steps of a computation.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;I&apos;d like to step back a moment here and state that this post isn&apos;t intended to function as a monad tutorial; there are numerous (perhaps &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://www.codecommit.com/blog/ruby/monads-are-not-metaphors&quot;&gt;too many&lt;/a&gt;&lt;/span&gt;&lt;span&gt;!) &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://james-iry.blogspot.com/2007/09/monads-are-elephants-part-1.html&quot;&gt;articles&lt;/a&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://apocalisp.wordpress.com/2011/07/01/monads-are-dominoes/&quot;&gt;about&lt;/a&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/&quot;&gt;monads&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and their relevance to programming in Scala exist elsewhere. If you&apos;re new to the concept it will be useful for you to take advantage of one or more of these resources before continuing here. It is, however, important to point out at first that the use of monads in Scala, while pervasive (as evidenced by the presence of &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://debasishg.blogspot.com/2008/03/monads-another-way-to-abstract.html&quot;&gt;�for&apos; as syntactic sugar for monadic composition&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) is somewhat idiosyncratic in that the Scala standard libraries actually provide no Monad type. For this, we have to look outside of the standard library to the excellent scalaz project. Scalaz&apos;s encoding of the monadic abstraction relies upon the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;implicit typeclass&lt;/span&gt;&lt;span&gt; pattern. The base Monad type is shown here, simplified, for reference:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;trait Monad[M[&lt;em&gt;]] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  def point[A](a: =&gt; A): M[A]&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  def bind[A, B](m: M[A])(f: A =&gt; M[B]): M[B]&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  def map[A, B](m: M[A])(f: A =&gt; B): M[B] = bind(m)(a =&gt; point(f(a))) &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;You&apos;ll note that the Monad trait is not parameterized by a specific type, but instead a &lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://debasishg.blogspot.com/2009/01/higher-order-abstractions-in-scala-with.html&quot;&gt;type constructor&lt;/a&gt;&lt;/span&gt; of one argument. The methods defined inside of Monad are then parametrically polymorphic, which means that they must provide a specific type to be inserted into the &quot;hole&quot; at the invocation point. This will be important later, when we talk about how to actually take advantage of this abstraction.&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;Scalaz provides implementations of this type for most of the monadic types in the Scala standard library, as well as several more sophisticated monadic types, which we&apos;ll return to in a moment. For now, however let&apos;s talk a bit about Akka&apos;s Futures.&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;An Akka Future represents a computation whose value is produced asynchronously, and which may fail. Also, as I noted before, akka.dispatch.Future is monadic; that is, it is a type for which the Monad trait above can be trivially implemented and which satisfies the &lt;span class=&quot;c6&quot;&gt;monad laws&lt;/span&gt;, and so it provides an extremely useful primitive for composing asynchronous computations without all sorts of tedious mucking about with manual management of threads and shared mutable state. At Precog, we use Futures extensively, both in a direct fashion and to allow us a composable way to interact with subsystems that are implemented atop Akka&apos;s actor framework. Futures are arguably one of the best tools we have for reining in the complexity of asynchronous programming, and so &lt;span class=&quot;c5&quot;&gt;our&lt;/span&gt; many of our early versions of APIs in our codebase exposed Futures directly. For example, here&apos;s a snippet of one of our internal APIs, which follows the Cake pattern as described previously.&lt;/p&gt;
&lt;p&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;trait DatasetModule {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  type Dataset &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  trait DatasetLike {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;strong&gt; The members of this dataset will be used to determine what sets to&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        load, and the resulting sets will be unioned together */&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def load: Future[Dataset]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;/strong&gt; Sorts the dataset by the specified value function. &lt;em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def sort(sortBy: /&lt;/em&gt;&#8230;&lt;em&gt;/): Future[Dataset]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /** Retains a prefix of this dataset. &lt;/em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def take(size: Int): Dataset&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;em&gt;* Map members of the dataset into the A type using the specified value &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        function, then combine using the resulting monoid &lt;/em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def reduce[A: Monoid](mapTo: /&lt;em&gt;&#8230;&lt;/em&gt;/): Future[A]&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  }&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;The Dataset type here is something of a strawman, but is loosely representative of the type that we use internally to represent an intermediate result of a computation &#8211; a lazy data structure with a number of operations that can be used to manipulate it, some of which may involve actually evaluating a function over the entire dataset and which may involve I/O, distributed evaluation, and asynchronous computation. Based on this interface, it&apos;s easy to see that evaluation of some query with respect to a dataset might involve a load, a sort, taking a prefix, and a reduction of that prefix. Moreover, such an evaluation will not rely upon anything except the monadic nature of Future to compose its steps. What this means is that from the perspective of the consumer of the DatasetModule interface, the only aspect of Future that we&apos;re relying upon is the ability to order operations in a statically checked fashion; the sequencing, rather than any particular semantics related to Future&apos;s asynchrony, is the relevant piece of information provided by the type. So, the following generalization becomes natural:&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;trait DatasetModule[M[+&lt;/em&gt;]] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  type Dataset&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  implicit def M: Monad[M]&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  trait DatasetLike {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;strong&gt; The members of this dataset will be used to determine what sets to&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        load, and the resulting sets will be unioned together */&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def load: M[Dataset]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;/strong&gt; Sorts the dataset by the specified value function. &lt;em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def sort(sortBy: /&lt;/em&gt;&#8230;&lt;em&gt;/): M[Dataset]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /** Retains a prefix of this dataset. &lt;/em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def take(size: Int): Dataset&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    /&lt;strong&gt; Map members of the dataset into the A type using the specified value &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        function, then combine using the resulting monoid &lt;em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def reduce[A: Monoid](mapTo: /&lt;/em&gt;&#8230;*/): M[A]&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;and, of course, down the road some concrete implementation of DatasetModule will refine the type constructor M to be Future:&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;/&lt;/strong&gt; The implicit ExecutionContext is necessary for the implementation of &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    M.point &lt;em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;class FutureMonad(implicit executor: ExecutionContext) extends Monad[Future] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  override def point[A](a: =&gt; A): Future[A] = Future { a }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  override def bind[A, B](m: Future[A])(f: A =&gt; Future[B]): Future[B] = &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    m flatMap f&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;abstract class ConcreteDatasetModule(implicit executor: ExecutionContext) &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;extends DatasetModule[Future] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  val M: Monad[Future] = new FutureMonad &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c0&quot;&gt;In practice, we may actually leave M abstract until &quot;the end of the universe.&quot; In the Precog codebase, the M type will frequently represent the bottom of a stack of &lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://www.google.com/url?q=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.2605&amp;rep=rep1&amp;type=pdf&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNGRSdU_Hqlt5jrUfkaG1Ga41BUB3Q&quot;&gt;monad transformers &lt;/a&gt;&lt;/span&gt;including StateT, StreamT, EitherT and others that the actual implementation of the Dataset type depends upon.&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;This generalization has numerous benefits. First, as with the previous examples of our use of the Cake pattern, consumers of the DatasetModule trait are completely and statically insulated from irrelevant details of the implementation type. An important such consumer is a test suite. In a test, we probably don&apos;t want to worry about the fact that the computation is being performed asynchronously; all that we care about is that we obtain a correct result. If our M is in fact at the bottom of a transformer stack, &lt;/span&gt;&lt;span&gt;we can trivially replace it with the &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;https://github.com/scalaz/scalaz/blob/scalaz-seven/core/src/main/scala/scalaz/Id.scala&quot;&gt;identity monad&lt;/a&gt; &lt;/span&gt;&lt;span&gt;and use the &quot;copointed&quot; nature of this monad (the ability to &quot;extract&quot; a value from the monadic context). This allows us to build a similarly generic test harness:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;/** Copointed is available from scalaz as well; reproduced here for clarity &lt;/em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;trait Copointed[M[&lt;em&gt;]] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  /&lt;em&gt;* Extract and return the value from the enclosing context. &lt;/em&gt;/&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  def copoint[A](m: M[A]): A&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;trait TestDatasetModule[M[+&lt;/em&gt;]] extends DatasetModule {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  implicit def M: Monad[M] with Copointed[M]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  //&#8230; utilities for test dataset generation, stubbing load/sort, etc.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;/strong&gt;For most cases, we&apos;ll use the identity monad for testing. Suppose that we&apos;re testing the piece of functionality described earlier, which has computed a result from the combination of a load, a sort, take and reduce. The test framework need never consider the monad that it&apos;s operating in.&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;import scalaz.&lt;em&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;import scalaz.syntax.monad.&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;import scalaz.syntax.copointed.&lt;em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;class MyEvaluationSpec extends Specification {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  val module = new TestDatasetModule[Id] with ConcreteDatasetModule[Id] { &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    val M = Monad[Id] // the monad for Id is copointed in Scalaz.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  &lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  &quot;evaluation&quot; should {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    &quot;determine the correct result for the load/sort/take/reduce case&quot; in {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;      val loadFrom: module.Dataset = //&#8230;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;      val expected: Int = //&#8230;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;      val result = for {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        ds&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        sorted &#8211; ds.sortBy(mySortFun)&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        prefix = sorted.take(10)&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;        value &#8211; prefix.reduce[Int]myCountFunc)&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;      } yield value&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;      result.copoint must&lt;/em&gt;== expected&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;In the case that we have a portion of the implementation that actually depends upon the specific monadic type (say, for example, that our sort implementation relies on Akka actors and the &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;http://doc.akka.io/docs/akka/2.0.4/scala/actors.html#Ask__Send-And-Receive-Future&quot;&gt;&quot;ask&quot; pattern&lt;/a&gt;&lt;/span&gt;&lt;span&gt; under the hood, so that we&apos;re using Futures) we can simply encode this in our test in a straightforward fashio&lt;/span&gt;&lt;span&gt;n:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;strong id=&quot;internal-source-marker_0.2908493096474558&quot; style=&quot;font-family: Courier; font-size: medium; font-weight: normal;&quot;&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;abstract class TestFutureDatasetModule(implicit executor: ExecutionContext)&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;extends TestDatasetModule[Future] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  def testTimeout: akka.util.Duration&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  object M extends FutureMonad(executor) with Copointed[Future] {&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;    def copoint[A](m: Future[A]): A = Await.result(m, testTimeout)&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;  }&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: 15px; font-family: Consolas; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;Future is, of course, not properly copointed (since Await can throw an exception) but for the purposes of testing (and testing exclusively) this construction is ideal. As before, we get exactly the type that we need, statically determined, at exactly the place that we need it.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;c2&quot;&gt;&lt;span&gt;In practice, we&apos;ve found that abstracting away the particular monad that our code is concerned with has aided tremendously with keeping the concerns of different parts of our codebase well isolated, and ensuring that we&apos;re simply not able to sidestep the sequencing requirements that are necessary to make a large, functional codebase work together as a coherent whole. As an added benefit, many parts of our application that were not initially designed thinking in terms of parallel execution are able to execute concurrently. For example, in many cases we&apos;ll be computing a List[M[...]] and then using the &quot;sequence&quot; function provided by &lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;&lt;a class=&quot;c3&quot; href=&quot;https://github.com/scalaz/scalaz/blob/scalaz-seven/core/src/main/scala/scalaz/Traverse.scala&quot;&gt;scalaz.Traverse&lt;/a&gt;&lt;/span&gt;&lt;span&gt; to turn this into an M[List[...]] &#8211; and when M is future, each element may be computed in parallel, with the final sequenced result becoming available only when all the computations to produce the members of the list are complete. And, ultimately, even this merely touches the surface of a deep pool of composing our computation that is made possible by making this abstraction.&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog + MongoDB User Unite at Meetup</title>
      <link>http://localhost:8080/blog/Precog-MongoDB-User-Unite-at-Meetup/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-MongoDB-User-Unite-at-Meetup/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=81&quot; rel=&quot;attachment wp-att-81&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-81&quot; alt=&quot;91541192&quot; src=&quot;/blog/images/91541192.jpeg&quot; width=&quot;400&quot; height=&quot;95&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;blog-precog-2/entry/teaming-up-with-10gen-to-bring-precog-to-mongodb&quot;&gt;Earlier this month&lt;/a&gt;, we teamed up with 10gen to launch a &lt;a href=&quot;mongodb&quot;&gt;Precog implementation of MongoDB&lt;/a&gt;. So far, the response has been outstanding and we want to do everything we can to support the users. We&#8217;ve added a Precog for MongoDB section to our &lt;a href=&quot;developers#mongodb&quot;&gt;Developer Center&lt;/a&gt; and our support team has been responding to emails, but we want to do more. So, we&#8217;ve put together an event in Colorado!&lt;/p&gt;
&lt;p&gt;Since we&#8217;re fortunate to be located in Boulder, we&#8217;d like to take advantage of being surrounded by many developers and the &lt;a href=&quot;http://www.meetup.com/boulder-denver-mongo/&quot;&gt;MongoDB Community&lt;/a&gt;! Everyone is invited to the first &lt;a href=&quot;http://www.meetup.com/boulder-denver-mongo/events/91541192/&quot;&gt;Precog &amp; MongoDB Meetup&lt;/a&gt; in Boulder! Here are the details:&lt;/p&gt;
&lt;h2&gt;Skyrocket your Analytics on MongoDB with Precog&lt;/h2&gt;
&lt;p&gt;Monday, December 10 at 7pm&lt;br /&gt;
Exact location is TBD (somewhere in Boulder)&lt;br /&gt;
&lt;a href=&quot;http://www.meetup.com/boulder-denver-mongo/events/91541192/&quot;&gt;Sign up now!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Join us for drinks, an interactive dialogue, and to learn more about how to do deep analytics on your existing MongoDB database. We hope to see you there and &lt;a href=&quot;http://www.meetup.com/boulder-denver-mongo/events/91541192/&quot;&gt;don&#8217;t forget to RSVP&lt;/a&gt; and bring your friends for a fun night with the Precog team and MongoDB community!&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Experience as a Precog Engineer</title>
      <link>http://localhost:8080/blog/My-Experience-as-a-Precog-Engineer/</link>
      <pubDate>Fri, 16 Nov 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/My-Experience-as-a-Precog-Engineer/</guid>
      <author></author>
      <description>&lt;p&gt;I&#8217;ve been working at Precog for three months, today. I was first contacted by our &lt;a href=&quot;blog-precog-2/entry/do-you-have-what-it-takes-to-be-a-precog-engineer&quot;&gt;overenthusiastic CEO&lt;/a&gt; because of my work on &lt;a href=&quot;http://roy.brianmckenna.org/&quot;&gt;Roy&lt;/a&gt; and other projects:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;You have a background in functional programming, Scala, and programming language design and implementation, which is a great fit for our entire front-end. You are also an active open source contributor, like many of the engineers on our team.&quot; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What&apos;s it like to work with the &lt;a href=&quot;https://github.com/jdegoes/blueeyes&quot;&gt;creator of BlueEyes&lt;/a&gt;, a &lt;a href=&quot;https://github.com/nuttycom/scalaz&quot;&gt;contributor to Scalaz&lt;/a&gt; and the &lt;a href=&quot;https://twitter.com/djspiewak&quot;&gt;creator of ActiveObjects&lt;/a&gt;? Awesome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Challenge &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There isn&#8217;t a huge supply of language geeks so my Precog Challenge was specially crafted. My program was to take an AST for a query language that could do counts, sums, averages, and standard deviations. The AST would have to be split and distributed to a cluster.&lt;/p&gt;
&lt;p&gt;I tried implementing it a few days later &#8211; it was way too easy. Each operation could be implemented using a simple monoid.&lt;/p&gt;
&lt;p&gt;Turns out John simplified the problem too much. He added a couple more operations to make it harder (median and mode).&lt;/p&gt;
&lt;p&gt;I went away and read some papers on query distribution on a couple of nights then eventually came back to complete the problem in 456 lines. I spent less than 10 hours on coding the final project, a chunk of it spent on getting SBT and Specs2 to work properly (&lt;a href=&quot;https://twitter.com/PLT_Hulk/status/268520848451833857&quot;&gt;PLT_Hulk&lt;/a&gt; was right). That&#8217;s over one minute per line of code.&lt;/p&gt;
&lt;p&gt;I&#8217;ve published my solution on &lt;a href=&quot;https://bitbucket.org/puffnfresh/querylang&quot;&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boulder &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I moved to Boulder from Sydney, Australia. Australians are lucky if they want to work in the U.S. &#8211; it only took a couple of weeks to get authorised to work here. I worked from Brisbane for a month while I got rid of all my things.&lt;/p&gt;
&lt;p&gt;Finding a place took about two weeks of looking on Craigslist. Here is my view in the morning:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=75&quot; rel=&quot;attachment wp-att-75&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-75&quot; alt=&quot;b2ap3_thumbnail_2012-10-07-11.00.13&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/b2ap3_thumbnail_2012-10-07-11.00.13.jpeg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=76&quot; rel=&quot;attachment wp-att-76&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-76&quot; alt=&quot;b2ap3_thumbnail_2012-11-08-00.35.56&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/b2ap3_thumbnail_2012-11-08-00.35.56.jpeg&quot; width=&quot;400&quot; height=&quot;267&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After about a month of being here, Daniel Spiewak rented a car and took me to &lt;a href=&quot;http://www.nps.gov/romo/index.htm&quot;&gt;Rocky Mountain National Park&lt;/a&gt;. It was crazy to go from rock to snow in 10 minutes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=77&quot; rel=&quot;attachment wp-att-77&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-77&quot; alt=&quot;b2ap3_thumbnail_2012-10-14-09.45.15&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/b2ap3_thumbnail_2012-10-14-09.45.15.jpeg&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=78&quot; rel=&quot;attachment wp-att-78&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-78&quot; alt=&quot;b2ap3_thumbnail_2012-10-15-02.44.35&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/b2ap3_thumbnail_2012-10-15-02.44.35.jpeg&quot; width=&quot;400&quot; height=&quot;267&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That is something you don&#8217;t see in Australia.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Work &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#8217;ve found the work here to be &lt;em&gt;extremely&lt;/em&gt; challenging. The Precog Platform didn&#8217;t seem like a lot at first but it&#8217;s pretty intimidating upon closer inspection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-oriented statistical language (Quirrel)
&lt;ul&gt;
&lt;li&gt;Generalized parser (GLL)&lt;/li&gt;
&lt;li&gt;3 proposed type systems&lt;/li&gt;
&lt;li&gt;Compiler to custom bytecode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bytecode evaluator&lt;/li&gt;
&lt;li&gt;DAG rewriting&lt;/li&gt;
&lt;li&gt;Table querying and manipulation
&lt;ul&gt;
&lt;li&gt;Highly efficient&lt;/li&gt;
&lt;li&gt;Distributed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data storage&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;JSON importing
&lt;ul&gt;
&lt;li&gt;Fault tolerant&lt;/li&gt;
&lt;li&gt;Different datastore backends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API
&lt;ul&gt;
&lt;li&gt;Web server (BlueEyes)&lt;/li&gt;
&lt;li&gt;JSON parsing (BlueEyes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because this is big data, all of the above needs to be as &lt;em&gt;insanely&lt;/em&gt; fast. It&#8217;s definitely not the easiest thing I&#8217;ve worked on.&lt;/p&gt;
&lt;p&gt;Luckily, I have mathematicians and performance gurus to work with. Being able to pair with engineers that have skills I&#8217;ll never be able to attain is the best part of the job. I&#8217;m having fun and being amazed by what people do here. That is why I&#8217;m at Precog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Precog Engineering Challenge</title>
      <link>http://localhost:8080/blog/The-Precog-Engineering-Challenge/</link>
      <pubDate>Mon, 12 Nov 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/The-Precog-Engineering-Challenge/</guid>
      <author></author>
      <description>&lt;p&gt;The Precog engineering team has a legendary reputation in some circles. &lt;a href=&quot;http://www.precog.com/about/team&quot;&gt;Members of the engineering team&lt;/a&gt; were well-known before joining Precog. Most were open source contributors, book authors, language developers, speakers, and blog writers &#8212; highly-respected software engineers and computer scientists.&lt;/p&gt;
&lt;p&gt;Here at Precog, we&apos;ve worked hard to build an engineering culture that provides both huge challenges and great rewards to our team. Engineering here is a highly collaborative endeavor, and getting to work on some of the hardest problems in 21st century software development with such a bright and diverse group of people is a genuine pleasure.&lt;/p&gt;
&lt;h1&gt;It&#8217;s Not Easy Being a Precog&lt;/h1&gt;
&lt;p&gt;Every member of the Precog engineering team, no matter how accomplished or intelligent, has been challenged by the nature and the scope of the work here at Precog. We&apos;re building a full-stack, hosted, big-data analytics platform where everything from the lowest-level database machinery up through the evaluation stack for our Quirrel query language, to our groundbreaking data manipulation and visualization environment is built in-house.&lt;/p&gt;
&lt;p&gt;Given this information, you shouldn&#8217;t be surprised that we take our time to hire new engineers.&lt;/p&gt;
&lt;p&gt;Working at Precog means coping with a large, highly-abstracted codebase written in Scala in a purely functional style, making allowances for mutable data structures only where benchmarking can show unequivocally that it&apos;s necessary to do so for performance reasons. And while not everyone here is an expert in every field, one has to have a strong grasp of database design theory, high-performance and distributed computing, type theory, statistics, programming language theory, machine learning, and a half dozen or so other topics to be a well-rounded member of the team.&lt;/p&gt;
&lt;h1&gt;The Hiring Process&lt;/h1&gt;
&lt;p&gt;Every potential hire goes through a rigorous interview process designed to select for engineers who have both the skills necessary to be successful in our demanding, fast-paced environment and who fit well with the team by being willing to both share their knowledge and be continuously learning more.&lt;/p&gt;
&lt;p&gt;The typical process goes something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;First Contact.&lt;/strong&gt; We have an initial chat to explain what we&#8217;re about and what we&#8217;re looking for, and to see if there&#8217;s mutual interest in proceeding to the next step. This is not a technical interview, although we might probe your background a bit. For most of our current hires, I reached out to specific individuals with the intention of stealing them from their current jobs. A few hires have been inbound.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Challenge Problem.&lt;/strong&gt; We assign a challenge problem based on your background. This is the main criteria we use to decide whether or not to hire you. I&#8217;ll discuss the challenge problem below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Followup.&lt;/strong&gt; If your solution to the challenge problem blows us away, we don&#8217;t typically do a technical interview. But if your solution to the challenge problem was borderline, we might do a technical interview or ask you to revise your solution. Otherwise, we politely tell you there&#8217;s not a fit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meet the Team.&lt;/strong&gt; If we like your technical chops, then we have you meet the team to assess cultural and personality fit. As a Precog employee, you are going to war with your team, and we&#8217;re in it to win. If you can&#8217;t form strong relationships with your team mates, then it&#8217;s probably not going to work out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Offer.&lt;/strong&gt; If the team loves you and wants you to join (and the feeling is mutual!), then I make an offer. We&#8217;re still a small company, so we can&#8217;t pay the big bucks like Oracle, but we do try to compensate people fairly with generous stock options, above average healthcare, and meaningful perks like ski passes, gym memberships, a tab at our favorite coffee hangout, incredibly interesting and challenging problems, and an amazing team that will push you to be everything you can be.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The Challenge Problem&lt;/h1&gt;
&lt;p&gt;The challenge problem is the single most important part of the interview process for an engineer, though we also consider the candidate&apos;s history of open-source contributions carefully.&lt;/p&gt;
&lt;p&gt;The challenge problem is, like many in the industry, just a programming assignment. We don&apos;t impose a limit on the amount of time you take to come up with a solution, and have had candidates take upwards of 40 hours developing a solution, though candidates with a strong background in functional programming can expect to take less as functional thinking is always a major component of our challenges, and those new to the paradigm may struggle with this aspect.&lt;/p&gt;
&lt;p&gt;Our challenge problems all have the following characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;They are realistic.&lt;/strong&gt; They reflect real problems that we have to solve every day. Your solution will only be a toy solution, of course, but it will be a toy solution to a very real problem you might have to work on if you came to Precog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They are seemingly impossible.&lt;/strong&gt; Challenge problems often ask you to optimize along conflicting dimensions, forcing you to make compromises and think about the tradeoffs carefully.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They are imprecise.&lt;/strong&gt; Our challenge problems aren&#8217;t formally specified with 20 pages of rigorous documentation. Real world problems aren&#8217;t specified that way, and Precog engineers need the ability to work usefully even when aspects of the problem are vaguely specified and to be able to find out one way or another what the fundamental requirements are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They are fun.&lt;/strong&gt; Yes, every software engineer has to do grunt work from time to time. But challenge problems should be genuinely addicting for any engineer made of the stuff we&#8217;re looking for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They are ethical.&lt;/strong&gt; We only give out problems we&#8217;ve already solved better than you can solve in the time you have, we never use any of your work, and we encourage you to open source it since it can help augment your Github portfolio.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#8217;ve been promising for some time now to release one of these challenge problems to the general public, for those who want to try their hand at it just for the sheer joy of it.&lt;/p&gt;
&lt;p&gt;Obviously, releasing a challenge problem means we can no longer use it for hiring. That&#8217;s OK, though, since we have literally hundreds of different problems we&#8217;ve worked on that we can translate into very interesting and self-contained challenge problems.&lt;/p&gt;
&lt;p&gt;Without further ado, I present to you one of our best challenge problems, which involves developing a fault-tolerant, highly-performant, compact key-value data store.&lt;/p&gt;
&lt;p&gt;This challenge problem was successfully solved by Tom Switzer and Gabriel Claramunt, and not solved by many more. Like Tom and Gabriel, I hope you have a lot of fun working on it. Good luck!&lt;/p&gt;
&lt;h1&gt;Challenge Problem: Key-Value Store&lt;/h1&gt;
&lt;p&gt;Your mission, should you choose to accept it, is to provide a disk-backed implementation of the following Scala traits:&lt;/p&gt;
&lt;pre&gt;sealed trait Reader[A]
case class More[A](value: Option[(Array[Byte], Array[Byte])] =&gt; Reader[A]) extends Reader[A]
case class Done[A](value: A) extends Reader[A]

trait DiskStore {
  def put(key: Array[Byte], value: Array[Byte]): Unit

  def get(key: Array[Byte]): Option[Array[Byte]]

  def flush(): Unit

  def traverse[A](start: Array[Byte], end: Array[Byte])(reader: Reader[A]): A
}

trait DiskStoreSource {
  def apply(name: String): DiskStore
}&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;DiskStore&lt;/strong&gt; trait provides an abstraction for a disk-backed key/value store in which the keys are totally ordered by the bytes that comprise them. The trait provides a means to store and retrieve individual key/value pairs, to flush data to disk, and to traverse a range of key/values in order of the keys.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;DiskStoreSource&lt;/strong&gt; trait provides a means to retrieve disk stores given their string-based names.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Reader&lt;/strong&gt; trait is used by &lt;strong&gt;DiskStore.traverse()&lt;/strong&gt; to determine how many key/value pairs to read. When the implementation of &lt;strong&gt;traverse()&lt;/strong&gt; is done, it sends&lt;strong&gt;None&lt;/strong&gt; to the reader to indicate no more data is available. This should cause a well-behaved &lt;strong&gt;Reader&lt;/strong&gt; to return &lt;strong&gt;Done&lt;/strong&gt;, producing a value that is returned by the&lt;strong&gt;traverse()&lt;/strong&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reader&lt;/strong&gt; is an example of an iteratee (Google the term to learn more).&lt;/p&gt;
&lt;p&gt;The implementation of &lt;strong&gt;DiskStore&lt;/strong&gt; must satisfy the following constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The write performance must approach the linear write performance of the hard disk as measured by raw Java IO.&lt;/li&gt;
&lt;li&gt;Duplicate values cannot be stored more than once. That is, if you add 10000 keys all with the value &#8220;John Doe&#8221;, then the text &#8220;John Doe&#8221; must be stored only a single time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flush()&lt;/strong&gt; must obey the obvious contract.&lt;/li&gt;
&lt;li&gt;If the program is forcibly terminated at any point during writing to a disk store, then retrieving the disk store may not fail and must preserve all information prior to the most recent call to &lt;strong&gt;flush()&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You must assume the number of unique values is too great to fit into memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please develop your solution in Scala, using Specs2 for unit testing, and either publish it to a Github repository of your choice, or send us a tarball containing the solution.&lt;/p&gt;
&lt;p&gt;You may spend as much or as little time as you like on the challenge problem. However, we do ask you to roughly keep track of how many hours you spend working on the solution.&lt;/p&gt;
&lt;p&gt;Good luck, and let me know if you need any hints!&lt;/p&gt;
&lt;p&gt;Hints: There are no performance requirements on reads, and there is no need to write data to disk immediately (only &lt;strong&gt;flush()&lt;/strong&gt; will guarantee data is persisted).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Teaming up with 10gen to Bring Precog to MongoDB</title>
      <link>http://localhost:8080/blog/Teaming-up-with-10gen-to-Bring-Precog-to-MongoDB/</link>
      <pubDate>Wed, 07 Nov 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Teaming-up-with-10gen-to-Bring-Precog-to-MongoDB/</guid>
      <author></author>
      <description>&lt;p&gt;Today, we&apos;re excited to announce the launch of &lt;a href=&quot;mongodb&quot;&gt;Precog for MongoDB&lt;/a&gt;, a release that bundles all of the really cool Precog technology into a free package that anyone can download and deploy on their existing MongoDB database.&lt;/p&gt;
&lt;p&gt;We&apos;ve known for a long time that we were going to bring a standalone version of our data science platform to some NoSQL database. Here are the reasons why we chose MongoDB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB developers share our passion for creating software that developers love to use.&lt;/li&gt;
&lt;li&gt;Quirrel is designed to analyze JSON, which is natively supported by MongoDB.&lt;/li&gt;
&lt;li&gt;MongoDB has a basic query and aggregation framework, but to do more advanced analytics, you have to write lots of custom code or export the data into a RDBMS, both of which are very painful.&lt;/li&gt;
&lt;li&gt;We&apos;re great friends of some of the 10gen developers and have released &lt;a href=&quot;https://github.com/jdegoes/blueeyes/tree/master/mongo&quot;&gt;open source software for MongoDB&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;mongodb&quot;&gt;Precog for MongoDB&lt;/a&gt; gives you the ability to analyze all the data in your MongoDB database, without forcing you to export data into another tool or write any custom code.&lt;/p&gt;
&lt;p&gt;We&apos;re really excited about the release and encourage you to &lt;a href=&quot;mongodb&quot;&gt;download the release&lt;/a&gt; (zipped file) and start using it today. You can start to analyze your data in a matter of minutes! Simply &lt;a href=&quot;mongodb&quot;&gt;visit our page&lt;/a&gt;, complete the brief form, and confirm your email address to then download the file. We want to help you get started, so here are the steps for installation and configuration:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Unpack the Download &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The download is a ZIP file that contains the following files: &lt;/p&gt;
&lt;pre&gt;precog.jar
config.cfg
precog.sh
precog.bat&lt;/pre&gt;
&lt;p&gt;The file &lt;strong&gt;precog.jar&lt;/strong&gt; is the Java JAR that bundles all of the Precog dependencies into a single (really big!) file. The files &lt;strong&gt;precog.sh&lt;/strong&gt; and &lt;strong&gt;precog.bat&lt;/strong&gt; are scripts that launch &lt;strong&gt;precog.jar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The file &lt;strong&gt;config.cfg&lt;/strong&gt; contains configuration information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Configure Precog &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All the configuration settings for Precog are stored in the file &lt;strong&gt;config.cfg&lt;/strong&gt;, with reasonable defaults.&lt;/p&gt;
&lt;p&gt;There are two things you need to do at a minimum before you can launch Precog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tell Precog where to find the MongoDB server.&lt;/li&gt;
&lt;li&gt;Tell Precog what the master account is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To tell Precog where to find the MongoDB server, simply edit the mongo server key in the settings:&lt;/p&gt;
&lt;pre&gt;
queryExecutor {
 mongo {
   server = &quot;&lt;a href=&quot;mongodb://localhost:27017&quot;&gt;mongodb://localhost:27017&lt;/a&gt;&quot;
 }
}
&lt;/pre&gt;
&lt;p&gt;Change the &quot;localhost:27017&quot; portion to the host and port of your mongo server. For optimal performance, you should launch Precog on the same machine that is running the MongoDB server.&lt;/p&gt;
&lt;p&gt;Precog will map the MongoDB databases and collections into the file system by placing the databases at the top level of the file system, and will nest the database collections under the databases (e.g. &lt;em&gt;/mydb/mycollection/&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;To tell Precog what the master account is, edit &lt;strong&gt;config.cfg&lt;/strong&gt; and edit the following settings under the masterAccount section:&lt;/p&gt;
&lt;pre&gt;
security {
 masterAccount {
   apiKey = &quot;12345678-1234-1234-1234-123456789abc&quot;
 }
}
&lt;/pre&gt;
&lt;p&gt;The API key for the master account can be anything you like, but you should treat it securely because whoever has it has full access to all of your MongoDB data.&lt;/p&gt;
&lt;p&gt;You may also want to tweak the ports that Precog uses for the web server that exposes the Precog REST API and to serve labcoat:&lt;/p&gt;
&lt;pre&gt;
    server {
 port = 8888
   }
   �
   labcoat {
     port = 8000
   }
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Launch Precog &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To run &lt;strong&gt;precog.jar&lt;/strong&gt;, you will need to install JRE 6 or later (many systems already have Java installed). If you&apos;re on an OS X or Linux machine, just run the &lt;strong&gt;precog.sh&lt;/strong&gt; script, which automatically launches Java:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;precog.sh&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&apos;re on a Windows machine, you can launch Precog with the &lt;strong&gt;precog.bat&lt;/strong&gt; script.&lt;/p&gt;
&lt;p&gt;Once Precog has been launched, it will start a web server that exposes the REST API as well as labcoat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Try the API &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once Precog is running, you have full access to the &lt;a href=&quot;developers&quot;&gt;Precog REST API&lt;/a&gt;. You can find a large number of open source client libraries &lt;a href=&quot;https://github.com/reportgrid/client-libraries&quot;&gt;available on Github&lt;/a&gt;, and the Precog developers site contains a bunch of &lt;a href=&quot;developers&quot;&gt;documentation and tutorials&lt;/a&gt; for interacting with the API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Try Labcoat &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Labcoat is an HTML5 application that comes bundled in the download. You don&apos;t have to use Labcoat, of course, since Precog has a REST API, but Labcoat is the best way to interactively explore your data and develop Quirrel queries.&lt;/p&gt;
&lt;p&gt;The precog.jar comes with a bundled web server for labcoat, so once it&apos;s running just point your browser at &lt;a href=&quot;http://localhost:8000/&quot;&gt;&lt;a href=&quot;http://localhost:8000/&lt;/a&gt;&quot;&gt;http://localhost:8000/&lt;/a&gt;&lt;/a&gt; (or whatever port you&apos;ve configured it for) and you&apos;ll have a new labcoat IDE pointing at your local Precog REST API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6: Analyze Data! &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you&apos;ve got Labcoat running, you&apos;re all set! You should see your MongoDB collections in the file system explorer, and you can query data from the collections, develop queries to analyze the data, and export queries as code that run against your Precog server. Precog is a beta product, and &lt;em&gt;Precog for MongoDB&lt;/em&gt; is hot off the press. You may encounter a few rough corners, and if so, we&apos;d love to hear about them (just send an email to &lt;a href=&quot;mailto:support@precog.com&quot;&gt;support@precog.com&lt;/a&gt;). Have fun analyzing!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog Zombie Says- &quot;Learn more Quirrel. It makes your brain better.&quot;</title>
      <link>http://localhost:8080/blog/Precog-Zombie-Says-Learn-more-Quirrel-It-makes-your-brain-better/</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Zombie-Says-Learn-more-Quirrel-It-makes-your-brain-better/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=68&quot; rel=&quot;attachment wp-att-68&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-68&quot; alt=&quot;png;base64aa915f8f37220d91&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/pngbase64aa915f8f37220d91.png&quot; width=&quot;555&quot; height=&quot;173&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make the Precog Zombie happy, you can watch previous tutorials covering basic syntax and filtering which are available in the mausoleum of learning.&lt;/p&gt;
&lt;p&gt;Here are two additional tutorial videos explaining some of the most useful functionality of Quirrel: built-in functions and solve statements.&lt;/p&gt;
&lt;p&gt;This video provides a brief overview of a handful of functions but a complete list of built-in functions is available. Two highlights are how to import a module of functions and an example showing how to utilize rank. *No zombies were harmed during the making of this video.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.youtube.com/embed/bR9ppqpnLHo&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Solve statements are one of the most important features of Quirrel. In conjunction with Quirrel�s set-based nature, solve statements banish the spectre of traditional control structures such as for statements and while loops. It is possible to evaluate a statement at all possible values of a parameter in Quirrel by using a solve statement. All possible values of a parameter in a solve statement are determined by the constraints.&lt;/p&gt;
&lt;p&gt;For example, in the solve statement below, &#8216;zombies is constrained to values of data.zombies. So, for each zombie you will get an object that contains two fields: monsterId and infections. The monsterId field will be populated with values from data.zombies and the infections field will be the results of the count on data.infections for each zombie.&lt;/p&gt;
&lt;pre&gt;solve &apos;zombies
  { monsterId: &apos;zombies,
  infections: count(data.infections where data.zombies =&lt;br&gt;       &apos;zombies)
}&lt;/pre&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.youtube.com/embed/njuJ4P901-c&quot; height=&quot;390&quot; width=&quot;625&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;
Another good way to learn more Quirrel is to run and modify some of the sample queries in the demo version of Labcoat. Check out a query that returns the top five products sold by ApocalypseProducts. Zombie insurance anyone?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Join us in the Cloud EXPO</title>
      <link>http://localhost:8080/blog/Join-us-in-the-Cloud-EXPO/</link>
      <pubDate>Fri, 26 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Join-us-in-the-Cloud-EXPO/</guid>
      <author></author>
      <description>&lt;p&gt;Our team has been racking up the airline miles recently (Strata in NYC, DataWeek in SF, Strange Loop in St. Louis) and now we&#8217;re adding more by going to Santa Clara, CA for four whole days showing off Precog to the attendees at &lt;a href=&quot;http://cloudcomputingexpo.com/&quot;&gt;Big Data and Cloud Computing Expo&lt;/a&gt;. Join us from &lt;strong&gt;November 5-8&lt;/strong&gt; in the Santa Clara Convention Center and we&#8217;ll let you in with a FREE 4-DAY PASS! (see below for how to get your free pass)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=65&quot; rel=&quot;attachment wp-att-65&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-65&quot; alt=&quot;b2ap3_thumbnail_bigdataexpo_banner&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/b2ap3_thumbnail_bigdataexpo_banner.jpeg&quot; width=&quot;400&quot; height=&quot;89&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find Precog in a few places&#8230;.check us out &lt;a href=&quot;http://cloudcomputingexpo.com/general/exhibitors1112.htm&quot;&gt;exhibiting in the EXPO&lt;/a&gt; in &lt;strong&gt;booth #733&lt;/strong&gt; and attend a session on Tuesday evening to learn about our revolutionary analytics platform and the query language behind the technology.&lt;/p&gt;
&lt;p&gt;John A. De Goes, Precog CEO/Founder&lt;br /&gt;
&lt;strong&gt;Analyzing Big Data with Quirrel&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://cloudcomputingexpo.com/event/session/1811&quot;&gt;Tuesday, 5:20pm in the Big Data Track&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy four days packed with breakout sessions, demo theaters, one on one sessions with the big data players, industry keynotes, and more!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Five Industry Keynotes&lt;/li&gt;
&lt;li&gt;175+ Technical &amp; Strategy Sessions&lt;/li&gt;
&lt;li&gt;Cloud Computing &amp; Big Data &#8220;Power Panels&#8221;&lt;/li&gt;
&lt;li&gt;90,000 sq. foot Expo Floor (Find the Precog booth at #733)&lt;/li&gt;
&lt;li&gt;FREE Welcome Reception &#8211; Day One (drink &amp; dine as you explore the Expo Floor)&lt;/li&gt;
&lt;li&gt;FREE Temptations Election Day Celebration Concert &#8211; Day Two&lt;/li&gt;
&lt;li&gt;FREE Eco-Friendly Car Give-Away &#8211; Day Four&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Get your FREE VIP PASS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sponsor &#8220;VIP Gold Pass� Registration Easy Steps:&lt;/p&gt;
&lt;p&gt;1. Go to the &lt;a href=&quot;http://www.blueskyz.com/v3/login.aspx?clientid=19&amp;eventid=60&amp;sg=196&amp;w=1&quot;&gt;registration page&lt;/a&gt;&lt;br /&gt;
2. Fill out the Attendee Information form&lt;br /&gt;
3. Select the &lt;em&gt;VIP Gold Pass Registration&lt;/em&gt; Option&lt;br /&gt;
4. Enter the Discount Code&lt;strong&gt;precogVIPgold&lt;/strong&gt;&lt;br /&gt;
5. Abracadabra! The price will re-set from $2,000 to $0 - what�s not to like? This pass give you Full Conference Access for all four days, November 5-8, which means you can choose from our 100+ breakout sessions, general sessions, industry keynotes, and &#8220;Power Panels&#8221; and of course visit the Expo Floor.&lt;/p&gt;
&lt;p&gt;Hope to see you next week!&lt;/p&gt;</description>
    </item>
    <item>
      <title>APIs- The Next Big Thing That Is Already Here</title>
      <link>http://localhost:8080/blog/APIs-The-Next-Big-Thing-That-Is-Already-Here/</link>
      <pubDate>Tue, 23 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/APIs-The-Next-Big-Thing-That-Is-Already-Here/</guid>
      <author></author>
      <description>&lt;p&gt;APIs (&lt;a href=&quot;http://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;Application programming interfaces&lt;/a&gt;) are changing the way that application development occurs. They provide an easy way for developers to mash up services together in &lt;a href=&quot;http://en.wikipedia.org/wiki/Mashup_(web_application_hybrid)&quot;&gt;innovative combinations&lt;/a&gt;. One such example is Precog&#8217;s recently launched&lt;a href=&quot;elections2012&quot;&gt; Real-time Twitter Election Analysis&lt;/a&gt;. Here is an &lt;a href=&quot;http://www.slideshare.net/jmusser/pw-glue-conmay2010&quot;&gt;overview of the growth of APIs &lt;/a&gt;from John Musser of Programmableweb.&lt;/p&gt;
&lt;p&gt;Sam Ramji of Apigee contends that APIs are a game changer that will allow companies the opportunity to flourish in an increasingly competitive environment. He &lt;a href=&quot;http://blog.apigee.com/detail/full_talk_and_slides_darwins_finches_20th_century_business_and_apis_evolve/&quot;&gt;makes an evolutionary comparison &lt;/a&gt;that an API is a like a gene that will spread everywhere your API is used.&lt;/p&gt;
&lt;p&gt;That&apos;s a lot of buzz.&lt;/p&gt;
&lt;p&gt;Is it warranted? Absolutely. Let&apos;s look at an example that compares the old way of doing things with the API-driven approach.&lt;/p&gt;
&lt;p&gt;The old way of collecting data about political elections is to conduct expensive phone polling.  You hire a group of trained survey callers and have them call tens of thousands of people. Sample sizes in poll results are much smaller than this, but response rates tend to be &lt;a href=&quot;http://www.huffingtonpost.com/2012/05/15/poll-response-rates_n_1518501.html&quot;&gt;quite low and are getting lower&lt;/a&gt;. Additionally, polling data like this can often be fraught with &lt;a href=&quot;http://www.ropercenter.uconn.edu/education/polling_fundamentals_error.html#.UHWf3Rhy7oo&quot;&gt;measurement error&lt;/a&gt;, such as order effects or forced choices.&lt;/p&gt;
&lt;p&gt;The new API-driven approach is to combine several APIs to provide interesting insight into the 2012 election with limited effort and expense.&lt;/p&gt;
&lt;p&gt;For example, a minor change to the &lt;a href=&quot;elections2012&quot;&gt;real-time chart&lt;/a&gt; allows us to query data during the last Presidential debate:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=62&quot; rel=&quot;attachment wp-att-62&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-62&quot; alt=&quot;elections2012&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/elections2012.png&quot; width=&quot;400&quot; height=&quot;221&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would not be surprising if some selection bias occurs in the data.  According to &lt;a href=&quot;http://www.pewinternet.org/Reports/2012/Social-networking-and-politics/Main-findings/Social-networking-sites-and-politics.aspx&quot;&gt;this survey&lt;/a&gt;, internet users who identify as liberal are more likely to use social networking sites than internet users who identify as conservative.  The likely selection bias in the population of Twitter users is problematic so there is still room for improvement.&lt;/p&gt;
&lt;p&gt;However, the potential methodological advantages of huge samples in an organic setting instead of an artificial context for a fraction of the cost are significant.  Additional work also remains in understanding exactly what these numbers mean and determining if they have any predictive power.&lt;/p&gt;
&lt;p&gt;While new approaches may not completely replace old methods, providing people with the resources to be creative is a powerful recipe for innovation.&lt;/p&gt;
&lt;p&gt;For more information on Precog&#8217;s API, check out the &lt;a href=&quot;developers&quot;&gt;developer center&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Race is On! Watch our Real-Time Election Analysis</title>
      <link>http://localhost:8080/blog/The-Race-is-On!-Watch-our-Real-time-Election-Analysis/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/The-Race-is-On!-Watch-our-Real-time-Election-Analysis/</guid>
      <author></author>
      <description>&lt;p&gt;Anyone who has braved the Twitterverse during a presidential debate knows that the sheer volume of candidate-related tweets makes any kind of conversation analysis really hard.&lt;/p&gt;
&lt;p&gt;So &#8212; what are people saying about the candidates on Twitter, and more importantly, what does it mean?&lt;/p&gt;
&lt;p&gt;Precog and Alchemy API have partnered up to launch a Real-Time Twitter Sentiment Analysis. Gathering tweets in real-time, then scoring tweets for Romney &amp; Obama on a +1 (positive) to -1 (negative) scale, the analysis shows a state-by-state breakdown of Twitter sentiment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=59&quot; rel=&quot;attachment wp-att-59&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-59&quot; alt=&quot;Screen Shot 2012-10-22 at 4.12.49 PM&quot; src=&quot;/blog/images/Screen-Shot-2012-10-22-at-4.12.49-PM.png&quot; width=&quot;600&quot; height=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do people in different states tweet about candidates? Are they positive on Romney? Neutral on Obama? Is Texas such a red state when viewed through the lens of Twitter? Are California tweets as staunchly blue as the state&apos;s electorate? Are certain days better for the candidates than others? You can get the answers to these questions here (rollover a state to see the real-time sentiment score).&lt;/p&gt;
&lt;p&gt;So, how was this developed? First, we can see what people organically think about the candidates by searching for tweets using Twitter&apos;s API. Then we can analyze the sentiment of these tweets using Alchemy API&apos;s Sentiment Analysis API. This data can be easily stored using Precog&apos;s API. Precog&apos;s interactive development environment, Labcoat, can be used to analyze this data. The resulting query can be exported into an application, which in this case is a data visualization app that uses the ReportGrid visualization library. Visit www.precog.com/elections2012 to learn more and feel free to also grab the code to embed this Geo Chart on your website!&lt;/p&gt;
&lt;p&gt;You can tune in during the debate tonight to see the latest, and we&apos;ll be running our analysis through election day on November 6. Enjoy watching the the live action!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Existential Types FTW</title>
      <link>http://localhost:8080/blog/Existential-Types-FTW/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Existential-Types-FTW/</guid>
      <author></author>
      <description>&lt;p&gt;One of the things that I&#8217;ve noticed, working at Precog with the likes of Miles, Erik, Kris, Tom, etc, is that we have a tendency to push Scala really, really hard.  Our code base is architecturally quite beautiful, but there are some places where we are doing things with the language that I didn&#8217;t even realize were possible, much less applicable to real-world design.  This has had a number of consequences beyond the obvious code interaction benefits.  First, we have a tendency to run into bugs and corner cases in scalac that are as bizarre as they are frustrating.  Second, we have learned a very great deal about how non-trivial Scala code bases can be modularized and broken down into discrete, manageable chunks.  As a team, we tend to talk more about the first consequence (language bugs), but I thought it was time to shed a little light on the second one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just to give you a bit of context, Precog is a big data analytics database offered as a platform-as-a-service solution.  We have a custom query language, called Quirrel (the misspelling is my fault, sorry) paired with an entirely custom stack from top to bottom.  Blueeyes and Akka sit on the frontend, handling asynchronous requests to our REST API.  In the compiler, parsing is handled by my GLL combinators project, with the various semantic analysis and emitter phases written without the aid of a framework.  We emit to a custom bytecode which is parsed, analyzed and resolved by our evaluator.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bake Me a Cake (as fast as you can)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are actually a lot of really cool tricks that we use which I could talk about.  I&#8217;m particularly proud of the compiler, which is exceptionally modular, purely functional with a self-contained AST, but also rigidly type-safe with expressed dependencies between phases.  If you&#8217;re curious about this aspect of the system, I&#8217;ll be giving a talk at Devoxx (and later at Scala Exchange) next month.&lt;/p&gt;
&lt;p&gt;Honestly though, I think the most interesting trick we&#8217;ve been using is the Cake Pattern.  Our use of this pattern is basically the glue which holds the entire system together.  For those who may not be familiar with the Cake Pattern, here&#8217;s a quick overview...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basically, you start out with something like this:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
trait StorageCompopnent {
  def storeUser(user: User)
  def retrieveUser(id: Int): Option[User]
}

trait MySQLStorageComponent extends StorageComponent {
  override def storeUser(user: User) { ... }
  override def retrieveUser(id: Int): Option[User] = ...
}
&lt;/pre&gt;
&lt;p&gt;In Spring terms, you can think of StorageComponent like a service that you will inject, where MySQLStorageComponent is a specific implementation thereof.  Once you have this, you can declare that some other component uses this service via inheritance:&lt;/p&gt;
&lt;pre&gt;
trait AuthComponent extends StorageComponent {
  def authenticate(id: Int, hash: Vector[Byte]): Boolean =
    retrieveUser(id) map { _.hash == hash } getOrElse false
}
&lt;/pre&gt;
&lt;p&gt;And so on, and so on�  This sort of thing ensures that you can never even get an instance of a component without ensuring that all of its dependencies are met.&lt;/p&gt;
&lt;p&gt;There are a number of problems with this pattern though, problems which become apparent when you try to apply it on a large scale.  The very first thing we discovered is that we needed to abstract not only over implementation, but also type.  This leads us to a pattern much more like the following:&lt;/p&gt;
&lt;pre&gt;
  trait StorageCompopnent {
  type User &lt;: UserLike

  def storeUser(user: User)
  def retrieveUser(id: Int): Option[User]


  trait UserLike {
    def id: Int
    def hash: Vector[Byte]
  }
}

trait MySQLStorageComponent extends StorageComponent {
  override def storeUser(user: User) { ... }
  override def retrieveUser(id: Int): Option[User] = ...


  case class User(id: Int, hash: Vector[Byte]) extends UserLike
}
&lt;/pre&gt;
&lt;p&gt;This is an excellent example of a concept called an existential type.  Basically, AuthComponent is using the type User without ever knowing its instantiation!  This is directly analogous to calling an abstract method without statically knowing (at the call site) what its implementation looks like.  This sort of thing is possible (and not restrictive) due to the fact that we have both an introduction and an elimination function for User.  The introduction function is retrieveUser, which gives us an instance of type User, whatever that type may be.  The storeUser function provides elimination, which is what makes type User actually useful beyond loading and examining.&lt;/p&gt;
&lt;p&gt;Type User is further restricted by UserLike, which allows us to access properties of the value without knowing the specific type.  We also ocaisionally use a related pattern where we do not restrict User to be a subtype of a specific trait, but rather define a trait (much like UserLike) which defines all of the functions we want and an abstract implicit function from the existential type (User) to the pimp.  We don&apos;t use this very much anymore, but this pattern can be useful when you want to ensure that certain functions are only accessible within certain implicit contexts (a restriction that can be expressed by an implicit parameter taken by the abstract implicit conversion).&lt;/p&gt;
&lt;p&gt;Configuration&lt;/p&gt;
&lt;p&gt;Once you have the concept of existential types contributed by a single member of the cake, it&apos;s only a very small step toward existential types that are contributed by multiple members.  This is probably the coolest abuse of path dependent types that I have ever seen short of HList.  It goes something like this:&lt;/p&gt;
&lt;pre&gt;
trait ConfigComponent {
  type Config
  def config: Config
}

trait MySQLStorageComponent extends StorageComponent with ConfigComponent {
  type Config &lt;: MySQLConfig

  override def storeUser(user: User) { ... }
  override def retrieveUser(id: Int): Option[User] = ...


  case class User(id: Int, hash: Vector[Byte]) extends UserLike

  trait MySQLConfig {
    def mysqlHost: String
    def mysqlPort: Int
  }
}

trait GravatarComponent extends StorageComponent {
  type Config : GravatarConfi

  def avatarURL(user: User): String = { ... }

  trait GravatarConfig {
    def token: String
  }
}

class RESTService extends MySQLStorageComponent with GravatarComponent with ... {
  type Config = config.type

  override object config extends MySQLConfig with GravatarConfig {
    val mysqlHost = &quot;localhost&quot;
    val mysqlPort = 3336

    val token = &quot;1234cafebabe&quot;
  }

  ...
}
&lt;/pre&gt;
&lt;p&gt;Obviously, that&apos;s a lot of code to digest.  The interesting bit is the &quot;Config&quot; type in MySQLComponent and GravatarComponent.  Notice how each component constraints Config to be a subtype of a different type?  This is the key to the whole technique.  Config is still existential in these contexts; we don&apos;t know exactly what it is.  However, within the scope of GravatarComponent, we do know that Config has a token function of type String, which we can use.  Within the scope of MySQLComponent, we know that it contains the host/port information.  Neither component knows about the other, and neither component is tangled with the other&apos;s configuration information.  It is all rigidly separated and modularized until the very end of the world, which happens in RESTService.  Here, we provide an instance of Config which satisfies both specific types.&lt;/p&gt;
&lt;p&gt;In essence, what we&apos;re doing here is defining an existential type that is piecewise refined by different modules in the cake.  Implementation information is controlled and partitioned, tangling is avoided, and we have sidestepped the perennial problem of namespace pollution that plagues Cake-users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefits in Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We do a lot of other things with the Cake Pattern beyond just this, but I think the above gives you a reasonable taste.  While we have had some really annoying complexities that have come out of our use of the Cake Pattern, things have been (on the whole) extremely pleasant.  In abstract, this particular use of Scala has enabled the following benefits:&lt;/p&gt;
&lt;p&gt;Limited-to-no &quot;classical&quot; OO  We use Scala&apos;s OO features to achieve polymorphic modules (the cake pattern) and flexible ADTs with reified constructor types (more on this in another post).  I can&apos;t remember the last time I saw an abstract class.  All of our logic-carrying code is written in a highly functional style, where the functions themselves live in polymorphic modules.  It&apos;s very reminiscent of SML.&lt;/p&gt;
&lt;p&gt;Most-Specific type at the &quot;end of the world&quot;  Anyone who has used Spring (or any IOC framework) is likely aware of the annoyance associated with only having interfaces (rather than implementations) everywhere.  This can be extremely constraining, especially for testing.  The Cake pattern inverts this situation, giving you the most-specific type for everything once the cake has been put together, rather than the least-specific.  The reason for this is actually somewhat interesting from a theoretical standpoint, but it basically boils down to the fact that we&apos;re using existential rather than universal types at each point.  This is an undeniable benefit that has saved us literally hundreds of hours over the life of this project.&lt;/p&gt;
&lt;p&gt;Complete separation of concerns  Our evaluator knows nothing about the specifics of the storage layer.  We could very easily swap in an entirely different storage backend (e.g. MongoDB) without ever touching our evaluator implementation.  However, the implementation of row-level operations like addition, subtraction or string-to-date conversion is aware of these details (since they have to be).  Due to the magic of abstract types, the evaluator is able to parse the bytecode, obtaining instances of these row-level operations, manipulate and optimize these operations, and finally invoke them against datasets, all without ever tying itself to the underlying implementation specifics.  Perfect inversion of control.&lt;/p&gt;
&lt;p&gt;Testing without mocks  This is a benefit that is hard to over-state.  We use exactly 0 mocks in our entire test codebase.  Literally none.  On occasion, we provide stub or harness implementations of component abstract functions (e.g. storeUser), but this is the exception rather than the rule.  Each test specification (we use Specs2 with ScalaCheck) is focused on a single module in the cake, and therefore is able to zero in on exactly and only the functionality at hand.&lt;/p&gt;
&lt;p&gt;Deeply-overriding behavior in tests  This is related to the first point.  Since we&apos;re using existential types which have a deferred specification, we are often free to override very deeply-entangled functionality at the point where components are caked together.  For example, our storage layer produces a dataset abstraction which lives inside a monad, M.  There is an abstract implicit def in scope which provides an instance of scalaz.Monad[M], but beyond this we have no knowledge of this type.  In the tests, we instantiate M with the Identity monad and provide a Copointed[M] instance, to allow easy checking of raw results.  In production, we instantiate M to be Akka&apos;s Future, for which we cannot define a (safe) Copointed instance.  This sort of overriding is seamless and natural, thanks to our use of existential types within the cake.&lt;/p&gt;
&lt;p&gt;Multiple end-point configurations  I keep talking about the &quot;end of the world&quot;, where all of the components and specific implementations are caked together and instantiated.  The truth is that we don&apos;t have a single &quot;end of the world&quot;.  Rather, we have many different points and many different configurations of the cake, depending on use.  One of these points is our blueeyes REST API service.  Another is a command-line REPL for the Quirrel language.  Yet another serves as one of our integration test suites.  And that&apos;s not even everything!  In a sense, every single test specification is an &quot;end of the world&quot; point for some part of the cake.  Adding a new specification to the test suite is as easy as extending the trait that you want to test and implementing abstract methods and types until the compiler stops complaining.  No XML.  No reflection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Overall, I have been deliriously happy with Scala&apos;s implementation of polymorphic modules in the form of trait mixins.  It is hard to overstate the benefits of these features in a large and complex system.  Working on this project has pretty firmly convinced me that the benefits of object-oriented programming are best realized in this form, with the bulk of your system&apos;s logic expressed in a functional style.  While there have certainly been many pain points along the way, I think that Scala does a better job than any other language in giving us the tools we need to keep our architecture sane and our code base manageable.&lt;/p&gt;
&lt;p&gt;A lot of people look at the Precog team and ask, &quot;Why are you using Scala?  Why not just use Haskell?&quot;  While it&apos;s certainly true that we have the talent to pull off something like this, I don&apos;t think the results would be anywhere near as elegant.  Even above and beyond the ecosystem benefits of sitting on the JVM, Scala as a language provides so many tools and constructs that are indispensable to our architecture.  I don&apos;t regret our decision to use Scala, and I continue to eagerly anticipate further refinements in how we use the language and how well it is able to optimize for our needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sign-Up for a Precog Account Today!</title>
      <link>http://localhost:8080/blog/Sign-up-for-a-precog-account-today/</link>
      <pubDate>Tue, 16 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Sign-up-for-a-precog-account-today/</guid>
      <author></author>
      <description>&lt;p&gt;Follow these simple steps to get started with Precog today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Go to the &lt;a href=&quot;registration&quot;&gt;registration page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Step 2: Fill out the brief form and click on the register button.&lt;/li&gt;
&lt;li&gt;Step 3: Check your email and click on the authentication link.&lt;/li&gt;
&lt;li&gt;Step 4: Log in and view your &lt;a href=&quot;account&quot;&gt;account details&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#8217;s it!  You now have a shiny new Precog account.&lt;/p&gt;
&lt;p&gt;For some resources to help get you started, check out the &lt;a href=&quot;developers&quot;&gt;developer center,&lt;/a&gt; the &lt;a href=&quot;products/labcoat/learn&quot;&gt;learn page&lt;/a&gt; and the video below on uploading data using Labcoat&#8217;s simple drag-and-drop interface:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;625&quot; height=&quot;390&quot; src=&quot;http://www.youtube.com/embed/iQpu2JnV3DI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Training Videos</title>
      <link>http://localhost:8080/blog/Training-Videos/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Training-Videos/</guid>
      <author></author>
      <description>&lt;p&gt;To get jump-started learning Quirrel, check out this screencast on basic syntax. In just a few minutes, you&#8217;ll learn how to load data, use the assignment operator, drill down using filtered descent and call functions.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.youtube.com/embed/lEPnAFUyf3o&quot; height=&quot;390&quot; width=&quot;625&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Or for brief primer on instrumenting your data:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.youtube.com/embed/rXSrl0ozSH8&quot; height=&quot;390&quot; width=&quot;625&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;In addition to saving some cows, you&#8217;ll quickly learn how to integrate a few lines of code that capture and store data you are already generating in your application.p&gt;
&lt;p&gt;For other tutorials, visit the &lt;a href=&quot;products/labcoat/learn&quot;&gt;Learn Page&lt;/a&gt;.  If you have any requests for tutorials, please let us know in the comments below!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog Wins SF Beta People's Choice Award!</title>
      <link>http://localhost:8080/blog/Precog-wins-SF-Beta-Peoples-Choice-Award/</link>
      <pubDate>Fri, 05 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-wins-SF-Beta-Peoples-Choice-Award/</guid>
      <author></author>
      <description>&lt;p&gt;Last week the Precog team had the pleasure to attend &lt;strong&gt;SF Beta: Data Week Edition&lt;/strong&gt;, as part of our west coast Data Week trip. As you might be aware, SF Beta is San Francisco&apos;s popular startup mixer, combining live demos, interactive competition and open socializing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.precog.com/&quot;&gt;Precog&lt;/a&gt; was one of several big data startups that entered the interactive competition, which also included entries from WikiSeer, MetaMarkets, GoodData, Spinn3r, DataStax and Chart.io. As part of the contest, Precog provided a demo of our Precog data warehousing and analysis platform and our front-end Labcoat IDE. Four hundred demo viewers were asked to contribute poker chips, each representing a monetary value, to the demo that they felt was the most compelling.&lt;/p&gt;
&lt;p&gt;The result? Precog cruised to a crushing $80 million in &apos;investment,&apos; capturing its first ever SF Beta People&apos;s Choice Award and becoming the third consecutive startup based outside of the Bay Area to win SF Beta.&lt;/p&gt;
&lt;p&gt;Learn more about our award winning Precog platform &lt;a href=&quot;products/precog&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=47&quot; rel=&quot;attachment wp-att-47&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-47&quot; alt=&quot;b2ap3_thumbnail_sfbeta_precog&quot; src=&quot;/blog/images/b2ap3_thumbnail_sfbeta_precog.jpeg&quot; width=&quot;400&quot; height=&quot;279&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Help Precog Get To SXSW</title>
      <link>http://localhost:8080/blog/Help-Precog-Get-To-SXSW/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Help-Precog-Get-To-SXSW/</guid>
      <author></author>
      <description>&lt;p&gt;We need your help! Last month, we submitted a session on &lt;a href=&quot;products/labcoat/quirrel&quot;&gt;Quirrel&lt;/a&gt; to the &lt;a href=&quot;http://sxswedu.com/&quot;&gt;SXSWedu&lt;/a&gt; program in Austin, Texas. The session is called &#8220;&lt;a href=&quot;http://panelpicker.sxsw.com/vote/8793&quot;&gt;Big Data Science &amp; Introduction to Quirrel&lt;/a&gt;&#8221; and will be presented by John A. De Goes, our CEO/Founder and Chairman of the Quirrel language committee.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Public voting ends this Friday&lt;/strong&gt; and we&#8217;d love all the support we can get!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://panelpicker.sxsw.com/vote/8793&quot;&gt;&lt;img title=&quot;&quot; alt=&quot;&quot; src=&quot;http://sxswedu.com/sites/default/files/PP_VOTE_IDEA__EDU2013-0-1.png&quot; width=&quot;186&quot; height=&quot;67&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session Description:&lt;/strong&gt; The enormous amount of data being captured by machines is increasingly being analyzed by applications to drive smart features, like recommendations, predictions, and decision-making. Deeply analyzing petabyte-scale datasets is no easy task. Many tools in the big data ecosystem allow superficial analysis of data, but digging deeper is much more challenging. Quirrel is a statistically-oriented language designed principally for data analysis. It combines a purely-declarative, implicitly parallel design with features needed by data scientists.&lt;/p&gt;
&lt;p&gt;In this presentation, John A. De Goes (chairman of the Quirrel language committee) introduces Quirrel and shows how it can be used to solve problems across large data sets and describes how this shift is revolutionizing the application space, in everything from digital advertising to e-commerce.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog Public Beta Unleashed at DataWeek</title>
      <link>http://localhost:8080/blog/Precog-Public-Beta-Unleashed-at-DataWeek/</link>
      <pubDate>Mon, 24 Sep 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Public-Beta-Unleashed-at-DataWeek/</guid>
      <author></author>
      <description>&lt;p&gt;Today marks the official launch of &lt;strong&gt;Precog in public beta&lt;/strong&gt;! This means anyone (including you!) can &lt;a href=&quot;registration&quot;&gt;sign up&lt;/a&gt; for a free account on our &lt;a href=&quot;http://www.precog.com/&quot;&gt;website&lt;/a&gt; and begin using our full stack of technology.&lt;/p&gt;
&lt;p&gt;Approximately seven months ago, we unveiled Precog in private beta at the Strata Conference in Santa Clara, California. Since then, this next-generation of technology we originally developed during TechStars 2011 has only been accessible to a handful of select companies. Today, after more than two years in continuous development, we&apos;re opening the floodgates.&lt;/p&gt;
&lt;p&gt;Precog represents a radical break with traditional data warehousing and analysis solutions. It&apos;s a disruptive solution that takes a fresh look at what modern data-driven companies need to effectively leverage their data assets. Historically, companies have paid a heavy price because data warehousing and data analysis are completely separate worlds, with different technologies, tools, and skill sets. Data warehousing solutions are adept at storing large amounts of data, and because they have programmatic interfaces, developers can integrate them into workflows and applications.&lt;/p&gt;
&lt;p&gt;However, most data warehouses are only capable of storing data and doing simple aggregations. If you want to do something advanced with your data, you need to perform a complicated and costly Extract-Transform-Load (ETL) process into a more capable data analysis tool, such as R, which requires an entirely different skill set.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=41&quot; rel=&quot;attachment wp-att-41&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-41&quot; alt=&quot;hadoop&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/hadoop.jpeg&quot; width=&quot;400&quot; height=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Traditional data analysis tools like R and Matlab can only handle small amounts of data, and because they&apos;re designed for interactive use, it&apos;s not easy to integrate them into workflows and applications (though many have tried).&lt;/p&gt;
&lt;p&gt;However, if you want to analyze real-world data (often gigabytes or terabytes in size), you have to radically downsample the data, which greatly decreases quality. After downsampling, a data scientist can aggregate, analyze, and model the data set. But if you want to deploy any of this work in production, you often have to completely recode it in a real programming language like Java, which is complicated, time-consuming, and very costly.&lt;/p&gt;
&lt;p&gt;Why can&apos;t you perform sophisticated data science directly inside your data warehouse? Why can&apos;t a developer deploy the work of a data scientist, without needing to recode it in a programming language like Java? Why can&apos;t people use the same technology for doing both simple and advanced analytics across both small and big data sets?&lt;/p&gt;
&lt;p&gt;Here at Precog, we are making all these things possible for the first time ever, with some &lt;strong&gt;truly groundbreaking technology&lt;/strong&gt; we&apos;ve been furiously hard at work creating.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;products/precog&quot;&gt;Precog&lt;/a&gt; combines the scalability of big data platforms with the number crunching power of statistical tools. It seamlessly and elegantly blends the world of the data scientist with the world of the software engineer, allowing the two to work together and use the same technology to solve their respective problems.&lt;/p&gt;
&lt;p&gt;A data scientist can aggregate, massage, analyze, and model large amounts of data without needing a separate ETL process into a small-data statistical tool. Statistical models, aggregations, or complicated analytical calculations developed by a data scientist can be transparently run in production by software engineers, allowing new features to be added to products or allowing automation of workflows.&lt;/p&gt;
&lt;p&gt;In addition to bridging the worlds of data science and big data engineering, Precog is groundup technology, unencumbered by legacy constraints. Precog comes packed with features that are critical in the modern world of big data, SaaS, and cloud computing &#8212; features that legacy systems either don&apos;t support at all, or don&apos;t support very well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-structured data.&lt;/strong&gt; Precog stores JSON, which allows it to store everything from raw numbers and strings, to key-value pairs, to relational data, to tree data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure APIs.&lt;/strong&gt; Analytics often need to be generated and consumed from web and mobile applications. Precog comes built-in with secure APIs that save developers the headache of creating, securing, and maintaining their own proprietary APIs and client libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-tenancy.&lt;/strong&gt; Precog is multi-tenant out of the box, designed for deployment in complex environments which require fine-grained permissions and resource metering. Precog is useful out-of-the-box to software engineers, because of the rich APIs and client libraries that make it easy for developers to build data-driven features and automate workflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data scientists will want to use our analysis tool called &lt;a href=&quot;products/labcoat&quot;&gt;Labcoat&lt;/a&gt;, built on top the Precog APIs. Labcoat packages much of the power of Precog into a user-friendly graphical tool that runs on all modern browsers.&lt;/p&gt;
&lt;p&gt;In addition to the core Precog platform and our Labcoat tool, we also offer a next-generation visualization engine called ReportGrid. &lt;a href=&quot;products/reportgrid&quot;&gt;ReportGrid&lt;/a&gt; allows developers and end-users to build beautiful charts and reports over any data stored in Precog.&lt;/p&gt;
&lt;p&gt;Together, Precog, Labcoat, and ReportGrid present a unified solution to common problems in big data engineering, data science, and business intelligence. This is beautifully pictured by the following illustration:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=42&quot; rel=&quot;attachment wp-att-42&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-42&quot; alt=&quot;precog&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/precog.jpeg&quot; width=&quot;400&quot; height=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our customers are building all kinds of really interesting features into their apps using Precog technology. Some of them use Precog to build analytics and reporting into their applications (for their customers). Others use Precog to power recommendation engines and prediction systems. All of them rave about how much time and money they&apos;ve saved using Precog. Sound interesting? Then why not &lt;a href=&quot;http://www.precog.com/&quot;&gt;explore Precog&lt;/a&gt; for yourself!&lt;/p&gt;
&lt;p&gt;We&apos;ve made signup super easy &#8212; just go &lt;a href=&quot;registration&quot;&gt;here&lt;/a&gt; and fill out a simple form to get a free account on the Precog platform. From there, you can immediately begin using the Precog API, launch Labcoat and begin doing data analysis, or use ReportGrid to build a killer reporting dashboard.&lt;/p&gt;
&lt;p&gt;With the launch of the public beta, we have more documentation than ever before, including API documentation, tutorials, and screencasts. Be sure to check out our documentation center for developers (which contains the all-important getting started guide), as well as our separate documentation area for the Labcoat product.&lt;/p&gt;
&lt;p&gt;After you&apos;ve had a chance to play around, consider upgrading to one of our paid accounts, or just &lt;a href=&quot;contact&quot;&gt;give us feedback&lt;/a&gt; on how we can make our data analysis stack even better. We look forward to hearing from you!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Healthy Habits</title>
      <link>http://localhost:8080/blog/Healthy-Habits/</link>
      <pubDate>Thu, 20 Sep 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Healthy-Habits/</guid>
      <author></author>
      <description>&lt;p&gt;I was recently reading a Harvard Business Review article, &lt;a href=&quot;http://hbr.org/2007/10/manage-your-energy-not-your-time/ar/1&quot;&gt;Manage Your Energy, Not Your Time&lt;/a&gt;, and was pleased, although not terribly surprised, to realize that Precog embraces this philosophy wholeheartedly.  The central idea of the article is that time is a finite resource and the temptation to respond to increasing workloads by working longer hours is a recipe that leads to long term detrimental effects.  Working additional hours can get things done in the short run, but employee health, engagement and satisfaction can all suffer.  Instead it makes sense to focus on energy and productivity over time spent on a task.&lt;/p&gt;
&lt;p&gt;Precog&apos;s dedication to this principle is epitomized by a commitment to a daily fitness break lead by CEO &lt;a href=&quot;http://blog.precog.com/about/team&quot;&gt;John De Goes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mondays and Thursdays are functional training: compound, whole-body exercises that build functional strength and cardiovascular fitness, and prepare muscles for negatives.&lt;/p&gt;
&lt;p&gt;Tuesdays and Fridays are body building training: heavy weights, isolation exercises and assisted negative that build mass (especially after functional days).&lt;/p&gt;
&lt;p&gt;The benefits of this practice are many:&lt;/p&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Taking any break during the day helps provide perspective on a problem and allow the subconscious some time to gnaw away at it.&lt;/li&gt;
&lt;li&gt;Exercise is a great way to mitigate stress, heighten mental acuity and increase focus.&lt;/li&gt;
&lt;li&gt;Group activities create bonding opportunities that enhance trust and communication among participants.&lt;/li&gt;
&lt;li&gt;Long term health benefits lead to fewer sick days and increased productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;p&gt;I haven&apos;t worked this hard since basketball practice in high school, but it feels good and is certainly good for me. It helps to have a couple of strength-training experts on the team, but if you aren&apos;t that fortunate, you could at least go on a walk together.  Throw in a sprint while you&apos;re at it&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Seasons are Changing and so is the Precog Website</title>
      <link>http://localhost:8080/blog/The-Seasons-are-Changing-and-so-is-the-Precog-Website/</link>
      <pubDate>Wed, 19 Sep 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/The-Seasons-are-Changing-and-so-is-the-Precog-Website/</guid>
      <author></author>
      <description>&lt;p&gt;Here at the Precog HQ, we&apos;ve decided to give our website, &lt;a href=&quot;http://www.precog.com/&quot;&gt;www.precog.com&lt;/a&gt;, a refresh! What does this mean for you? It means that we&#8217;ve added new pages and updated our navigation on the site. Now with most company site refreshes, this means re-learning the site navigation and tons of boring new text to read. While we have changed navigation and added new pages, we&#8217;ve also added cool graphics to keep you interested. A Precog Zombie on the &lt;a href=&quot;http://www.precog.com/&quot;&gt;homepage&lt;/a&gt; and &lt;a href=&quot;about/team&quot;&gt;action shots of the team&lt;/a&gt; to name a few (updated bios and more photos in the coming weeks)!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=33&quot; rel=&quot;attachment wp-att-33&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-33&quot; alt=&quot;b2ap3_thumbnail_Screen-Shot-2012-09-18-at-2.38.50-PM&quot; src=&quot;/blog/images/b2ap3_thumbnail_Screen-Shot-2012-09-18-at-2.38.50-PM.png&quot; width=&quot;331&quot; height=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The new navigation menu is designed to reflect the Precog offerings and also to help get you the information you need &#8211; as fast as possible. Need to learn more about what Precog is? Go to &lt;strong&gt;Products &gt; &lt;a href=&quot;products/precog&quot;&gt;Precog&lt;/a&gt;&lt;/strong&gt;. Need the ReportGrid charting solution? Go to &lt;strong&gt;Products &gt; &lt;a href=&quot;products/reportgrid&quot;&gt;ReportGrid&lt;/a&gt;&lt;/strong&gt;. Need to know more about the query language for Labcoat? Go to &lt;strong&gt;Products &gt; Labcoat &gt; &lt;a href=&quot;products/labcoat/quirrel&quot;&gt;Quirrel&lt;/a&gt;&lt;/strong&gt;. Not sure what product you need from us? Go to &lt;a href=&quot;products&quot;&gt;Products&lt;/a&gt; to get a description of each.&lt;/p&gt;
&lt;p&gt;All companies try to sell products, give appealing/accurate descriptions and make product use easier for their customers. At Precog, we continually do each of these, in addition to offering a one-of-a-kind service which pushes your App and Data Analysis to the next level. Our goal is to provide a great online experience coupled with an outstanding product. In short, to capture your interest, imagination and patronage! So, &lt;a href=&quot;http://www.precog.com/&quot;&gt;visit our site&lt;/a&gt;, explore the new pages and have fun &#8220;hanging out&#8221; with the Precog Zombie.&lt;/p&gt;</description>
    </item>
    <item>
      <title>We're Growing up a Tree!</title>
      <link>http://localhost:8080/blog/We-are-growing-up-a-tree/</link>
      <pubDate>Fri, 14 Sep 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/We-are-growing-up-a-tree/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=30&quot; rel=&quot;attachment wp-att-30&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-30&quot; alt=&quot;precog_treejump&quot; src=&quot;/blog/images/precog_treejump.jpeg&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Summer always seems to fly by, but this one especially has flown by at a supersonic speed and before we knew it the Precog team had grown by six! Since I joined Precog as Director of Marketing a little over a month ago, we added three engineers from across the globe. (I didn&apos;t hold the &quot;newbie&quot; badge for very long.) Now I&#8217;d like to introduce our newest (and very clever) engineers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.twitter.com/tixxit&quot;&gt;Tom Switzer&lt;/a&gt; from Toronto, Canada (a Boulderite as of 4 days ago!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.twitter.com/puffnfresh&quot;&gt;Brian McKenna&lt;/a&gt; from Brisbane, Australia (soon-to-be a Boulderite!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.twitter.com/d6&quot;&gt;Erik Asheim&lt;/a&gt; from Montreal, Canada (makes the Boulder winters seem mild)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe you&#8217;ll meet them online or run into them at a conference (they frequently speak at events) but believe me when I say we have an extremely talented team here at Precog. I am so honored to be a part of this company and very excited for the things to come. In fact, the photo above is a sneak peek from our adventurous photo shoot we had here in Boulder and we&#8217;ll post more monkey photos very soon (hint: click on the photo for a fun surprise). Enjoy!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualize Our Events on a Geo Chart</title>
      <link>http://localhost:8080/blog/Visualize-Our-Events-on-a-Geo-Chart/</link>
      <pubDate>Thu, 23 Aug 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Visualize-Our-Events-on-a-Geo-Chart/</guid>
      <author></author>
      <description>&lt;p&gt;Over the next few months, our team will be traveling to events and conferences around the country. Check out the complete events list on our &lt;a href=&quot;news-and-events/21-precog-event&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We�re fanatic about making data easier to understand and turning it into information. Because of this, we take any opportunity to create a good chart with our data. So, we created a visual representation of these events using a &lt;strong&gt;Geo Chart&lt;/strong&gt; from the &lt;a href=&quot;http://www.reportgrid.com/&quot;&gt;ReportGrid visualization library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code to make the Geo Chart is available in a gist. &lt;a href=&quot;https://gist.github.com/3428991&quot;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This chart is different than most, in that the data is in &lt;a href=&quot;http://www.geojson.org/&quot;&gt;geoJSON format&lt;/a&gt;. This format is for encoding a variety of geographic data structures. The Geo Chart visualization works by projecting layers of &lt;em&gt;geoJSON&lt;/em&gt; objects.  It comes equipped with some templates, including the states in the US and a world countries map.&lt;/p&gt;
&lt;p&gt;This example projects the &lt;em&gt;usa-states &lt;/em&gt;template and then layers additional content on top. The layers consist of cities, lines and labels. The geoJSON data needs to be placed in a JavaScript wrapper (easily viewable in the gist).  Some css styling is done in the file as well for convenient access and to make it easier to play with the graphical settings if you want.  Have fun making your own Geo Chart!&lt;/p&gt;
&lt;p&gt;&nbsp;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precog Releases Labcoat by GridGain to offer a real-time Analytics Platform for Data Scientists and Developers</title>
      <link>http://localhost:8080/blog/Precog-Releases-Labcoat-by-GridGain-to-offer-a-real-time-Analytics-Platform-for-Data-Scientists-and-Developers/</link>
      <pubDate>Wed, 22 Aug 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Precog-Releases-Labcoat-by-GridGain-to-offer-a-real-time-Analytics-Platform-for-Data-Scientists-and-Developers/</guid>
      <author></author>
      <description>&lt;p&gt;Precog, the market-leading provider of analytics as a service, today announced that it has partnered with GridGain Systems, a real time big data software company, to offer a real-time data analysis solution. Labcoat by GridGain is a breakthrough analytics platform created from the fusion of two best-in-breed technologies: the data analysis technology of Precog, and the in-memory big data technology of GridGain.&lt;/p&gt;
&lt;p&gt;With an interactive environment for data analysis, Labcoat empowers data analysts, data scientists, and business users to integrate, analyze, and visualize massive volumes of structured or semi-structured data. Powered by GridGain&#8217;s highly-scalable, in-memory data platform, Labcoat helps businesses answer their deepest questions with real-time performance and Enterprise-class scalability.&lt;/p&gt;
&lt;p&gt;&quot;GridGain has proven itself the platform of choice for real-time big data applications. More Fortune 500 businesses rely on GridGain&apos;s in-memory big data platform than any other vendor,&quot; said Nikita Ivanov, Founder &amp; CEO of GridGain. &quot;Now with Labcoat, GridGain has the unprecedented ability to perform sophisticated analytics with a simple user-interface and no coding.&quot;&lt;/p&gt;
&lt;p&gt;The Labcoat environment with the Quirrel evaluation and execution engine is sourced from Precog, while the in-memory scalable data grid is sourced from GridGain. The fusion of the two technologies is seamless and the entire package is available as a single download (no installation is required for Labcoat, as the software is web-based).&lt;/p&gt;
&lt;p&gt;&quot;For decades, companies have used legacy SQL systems to analyze data. But legacy systems can&apos;t keep up with today&apos;s exploding volumes of data, and they can only answer simple questions about data.&quot; says John A. De Goes, CEO of Precog. &quot;With Labcoat by GridGain, companies can now mine any amount of data to find answers to the deepest of questions, with blisteringly fast performance. It&apos;s a revolution in data science.&quot;&lt;/p&gt;
&lt;p&gt;To learn more about Labcoat by GridGain, please visit the Precog website at &lt;a href=&quot;http://www.precog.com/&quot;&gt;www.precog.com&lt;/a&gt; and contact us to receive more information. To experiment with the Labcoat application, please go to &lt;a href=&quot;http://labcoat.precog.com&quot;&gt;labcoat.precog.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About Precog:&lt;/p&gt;
&lt;p&gt;Precog is the leading provider of analytics as a service, helping developers incorporate intelligence and insights into their applications. Precog employs the original authors of the Quirrel language, and has developed the industry&#8217;s most complete and heavily-optimized execution stack for the Quirrel language. In addition, Precog develops Labcoat, a highly-interactive, collaborative data analysis environment. For more information, please visit &lt;a href=&quot;http://www.precog.com/&quot;&gt;www.precog.com&lt;/a&gt; and follow Precog on Twitter &lt;a href=&quot;http://www.twitter.com/precogio&quot;&gt;@precogio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About GridGain: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GridGain develops scalable, distributed, in-memory data platform technology for real time data processing. The company&apos;s Java-based middleware products enable development of applications and services that can instantly access terabytes to petabytes of information from any data source or file system, distribute computational tasks across any number of machines, and produce results orders of magnitude faster than traditionally architected systems. GridGain&apos;s customers include innovative web and mobile businesses, leading Fortune 500 companies, and top government agencies. The company is headquartered in Foster City, California. Learn more at &lt;a href=&quot;http://www.gridgain.com&quot;&gt;www.gridgain.com&lt;/a&gt; and follow GridGain on Twitter &lt;a href=&quot;http://www.twitter.com/gridgain&quot;&gt;@gridgain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Media Contact: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Precog&lt;/strong&gt; &lt;br /&gt;Tasha Danko, 720-936-1131 &lt;br /&gt;&lt;a href=&quot;mailto:marketing@precog.com&quot;&gt;marketing@precog.com&lt;/a&gt; &lt;br /&gt;or &lt;br /&gt;&lt;strong&gt;GridGain Systems, Inc.&lt;/strong&gt; &lt;br /&gt;Jon Webster, 650-241-2281, ext. 2011 &lt;br /&gt;&lt;a href=&quot;mailto:jwebster@gridgain.com&quot;&gt;jwebster@gridgain.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Olympic Data Added to Labcoat</title>
      <link>http://localhost:8080/blog/New-Olympic-Data-Added-to-Labcoat/</link>
      <pubDate>Fri, 17 Aug 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/New-Olympic-Data-Added-to-Labcoat/</guid>
      <author></author>
      <description>&lt;p&gt;The Summer Games in London have wrapped up and we&apos;ve updated our data analysis tool, &lt;a href=&quot;Labcoat&quot;&gt;Labcoat&lt;/a&gt;, with some additional data. This new data is a list of all the medal winners with some additional information such as height, weight and age: perfect for a few more example queries!&lt;/p&gt;
&lt;p&gt;Let&apos;s start to explore this new data by checking out the new preloaded queries from the query manager (lower left-hand-side of Labcoat). There are four new sample queries in the summer games medals folder to take a look at: Attributes by Sport, Correlation of Letters In Name and Medals, Medals by Country and Percentage of Female Athletes by Country.&lt;/p&gt;
&lt;p&gt;A lot of interesting analysis could be conducted on this data; I&apos;d like to share just a few tidbits in this blog post. With the additional information about height, weight and age, it might be interesting to see how these vary across sports:&lt;/p&gt;
&lt;pre style=&quot;font-size: 11px;&quot;&gt;data := //summer&lt;em&gt;games/londonMedals
bySport := forall &apos;Sport
  {sport: &apos;Sport,
aveAge:mean(data.Age where data.Sport =&apos;Sport),
aveWeight: mean(data.Weight where data.Sport = &apos;Sport),
aveHeight:mean(data.HeightIncm where data.Sport =&apos;Sport)}
bySport&lt;/pre&gt;
&lt;p&gt;One way to easily analyze data in Labcoat is to click on a column label in the table format of results. This allows you to sort in ascending and descending order without having to rewrite the query. Click once to sort in ascending order and click a second time to sort in descending order. A brief investigation reveals that not only are medalists in Diving the youngest on average, but also the lightest and shortest.&lt;/p&gt;
&lt;p&gt;In contrast, Equestrian medal winners are by far the oldest, being 6 years older on average than the second oldest group. The second contenders for oldest average age was beach volleyball (surprising to me). However, when considering the &lt;a href=&quot;&lt;a href=&quot;http://espn.go.com/olympics/summer/2012/volleyball/story/&quot;&gt;http://espn.go.com/olympics/summer/2012/volleyball/story/&lt;/a&gt;&lt;/em&gt;/id/8248574/2012-summer-olympics-misty-treanor-kerri-walsh-jennings-win-beach-volleyball-gold&quot;&gt;unprecedented 3rd consecutive gold&lt;/a&gt; medal by &lt;a href=&quot;http://en.wikipedia.org/wiki/Kerri_Walsh_Jennings&quot;&gt;Kerri Walsh Jennings &lt;/a&gt;and &lt;a href=&quot;http://en.wikipedia.org/wiki/Misty_May-Treanor&quot;&gt;Misty May-Treanor&lt;/a&gt;, who are 34 and 35 respectively, this should have been less surprising.&lt;/p&gt;
&lt;p&gt;In the next example, we can dig a bit deeper by using the built-in correlation function. Let&apos;s look at the relationship between the average letters in an athlete&apos;s name by country and the total number of medals won by that country.&lt;/p&gt;
&lt;p&gt;Clearly the letters in someone&apos;s name will not cause them to be better or worse at an Olympic event, but cultural naming conventions may vary in such a way that letters in a name are associated with being from particular regions. And being from certain regions may have a causal impact on an athlete&apos;s ability to win a medal.&lt;/p&gt;
&lt;pre style=&quot;font-size: 11px;&quot;&gt;data := //summer_games/londonMedals
byCountry := forall &apos;Country
 {country: &apos;Country,
gold: sum(data.G where data.Country = &apos;Country),
silver: sum(data.S where data.Country = &apos;Country), 
bronze: sum(data.B where data.Country = &apos;Country),
total: sum(data.Total where data.Country = &apos;Country),
aveLettersInName: mean(std::string::length(
data.Name where data.Country = &apos;Country))}
 std::stats::corr(byCountry.aveLettersInName, byCountry.total)&lt;/pre&gt;
&lt;p&gt;Interestingly, the correlation of ~ -.23 means that there is an inverse correlation between letters in a name and medals won. Gold, silver and bronze medals were included in the above query for easy modification. Changing byCountry.total to byCountry.gold reveals that this inverse correlation is even stronger when considering just gold medals.&lt;/p&gt;
&lt;p&gt;The final query we&apos;ll review is one that returns the top ten countries by percentage of female medal winners. The results are filtered by countries that won five or more medals to prevent a small handful of outliers from dominating the results (although this setting is easily changed for the curious).&lt;/p&gt;
&lt;pre style=&quot;font-size: 11px;&quot;&gt;data := //summer_games/londonMedals
byCountry := forall &apos;Country
  {country: &apos;Country,
percentWomen: sum(data.Total where data.Sex = &quot;F&quot; &amp;
data.Country =&apos;Country)/sum(data.Total where data.Country=&apos;Country),
total: sum(data.Total where data.Country = &apos;Country)}
filtered := byCountry where byCountry.total &lt;=5
filtered where std::stats::rank(neg filtered.percentWomen) &lt;= 10&lt;/pre&gt;
&lt;p&gt;An interesting modification to this query is to replace the final line with a dynamic filter. Instead of examining the top ten results, we can return all the countries where the percent of female medal winners is higher than the average.&lt;/p&gt;
&lt;pre style=&quot;font-size: 11px;&quot;&gt;filtered where filtered.percentWomen &gt; mean(filtered.percentWomen)&lt;/pre&gt;
&lt;p&gt;Even though the United States did not make the top ten in this category, it is still an impressive showing for the US women &#8212; taking home nearly 57% of the medals the US won this year.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to share any interesting insights you found or have a freely available data set you&apos;d like to see us feature, please add a comment to blog post. We&apos;d love to hear from you!&lt;/p&gt;
&lt;p&gt;(This data from the Summer Games in London was provided by &lt;a href=&quot;http://www.google.com/url?q=http%3A%2F%2Fwww.guardian.co.uk%2Fsport%2Fdatablog%2F2012%2Fjul%2F30%2Folympics-2012-alternative-medal-table&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFz84wafYyLwsH_9xPT99RiR12r6Q&quot;&gt;The Guardian DataBlog&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Data Analysis to Uncover Facts about the London Summer Games</title>
      <link>http://localhost:8080/blog/Using-Data-Analysis-to-Uncover-Facts-about-the-London-Summer-Games/</link>
      <pubDate>Wed, 08 Aug 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Using-Data-Analysis-to-Uncover-Facts-about-the-London-Summer-Games/</guid>
      <author></author>
      <description>&lt;p&gt;I&apos;m pleased to introduce myself as new the &lt;strong&gt;Developer Evangelist&lt;/strong&gt; for &lt;strong&gt;Precog!&lt;/strong&gt; I am responsible for tutorials, documentation and providing support for our user community. Have a specific tutorial request? &lt;a href=&quot;mailto:nathan@precog.com&quot;&gt;Let me know&lt;/a&gt; and I&apos;ll try to provide resources for popular topics.&lt;/p&gt;
&lt;p&gt;During the Opening Ceremony of the Olympic Games, some friends and I made a few friendly wagers to make things more exciting. Two of the nail biters were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Will there be a country with only 1 athlete participating?&lt;/li&gt;
&lt;li&gt;Will there be over or under 550 athletes from the US this year?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every time a small island nation showed up during the march of nations, we&apos;d be on the edge of our seats to see how many athletes were walking into the stadium. The line for the US was really quite close (none of us cheated beforehand) and Vanuatu following shortly thereafter as a last chance for a solo athlete. So both of these wagers were determined in the last couple of minutes.&lt;/p&gt;
&lt;p&gt;Rather than just tell you the answers now (that would be too easy!), I&apos;m going to introduce a new tool from Precog that will help you answer these and many more questions.&lt;/p&gt;
&lt;p&gt;As you may have read &lt;a href=&quot;blog-precog/entry/introducing-labcoat-by-precog&quot;&gt;earlier in the week&lt;/a&gt;, we just launched &lt;a href=&quot;labcoat&quot;&gt;Labcoat&lt;/a&gt;, a great interactive development tool for analyzing data. One of the sample data sets pre-loaded in Labcoat is a list of athletes competing in the Olympic Games in London. The data includes the name, sport, country and population of country for each athlete.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=14&quot; rel=&quot;attachment wp-att-14&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-14&quot; alt=&quot;summer-games&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/summer-games.png&quot; width=&quot;1194&quot; height=&quot;701&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some quick tips to get you started analyzing the data for yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check out a variety of sample datasets using the &lt;strong&gt;Virtual File System&lt;/strong&gt;. Select a folder and click on the lightning bolt icon to query all of the data in that path. The &lt;em&gt;summer_games&lt;/em&gt; folder contains not just an athletes folder with the list of athletes competing in 2012, but also another folder with historical medals to explore as well.&lt;/li&gt;
&lt;li&gt;Run some sample queries in the &lt;strong&gt;Query Manager&lt;/strong&gt;. These will give you a good idea about some of the functionality in the Quirrel language. Try modifying a few examples as a way to understand filtering and other concepts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s modify one of the the preloaded queries to help answer one of the questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the &lt;em&gt;Athletes By Country&lt;/em&gt; query in the &lt;em&gt;summer_games&lt;/em&gt; folder. Double click to load the query and hit the &quot;run&quot; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.precog.com/?attachment_id=15&quot; rel=&quot;attachment wp-att-15&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-15&quot; alt=&quot;athletes_by_country_20120808-161332_1&quot; src=&quot;http://blog.precog.com/wp-content/uploads/2012/12/athletes_by_country_20120808-161332_1.png&quot; width=&quot;450&quot; height=&quot;39&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This query returns the number of athletes from each country. This is a good start to answer the first question: Will there be a country with only 1 athlete participating?&lt;/p&gt;
&lt;p&gt;Now we just need to find the minimum number of athletes. So, we&apos;ll use the same core query with just a few modifications.&lt;/p&gt;
&lt;p&gt;First, we&apos;ll assign the &lt;strong&gt;forall&lt;/strong&gt; statement into a variable so it can easily be re-used in filtering. Then, we can call the &lt;strong&gt;min&lt;/strong&gt; function on this new variable and get the answer we are looking for. The modifications are below:&lt;/p&gt;
&lt;pre&gt;&lt;em&gt;data := //summer_games/athletes
athletesByCountry := forall &apos;Countryname
   {CountryName: &apos;Countryname,
    count                 : count(data where data.Countryname = &apos;Countryname)} 
min(athletesByCountry)&lt;/em&gt;&lt;/pre&gt;
&lt;p&gt;This query returns a result of 2, meaning the minimum number of athletes competing for any country was 2. So, there were no countries with only 1 athlete participating! I had many close calls, since there were numerous countries with 2 athletes, but in the end I managed to hang on and win this bet.&lt;/p&gt;
&lt;p&gt;To answer the second question about the number of athletes from the US this year, we can simply replace the last line (calling &lt;strong&gt;min&lt;/strong&gt; on &lt;strong&gt;athletesByCountry&lt;/strong&gt;) with a &lt;strong&gt;where&lt;/strong&gt; filter that returns only the data where the name of the country is &quot;US&quot;.&lt;/p&gt;
&lt;pre&gt;&lt;em&gt;athletesByCountry where athletesByCountry.CountryName = &quot;US&quot;&lt;/em&gt;&lt;/pre&gt;
&lt;p&gt;Modifying the query in this way will return two sets, each with just one value: &lt;strong&gt;CountryName&lt;/strong&gt;: &quot;US&quot; and &lt;strong&gt;count&lt;/strong&gt;: 534. I bet that there would be over 550 athletes from the US, so I just barely missed winning both bets. But fun was had by all.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://labcoat.precog.com&quot;&gt;Visit Labcoat&lt;/a&gt; to run these and many more queries. For a &lt;a href=&quot;http://www.youtube.com/watch?v=cLHU8JZztNs&quot;&gt;five-minute overview&lt;/a&gt; of Labcoat, watch the video below:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.youtube.com/embed/cLHU8JZztNs&quot; height=&quot;390&quot; width=&quot;625&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that the tutorial and reference guide is conveniently located on the righthand side of &lt;a href=&quot;http://labcoat.precog.com&quot;&gt;Labcoat&lt;/a&gt; to help with modifying any preloaded queries or building any queries from scratch. If you get an error on a query that leaves you scratching your head, go ahead and fire an email off to support using the envelope icon in the upper-right-hand side of the Quirrel editor pane. We&apos;ll help you &lt;a href=&quot;labcoat&quot;&gt;unleash your inner data scientist&lt;/a&gt; in no time!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Labcoat by Precog</title>
      <link>http://localhost:8080/blog/Introducing-Labcoat-by-Precog/</link>
      <pubDate>Mon, 06 Aug 2012 00:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/blog/Introducing-Labcoat-by-Precog/</guid>
      <author></author>
      <description>&lt;p&gt;Today marks the official launch of &lt;a href=&quot;labcoat&quot;&gt;Labcoat&lt;/a&gt;, a new interactive environment for data analysis that makes some of the incredible technology we&apos;ve been working on accessible to anyone with a browser and a passion for understanding data.&lt;/p&gt;
&lt;p&gt;Until this moment, Precog has only offered an API, with no tools of any kind (which has made it remarkably hard to demo Precog!). Developers in our private beta have used our ingest API to capture behavioral, transactional, and historical data, and then used our analysis API to analyze the data, usually to power features like analytics and reporting inside their applications.&lt;/p&gt;
&lt;p&gt;As we helped our private beta customers integrate Precog into their own applications, however, we keenly felt the lack of solid development tools.&lt;/p&gt;
&lt;p&gt;In the early phases of integration with Precog, you don&apos;t really know how you want to analyze the data to power different features in your application. It&apos;s a trial and error process, and until recently, it was dominated by frequent use of the Javascript client library or the curl command-line utility &#8212; the two &quot;easiest&quot; ways to interface with our API.&lt;/p&gt;
&lt;p&gt;Our API is great for building automated functionality inside applications (features like analytics, insights, reporting, predictions, and so forth). But in its raw form, the API is a poor fit for the iterative, experimental nature of learning how best to analyze data to build those features.&lt;/p&gt;
&lt;p&gt;We realized something needed to be done about the problem, so we went to the drawing board and started brainstorming about how we could make exploratory data analysis as accessible as possible.&lt;/p&gt;
&lt;p&gt;We emerged with an ambitious set of goals. We wanted to make all of the following incredibly easy for users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting data into Precog in a variety of data formats.&lt;/li&gt;
&lt;li&gt;Developing queries in Quirrel (the powerful query language we support on the backend).&lt;/li&gt;
&lt;li&gt;Running queries and getting the results directly and in chart format.&lt;/li&gt;
&lt;li&gt;Collaborating with team members and the broader Quirrel community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Months later, after countless hours spent developing, testing, and refining based on early feedback, we are proud to announce Labcoat &#8212; the tool so incredible easy and addictive to use, we&apos;re betting it will unleash the inner data scientist in anyone who tries it.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;625&quot; height=&quot;390&quot; src=&quot;http://www.youtube.com/embed/vKPmZKLt3G0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Labcoat was designed to be a developer tool, so it has lots of nice features designed to make it easy to build data-driven applications on Precog. For example, once you develop a query that produces the results you want, you can easily export it as code (PHP, Javascript, Ruby, Java, etc.), embed the code into your application, and run the query programmatically to power features inside your application.&lt;/p&gt;
&lt;p&gt;Beyond just developers, though, Labcoat makes some pretty incredible data analysis technology accessible to non-developers. Precog has excellent support for Quirrel, a very simple yet powerful query language designed for data analysis. Quirrel can be used by just about anyone, even if they don&apos;t have an analytical background (our Director of Marketing learned the basics in 2 hours!).&lt;/p&gt;
&lt;p&gt;Data analysts, data scientists, statisticians, and others who do have an analytical background will feel right at home in Labcoat &#8212; poking, prodding, massaging, and analyzing data to uncover all sorts of incredibly interesting insights. And, whatever the data guys come up with can be seamlessly productized by engineering teams with a few clicks of the mouse button.&lt;/p&gt;
&lt;p&gt;In this way, Labcoat succeeds at bringing together two worlds that have remained separate: the world of the data scientist, who interactively and iteratively explores data; and the world of the software engineer, who productizes data by using it to power features inside applications.&lt;/p&gt;
&lt;p&gt;Sound intriguing? Then hop on over to &lt;a href=&quot;http://labcoat.precog.com&quot;&gt;&lt;a href=&quot;http://labcoat.precog.com&quot;&gt;http://labcoat.precog.com&lt;/a&gt; to experience Labcoat for yourself. There&apos;s nothing to install, nothing to configure, and you don&apos;t need to signup for an account. Just jump right in and explore some of the sample data sets we&apos;ve preloaded into this special preview version of Labcoat. Let us know what you find and how we can make the tool even better!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>